<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Health</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Health.ApplicationProvisioning.Provisioner">
            <summary>
            An application provisioning application can use the method of this class to 
            provision and update child applications.
            </summary>
            
            <remarks>
            HealthVault allows certain types of application to be used to instantiate, configure, and
            update applications that are related to it.  For example, one implementation of an application
            may be used and installed as many different application instances. To allow for these 
            separate applications to be instantiated HealthVault enables a "parent" application to
            tell HealthVault about a new installation of the application and provide certain configuration
            values for it.  That application will then be able access HealthVault with a unique 
            application identifier.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)">
            <summary>
            Gets the configuration information for the specified child application ID.
            </summary>
            
            <param name="connection">
            The connection to use to get the application information.
            </param>
            
            <param name="childApplicationId">
            The unique application identifier for the child application to get the configuration
            information for.
            </param>
            
            <returns>
            Configuration information for the specified child application.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="childApplicationId"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the application specified in the <paramref name="connection"/> is not a master
            application, or if <paramref name="childApplicationId"/> does not identify a child
            application of the calling application.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is an error when the HealthVault service is called.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationProvisioning.Provisioner.AddApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.ApplicationInfo)">
             <summary>
             Adds a HealthVault application instance for a "child" application of the calling
             application.
             </summary>
             
             <param name="connection">
             A HealthVault connection instantiated as the provisioning application.
             </param>
             
             <param name="applicationConfigurationInformation">
             Configuration information about the application being provisioned.
             </param>
             
             <returns>
             The new application identifier for the new application provided by HealthVault.
             </returns>
            
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="connection"/> or <paramref name="applicationConfigurationInformation"/>
             is <b>null</b>.
             </exception>
             
             <exception cref="T:System.ArgumentException">
             If <see cref="P:Microsoft.Health.ApplicationInfo.Name"/>, <see cref="P:Microsoft.Health.ApplicationInfo.PublicKeys"/>,
             <see cref="P:Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations"/>, <see cref="P:Microsoft.Health.ApplicationInfo.Description"/>,
             <see cref="P:Microsoft.Health.ApplicationInfo.AuthorizationReason"/>, or <see cref="P:Microsoft.Health.ApplicationInfo.LargeLogo"/> 
             is not specified.
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             If there is an error when the HealthVault service is called.
             </exception>
             
        </member>
        <member name="T:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash">
            <summary>
            Implements base functionality for Capi hashes.  This class manages
            the hash algorithm callbacks and manages the Capi context and hash 
            handles.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.#ctor(System.String,Microsoft.Health.Authentication.ProviderType,Microsoft.Health.Authentication.AlgorithmId)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash"/> class.
            </summary>
            
            <param name="provider">
            The name of the Capi provider.
            </param>
            
            <param name="providerType">
            Type of the provider.
            </param>
            
            <param name="algorithm">
            The hash algorithm.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.Dispose">
            <summary>
            Releases unmanaged and managed resources.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and managed resources.
            </summary>
            
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; 
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Implements the core hashing functionality.  
            </summary>
            
            <param name="data">
            The array containing the bytes to hash.
            </param>
            
            <param name="offset">
            The offset into the array.
            </param>
            
            <param name="count">
            The count of bytes to hash.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.HashFinal">
            <summary>
            Finalizes the hash.
            </summary>
            
            <returns>
            Returns the hash value.
            </returns>
        </member>
        <member name="P:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.CryptoContext">
            <summary>
            Gets the crypto context.
            </summary>
            
            <value>
            The crypto context.
            </value>
        </member>
        <member name="P:Microsoft.Health.Authentication.AbstractCryptoServiceProviderHash.AlgorithmId">
            <summary>
            Gets the algorithm id.
            </summary>
            
            <value>
            The algorithm id.
            </value>
        </member>
        <member name="T:Microsoft.Health.Authentication.ApplicationRecordAuthorizationAction">
            <summary>
            Enumeration of the application record authorization action codes.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.ApplicationRecordAuthorizationAction.Unknown">
            <summary>
            The server returned a value that is not understood by this client.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.ApplicationRecordAuthorizationAction.AuthorizationRequired">
            <summary>
            The application has never been authorized.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.ApplicationRecordAuthorizationAction.ReauthorizationRequired">
            <summary>
            The application both requires and can do re-authorization.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.ApplicationRecordAuthorizationAction.ReauthorizationNotPossible">
            <summary>
            The application requires but cannot do re-authorization.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.ApplicationRecordAuthorizationAction.NoActionRequired">
            <summary>
            There are no actions required.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.ApplicationTokenCreationInfo">
            <summary>
            Contains the information about an application needed to construct a user's credential for
            that application.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.ApplicationTokenCreationInfo.#ctor(System.Guid,System.Boolean)">
            <summary>
            Constructs an <see cref="T:Microsoft.Health.Authentication.ApplicationTokenCreationInfo"/> instance with the specified
            application identifier and whether the application supports multiple records.
            </summary>
            
            <param name="appId">
            The unique application identifier.
            </param>
            
            <param name="isMra">
            States whether the application is a multi-record app.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.ApplicationTokenCreationInfo.ApplicationId">
            <summary>
            Gets the unique application identifier.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.ApplicationTokenCreationInfo.IsMRA">
            <summary>
            Gets whether the application supports multiple records.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.AuthSessionKeySetPairs.CreatePair(System.Guid)">
            <summary>
            Creates an unauthenticated keyset pair for the specified
            <paramref name="applicationId"/> with a new keyset.
            </summary>
            
            <param name="applicationId">
            The application id to create the keyset pair for.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.Web.Authentication.AuthenticatedSessionKeySet">
            <summary>
            A keyset used to create authenticated sessions with the 
            HealthVault Service.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.AuthenticatedSessionKeySet.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.Authentication.AuthenticatedSessionKeySet"/> 
            class using the supplied Hash Message Authentication Code (HMAC) 
            key material.
            </summary>
            
            <param name="hmacAlgorithmName">
            The well-known algorithm name for the HMAC primitive to be used to 
            ensure envelope integrity and authentication.
            </param>
            
            <param name="hmacKeyMaterial">
            The key material that will be used to construct the HMAC primitive.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="hmacAlgorithmName"/> or 
            <paramref name="hmacKeyMaterial"/> parameter is <b>null</b> or empty,
            or the key material bytes are all zeros.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.AuthenticationTokenCreationStatus">
            <summary>
            Provides authentication token creation status codes.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.AuthenticationTokenCreationStatus.Unknown">
            <summary>
            The server returned a value that this client cannot read.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.AuthenticationTokenCreationStatus.Success">
            <summary>
            The authentication token has been successfully returned.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.AuthenticationTokenCreationStatus.PersonNotAuthorizedForApp">
            <summary>
            The person is not authorized for the specified application.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.AuthenticationTokenCreationStatus.PersonAppAcceptanceRequired">
            <summary>
            The application requires acceptance by the person.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.Authentication.AuthenticationTokenCreationStatus.CredentialNotFound">
            <summary>
            The credential was not found.
            </summary>
        </member>
        <member name="T:Microsoft.Health.Web.Authentication.AuthenticationTokenKeySetPair">
            <summary>
            A keyset token pair is an explicit binding between an authentication
            token and the shared secret that was used to create the token.
            Since the token is opaque, the client doesn't really know when the
            token will expire by examination.  However, since there is a 1:1 
            binding between the token and the shared secret, we can use the
            shared secret expiration as the token expiration.
            </summary>
            
            <remarks>
            All access to an instnace of the pair must be governed through
            the reader/writer lock, as the token may expire at any time.  
            
            That said, any user of the WebApplicationCredential should first
            if verify the token is expired.  If it is not, then the caller should
            be able to use it to make at least one call.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.AuthenticationTokenKeySetPair.Update(Microsoft.Health.Authentication.CreateAuthenticationTokenResult,System.Guid)">
            <summary>
            </summary>
            
            <remarks>
            In order to avoid unnecessary authentication actions, it is 
            expected that the caller will first call 
            <cref name="IsAuthenticationExpired"/> before calling this.
            </remarks>
            
            <param name="result">
            The authenticated session token.
            </param>
            
            <param name="applicationId">
            The application id of the keyset pair that will be authenticated.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.CreateAuthenticationTokenResult">
            <summary>
            Encapsulates the authentication token creation results.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.IsAuthenticated(Microsoft.Health.Authentication.CreateAuthenticationTokenResult)">
            <summary>
            Gets a value indicating whether the result contains a successfully 
            authenticated token.
            </summary>
            
            <param name="result">
            The result to query.
            </param>
            
            <returns>
            <b>true</b> if the result contains a successfully 
            authenticated token; otherwise, <b>false</b>.
            </returns> 
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.Status">
            <summary>
            Gets the authentication token creation status.
            </summary>
            
            <returns>
            An instance of <see cref="T:Microsoft.Health.Authentication.AuthenticationTokenCreationStatus"/>.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.AuthenticationToken">
            <summary>
            Gets the authentication token.
            </summary>
            
            <returns>
            An instance of <see cref="P:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.AuthenticationToken"/>.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.ApplicationRecordAuthorizationAction">
            <summary>
            Gets the application record authorization action.
            </summary>
            
            <returns>
            An instance of <see cref="P:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.ApplicationRecordAuthorizationAction"/>.
            </returns>
            
            <remarks>
            The application record authorization action only 
            applies if the value of <see cref="P:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.Status"/> is Success.
            </remarks>
            
            <seealso cref="P:Microsoft.Health.Authentication.CreateAuthenticationTokenResult.Status"/>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.Credential">
            <summary>
            Provides base functionality for all Microsoft HealthVault service 
            authentication credential types. This class is abstract.
            </summary>
            
            <remarks>
            Credentials serve as the basis for all authentication with the 
            Microsoft HealthVault service. Each credential class implements a specific
            credential type. As more credential types are required, a new 
            credential is required for each.
            You should inherit from this class only if support for a new 
            HealthVault authentication credential type is required.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)">
            <summary>
            Gets the credential's authentication results from prior successful 
            authentications with the Microsoft HealthVault service.
            </summary>
            
            <param name="applicationId">
            The application that was previously authenticated.
            </param>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.Authentication.CreateAuthenticationTokenResult"/>.
            </value>
            
            <remarks>
            The key of the dictionary is the application id of the application
            for which the authentication request was made. If an application ID
            is not present in the dictionary, then an authentication request
            has not been made for this application, and this method therefore 
            returns <b>null</b>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.ExpireAuthenticationResult(System.Guid)">
            <summary>
            Retrieves a value indicating whether an authentication request
            expires.
            <cref name="AuthenticationRequired"/> returns <b>true</b>.
            </summary>
            
            <param name="applicationId">
            The application identifier of the web application.
            </param>
            
            <returns>
            <b>true</b> if the request should attempt reauthentication; 
            otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.AuthenticateIfRequired(Microsoft.Health.HealthServiceConnection,System.Guid)">
            <summary>
            Authenticates an <paramref name="applicationId"/> if none exists.
            </summary>
            
            <param name="connection">
            The connection to use for reauthentication, if necessary.
            </param>
            
            <param name="applicationId">
            The application ID to verify if authentication is required.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.Authenticate(Microsoft.Health.HealthServiceConnection,System.Guid)">
            <summary>
            Authenticates or re-authenticates the credential.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetHeaderSection(System.Guid,System.Xml.XmlWriter)">
            <summary>
            Retrieves a header section given the specified application ID and 
            XMLWriter.
            </summary>
            
            <param name="appId">
            The application ID context to write the header section for.
            </param>
            
            <param name="writer">
            The XML writer that is constructing the header section.
            </param>
            
            <remarks>
            Derived classes can insert header section XML as appropriate.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The <paramref name="appId"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetHeaderSection(System.Guid)">
            <summary>
            Retrieves a header section given the specified application ID.
            </summary>
            
            <param name="appId">
            The application ID context to write the header section for.
            </param> 
            
            <returns>
            A string representing the header section query parameter.
            </returns>
            
            <remarks>
            Derived classes can return header section query string parameter 
            as appropriate.
            </remarks> 
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The <paramref name="appId"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.AddAuthenticationResult(System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult)">
            <summary>
            Inserts a new authentication result into the authentication results 
            dictionary.
            </summary>
            
            <param name="appId">
            The application identifier of the web application.
            </param>
            
            <param name="result">
            The authentication result to add to the results for the specified
            application.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.UpdateAuthenticationResults(System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult})">
            <summary>
            Inserts a dictionary of authentication results.
            </summary>
            
            <param name="newResults">
            An instance of <see cref="T:System.Collections.Generic.Dictionary`2"/> 
            representing the authentication results.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection,System.Guid)">
            <summary>
            Gets an authentication token in the context of the credential.
            </summary>
            
            <remarks>
            The resulting authentication result is inserted into 
            <see cref="M:Microsoft.Health.Authentication.Credential.GetAuthenticationResult(System.Guid)"/>.
            This method accesses the HealthVault service across the network.
            If the application ID specified is already in the dictionary,
            then the authentication attempt is not made and the cached 
            authentication result is used.
            </remarks>
            
            <param name="connection">
            The client-side representation of the HealthVault service.
            </param>
            
            <param name="appId">
            The HealthVault application identifier for which the request is 
            made.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="appId"/> parameter is <b>null</b> or empty.
            </exception>
            
            <seealso cref="T:Microsoft.Health.HealthServiceConnection"/>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.MakeCreateTokenCall(System.String,System.Int32,Microsoft.Health.HealthServiceConnection,System.Guid,System.Boolean)">
            <summary>
            Creates authentication tokens and absence reasons for user credentials.
            </summary>
            
            <remarks>
            This method takes only one application ID, which is the typical case.
            </remarks>
            
            <param name="methodName">
            The HealthVault service method name to call.
            </param>
            
            <param name="version">
            The version of the service method to call.
            </param>
            
            <param name="connection">
            The <see cref="T:Microsoft.Health.AnonymousConnection"/> instance.
            </param>
            
            <param name="appId">
            The application ID to create a token for.
            </param>
            
            <param name="isMra">
            The application is a multi-record app.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="methodName"/> or <paramref name="appIdCollection"/> 
            parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.MakeCreateTokenCall(System.String,System.Int32,Microsoft.Health.HealthServiceConnection,System.Collections.ObjectModel.Collection{Microsoft.Health.Authentication.ApplicationTokenCreationInfo})">
            <summary>
            Create authentication tokens and absence reasons for user 
            credentials, given the specified method, connection, and multiple 
            application ID's.
            </summary>
            
            <remarks>
            The Shell primarily uses multiple application ID's when 
            constructing simple credential tokens: One each for the Shell and 
            for the target application.
            </remarks>
            
            <param name="methodName">
            The HealthVault service method name to call.
            </param>
            
            <param name="version">
            The version of the service method to call.
            </param>
            
            <param name="connection">
            The <see cref="T:Microsoft.Health.AnonymousConnection"/> instance.
            </param>
            
            <param name="appTokenCreationInfo">
            The collection of application identifiers.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="methodName"/> or <paramref name="appIdCollection"/> 
            parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.ParseExtendedElements(System.Xml.XPath.XPathNavigator)">
            <summary>
            Parses any method specific elements in the response.
            </summary>
            
            <param name="nav">
            The response XML path navigator.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.RemoveCachedResultHits(System.Collections.ObjectModel.Collection{Microsoft.Health.Authentication.ApplicationTokenCreationInfo})">
            <summary>
            Removes application identifiers for which there are already results.
            </summary>
            
            <param name="collection">
            The collection of application identifiers for which the credential 
            will attempt to create tokens.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.RemoveDuplicates(System.Collections.ObjectModel.Collection{Microsoft.Health.Authentication.ApplicationTokenCreationInfo})">
            <summary>
            Removes duplicate application identifiers.
            </summary>
            
            <param name="collection">The input collection.</param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.ConstructCreateTokenInfoXml(System.Collections.ObjectModel.Collection{Microsoft.Health.Authentication.ApplicationTokenCreationInfo})">
            <summary>
            Retrieves token information.
            </summary>
            
            <param name="appIdCollection">
            A collection of application identifiers.
            </param>
            
            <returns>
            An XML string representing the token information.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.ConstructCreateTokenInfoXmlAppIdPart(System.Xml.XmlWriter,System.Collections.ObjectModel.Collection{Microsoft.Health.Authentication.ApplicationTokenCreationInfo})">
            <summary>
            Creates the specified individual values of application identifiers 
            in the specified collection.
            </summary>
            
            <param name="writer">
            The XmlWriter receiving the values.
            </param>
            
            <param name="appIdCollection">
            The collection containing the application identifiers.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetAuthTokenAndAbsenceReasons(System.Xml.XPath.XPathNavigator,System.Int32)">
            <summary>
            Gets authentication token absence reasons from response XML.
            </summary>
            
            <param name="nav">
            The response XML path navigator.
            </param>
            
            <param name="appIdCollectionCount">
            An integer representing the number of application identifiers in the collection.
            </param>
            
            <returns>
            The dictionary of updated authentication results.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetAuthenticationToken(System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult},System.Xml.XPath.XPathNavigator)">
            <summary>
            Extracts the authentication token from the response XML.
            </summary>
            
            <param name="createAuthTokenResults">
            The token results.
            </param>
            
            <param name="nav">
            The path to the token.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetAbsenceReasons(System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult},System.Xml.XPath.XPathNavigator)">
            <summary>
            Extracts the absence reasons from the response XML.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetTokenByParseResponse(System.Xml.XPath.XPathNodeIterator,System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult})">
            <summary>
            Gets one or more authorization tokens from the response XML.
            </summary>
            
            <param name="navTokenIterator">
            The path to the token or tokens.
            </param>
            
            <param name="createAuthTokenResults">
            The token results.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.GetAbsenceReasonByParseResponse(System.Xml.XPath.XPathNodeIterator,System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult})">
            <summary>
            Gets absence reasons regarding why there are no auth tokens 
            from the response XML.
            </summary>
            
            <param name="navTokenIterator">
            The path to the token or tokens.
            </param>
            
            <param name="createAuthTokenResults">
            The token results.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.CreateFromCookieXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Instantiates a credential from type information and subsequently 
            calls <see cref="M:Microsoft.Health.Authentication.Credential.ReadCookieXml(System.Xml.XmlReader)"/> to initialize the object.
            </summary>
            
            <param name="credNav"></param>
            
            <returns>
            An instance of <see cref="T:Microsoft.Health.Authentication.Credential"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.WriteCookieXml(System.Xml.XmlWriter)">
            <summary>
            Enables a credential to create a secure or safe representation 
            that can be stored as an HTTP cookie.
            </summary>
            
            <param name="writer">
            The XmlWriter receving the credential representation.
            </param>        
            
            <remarks>
            The credential object is instantiated using Activator by using 
            stored type information in the cookie. The default behavior is to 
            write the type.
            </remarks>
            
            <seealso cref="M:Microsoft.Health.Authentication.Credential.CreateFromCookieXml(System.Xml.XPath.XPathNavigator)"/>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.ReadCookieXml(System.Xml.XmlReader)">
            <summary>
            Reconstructs the credential state from the previously
            written cookie XML.
            </summary>
            
            <param name="reader">
            The XmlReader containing the credential state to be restored.
            </param>    
            
            <remarks>
            This method runs after the type is read and an instance of this 
            object is created.
            </remarks>
            
            <seealso cref="M:Microsoft.Health.Authentication.Credential.CreateFromCookieXml(System.Xml.XPath.XPathNavigator)"/>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.WriteInfoXml(System.Xml.XmlWriter)">
             <summary>
             Generates the credential-specific XML that is sent 
             to the HealthVault service.
             </summary>
             
             <param name="writer">
             The XmlWriter receiving the credentials.
             </param>
             
             <remarks>
             When an inherited class implements WriteInfoXml, the method should
             produce XML in accordance with the HealthVault XML schema for the 
             specific credential type.
             This method is only called internally and is subject to change.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="writer"/> parameter is <b>null</b>. 
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.Authentication.Credential.AuthenticateData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Applies the shared secret to the specified data.
            </summary>
            
            <remarks>
            After the initial authentication is made with the HealthVault service,
            all subsequent calls to the HealthVault service must have
            authenticated header sections. This is the method that is used
            to produce the hmac-data for the "auth" section.
            
            If this method is called, then the holding connection object 
            is trying to authenticate data, so the credential must have a shared secret.
            
            If the credential implements its own shared secret,
            then this might be <b>null</b>.
            </remarks>
            
            <param name="data">
            The data to authenticate.
            </param>
            
            <param name="index">
            The starting index into the data.
            </param>
            
            <param name="count">
            The number of bytes from the start index to authenticate.
            </param>
            
            <returns>
            The authenticated data is returned. If <see cref="P:Microsoft.Health.Authentication.Credential.SharedSecret"/>
            is <b>null</b>, String.Empty is returned.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="data"/> parameter is <b>null</b> or empty. 
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The shared secret parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.Credential.SharedSecret">
            <summary>
            Gets or sets the credential's shared secret.
            </summary>
            
            <returns>
            An instance of <see cref="T:Microsoft.Health.Authentication.CryptoHash"/> representing the shared 
            secret.
            </returns>
            
            <remarks>
            When a credential is used to establish an authenticated session
            with the Microsoft HealthVault service, it uses a shared secret
            to authenticate data transmissions. If the credential does not
            support an authenticated session, this property will be <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The value is set to <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.Credential.AuthenticationMethodName">
            <summary>
            Gets the authentication HealthVault service method name.
            </summary>
            
            <returns>
            A string representing the name.
            </returns>
            
            <remarks>
            The authorization method changes based on the credential type.
            Some credentials are publicly available and some must be used only 
            by the shell.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.CryptoConfiguration">
            <summary>
            Provides access to both application-level settings and 
            methods to both specify and construct cryptographic primitives.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.GenerateHmacSharedSecret">
            <summary>
            Generates an HMAC shared secret for the default HMAC algorithm.
             </summary>
            
            <returns>
            A byte array representing the HMAC shared secret.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String,System.Byte[])">
            <summary>
            Creates a new Hash Message Authentication Code (HMAC) instance 
            using the specified <paramref name="algorithmName"/> and 
            <paramref name="keyMaterial"/>.
            </summary>
            
            <param name="algorithmName">
            The well-known algorithm name that specifies the HMAC primitive.
            </param>
            
            <param name="keyMaterial">
            The provided key material to be used as the HMAC key.
            </param>
            
            <returns>
            A new HMAC instance.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="algorithmName"/> parameter is <b>null</b> or empty.
            The <paramref name="algorithmName"/> parameter is not of type HMAC.
            The <paramref name="keyMaterial"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)">
            <summary>
            Creates a new Hash Message Authentication Code (HMAC) instance 
            based on the specified <paramref name="algorithmName"/>.
            </summary>
            
            <remarks>
            Since this method does not take user-specified 
            <paramref name="keyMaterial"/>,
            the caller must set the key after this call and before using the 
            HMAC algorithm.
            </remarks>
            
            <param name="algorithmName">
            The well-known algorithm name which specifies the HMAC primitive.
            </param>
            
            <returns>
            A new HMAC instance of type <paramref name="algorithmName"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="algorithmName"/> parameter is <b>null</b> or empty.
            The <paramref name="algorithmName"/> parameter is not of type HMAC.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.Byte[])">
            <summary>
            Creates a new Hash Message Authentication Code (HMAC) based on 
            the current key.
            </summary>
            
            <param name="keyMaterial">
            The provided key material to be used as the HMAC key.
            </param>
            
            <returns>
            A new HMAC instance using <see cref="P:Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName"/> 
            and the provided <paramref name="keyMaterial"/>.  
            </returns>
            
            <seealso cref="P:Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName"/>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="keyMaterial"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)">
            <summary>
            Creates a new hash algorithm based on the specified 
            <paramref name="algorithmName"/>.
            </summary>
            
            <param name="algorithmName">
            The well-known algorithm name that specifies the Hash Message 
            Authentication Code (HMAC) primitive.
            </param>
            
            <returns>
            A new hash algorithm of type <paramref name="algorithmName"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="algorithmName"/> parameter is not supported.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm">
            <summary>
            Creates a new hash algorithm with default values.
            </summary>
            
            <returns>
            An instance of <see cref="P:Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName"/>.
            </returns>
            
            <seealso cref="P:Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName"/>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String,System.Byte[])">
            <summary>
            Constructs a symmetric key algorithm based on the specified 
            <paramref name="algorithmName"/> and <paramref name="keyMaterial"/>.
            </summary>
            
            <param name="algorithmName">
            The well-known algorithm name that specifies the symmetric 
            algorithm primitive.
            </param>
            
            <param name="keyMaterial">
            The provided key material to be used as the Hash Message 
            Authentication Code (HMAC) key.
            </param>
            
            <returns>
            A new symmetric key of type <paramref name="algorithmName"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="algorithmName"/> parameter is not supported,
            or the <paramref name="keyMaterial"/> parameter is invalid.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoConfiguration.VerifyKeyMaterialNotEmpty(System.Byte[])">
            <summary>
            Verifies that the provided key material is not empty or have a value of 
            zero.
            </summary>
            
            <exception name="ArgumentException">
            The <paramref name="keyMaterial"/> parameter is empty or has a 
            value of zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoConfiguration.HmacAlgorithmName">
            <summary>
            Gets the preferred application-wide Hash Message Authentication Code 
            (HMAC) algorithm name.
            </summary>
            
            <remarks>
            The application-wide algorithm name may be specified in the 
            configuration, but if it is not, then a default value is used.  
            This algorithm name can be used to construct an HMAC primitive 
            using <see cref="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHmac(System.String)"/>.
            </remarks>
            
            <returns>
            The HMAC algorithm name.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoConfiguration.HashAlgorithmName">
            <summary>
            Gets the preferred application-wide hash algorithm name.
            </summary>
            
            <returns>
            A string representing the algorithm name.
            </returns>
            
            <remarks>
            The application-wide algorithm name can be specified in the 
            configuration, but if it is not, then a default value is used.  
            This algorithm name can be used to construct a hash primitive using
            <see cref="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)"/>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName">
            <summary>
            Gets the preferred application-wide hash algorithm name for 
            computing digests to be used for signature generation.
            </summary>
            
            <returns>
            A string representing the algorithm name.
            </returns>
            
            <remarks>
            The application-wide algorithm name can be specified in the 
            configuration, but if it is not, then a default value is used.  
            This algorithm name can be used to construct a hash primitive using
            <see cref="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateHashAlgorithm(System.String)"/>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoConfiguration.SignatureAlgorithmName">
            <summary>
            Gets the preferred application-wide signature algorithm name.
            </summary>
            
            <remarks>
            The application-wide algorithm name can be specified in the 
            configuration, but if it is not, then a default value is used.  
            The signature signing algorithm is currently RSA. The RSA algorithm
            name is prepended to the default 
            <seealso cref="P:Microsoft.Health.Authentication.CryptoConfiguration.SignatureHashAlgorithmName"/>.
            </remarks>
            
            <returns>
            A string representing the signature algorithm name.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoConfiguration.SymmetricAlgorithmName">
            <summary>
            Gets the preferred application-wide symmetric algorithm name.
            </summary>
            
            <remarks>
            The application-wide algorithm name can be specified in the 
            configuration, but if it is not, then a default value is used.  
            The symmetric algorithm name can be used to construct a
            symmetric algorithm via <see cref="M:Microsoft.Health.Authentication.CryptoConfiguration.CreateSymmetricAlgorithm(System.String,System.Byte[])"/>.
            </remarks>
            
            <returns>
            A string representing the default symmetric algorithm name.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoConfiguration.CryptoServiceProviderName">
            <summary>
            Gets the name of the crypto service provider for the currently
            running operating system version.
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Health.Authentication.CryptoHmacFinalized">
            <summary>
            Represents finalized Hash Message Authentication Code (HMAC) states 
            that are sent via XML requests.
            </summary>
            
            <remarks>
            HealthVault verifies the hash against this object's digest.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.CryptoHashFinalized">
            <summary>
            Represents finalized hash states that are sent via XML requests.  
            </summary>
            
            <remarks>
            HealthVault verifies the hash against this object's digest.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHashFinalized.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Authentication.CryptoHashFinalized"/>
            class.
            </summary>
            
            <remarks>
            This default constructor is included because of mandatory design
            considerations. To actually use this class, you must create an
            instance of it using the parameterized constructor.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHashFinalized.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Authentication.CryptoHashFinalized"/>
            class with the known algorithm name and finalized hash digest.
            </summary>
            
            <param name="algorithmName">
            A string representing the algorithm name.
            </param>
            
            <param name="digest">
            An array of bytes representing the finalized hash digest.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHashFinalized.GetXml">
            <summary>
            Generates the corresponding XML for the finalized state.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHashFinalized.WriteInfoXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML that is used when authenticating with the
            HealthVault Service.
            </summary>
            
            <remarks>
            This method is only called internally and is subject to change.
            </remarks>
            
            <param name="writer">
            The XML writer that will be written to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> is <b>null</b>. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHmacFinalized.#ctor">
            <summary>
            This class must be created with parameters.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHmacFinalized.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Authentication.CryptoHmacFinalized"/> 
            class with a known algorithm identifier and finalized 
            Hash Message Authentication Code (HMAC) digest.
            </summary>
            
            <param name="algorithmName">
            A string representing the algorithm name.
            </param>
            
            <param name="digest">
            An array of bytes representing the HMAC digest.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.CryptoHash">
            <summary>
            Encapsulates a cryptographic hash primitive and provides additional 
            functionality to communicate the hash state via XML.
            </summary>
            
            <remarks>
            CryptoHash is for internal use only and is subject to change.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Authentication.CryptoHash"/> class with 
            default values.
            </summary>
            
            <remarks>
            The default hash algorithm specified by <see cref="T:Microsoft.Health.Authentication.CryptoConfiguration"/> 
            determines which hash primitive to use.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Authentication.CryptoHash"/> class with 
            the specified hash algorithm name.
            </summary>
            
            <remarks>
            The caller must use <see cref="M:Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)"/> to generate XML 
            representing the final digest and <see cref="P:Microsoft.Health.Authentication.CryptoHash.AlgorithmName"/>.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="algorithmName"/> parameter is not supported.
            </exception>
            
            <param name="algorithmName">
            The well-known algorithm name for the hash primitive.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.Reset">
            <summary>
            Resets the state of the <see cref="T:Microsoft.Health.Authentication.CryptoHash"/> instance and the 
            underlying hash primitive.
            </summary>
            
            <remarks>
            If the <see cref="T:Microsoft.Health.Authentication.CryptoHash"/> instance is already finalized, 
            this will reset it so that the instance can be reused. Calling this 
            method resets all data, so you must call <see cref="M:Microsoft.Health.Authentication.CryptoHash.Finalize"/> 
            beforehand to retrieve the finalized hash data.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Applies the current hash algorithm to the specified data, beginning
            at the specified index.
            </summary>
            
            <param name="buffer">
            An array of bytes representing the UTF8 encoded data.
            </param>
            
            <param name="index">
            An integer representing the starting location in the byte array.
            </param>
            
            <param name="count">
            An integer representing the count of bytes.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:Microsoft.Health.Authentication.CryptoHash.IsFinalized"/> is <b>true</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.ComputeHash(System.Byte[])">
            <summary>
            Applies the current hash algorithm to the specified data.
            </summary>
            
            <param name="buffer">
            An array of bytes representing the data to be hashed.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:Microsoft.Health.Authentication.CryptoHash.IsFinalized"/> is <b>true</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.ComputeHash(System.String)">
            <summary>
            Applies the current hash algorithm to the provided string data.
            </summary>
            
            <param name="data">
            The string data to hash. The string data is UTF8 encoded and 
            then hashed.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="data"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.Finalize">
            <summary>
            Constructs the representation of the finalized hash state.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.Authentication.CryptoHashFinalized"/> object representing the 
            finalized state of the hash object is returned.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">
            <see cref="P:Microsoft.Health.Authentication.CryptoHash.IsFinalized"/> is <b>true</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML to use when authenticating with the HealthVault 
            service.
            </summary>
            
            <remarks>
            This method is only called internally and is subject to change.
            </remarks>
            
            <param name="writer">
            The XML writer receiving the data.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.CreateInfoHash(System.String)">
            <summary>
            Generates the info hash section for HealthVault service
            web requests given the specified string data.
            </summary>
            
            <param name="text">
            A string representing the data.
            </param>
            
            <returns>
            A string representing the info hash.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="text"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.CreateInfoHash(System.Byte[])">
            <summary>
            Generates the info hash section for HealthVault service
            web requests given the specified data.
            </summary>
            
            <param name="buffer">
            An array of bytes representing the UTF8 
            encoded data.
            </param>
            
            <returns>
            A string representing the info hash.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHash.CreateInfoHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates the info hash section for HealthVault service
            web requests given the specified data beginning at the specified
            index.
            </summary>
            
            <param name="buffer">
            An array of bytes representing the UTF8 encoded data.
            </param>
            
            <param name="index">
            An integer representing the starting location in the byte array.
            </param>
            
            <param name="count">
            An integer representing the count of bytes.
            </param>
            
            <returns>
            A string representing the info hash.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoHash.AlgorithmName">
            <summary>
            Gets or sets the hash algorithm that instantiates the hash primitive.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            <see cref="P:Microsoft.Health.Authentication.CryptoHash.AlgorithmName"/> is set to <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoHash.HashAlgorithm">
            <summary>
            Gets or sets an instance of the specified hash algorithm.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            <see cref="P:Microsoft.Health.Authentication.CryptoHash.HashAlgorithm"/> is set to <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoHash.IsFinalized">
            <summary>
            Gets or sets a flag indicating whether the hash is already finalized.
            </summary>
            
            <returns>
            <b>true</b> if the hash is already finalized; otherwise, <b>false</b>.
            </returns>
            
            <remarks>
            To reuse the <see cref="T:Microsoft.Health.Authentication.CryptoHash"/> instance, call Reset().
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoHash.DigestAlgorithmName">
            <summary>
            Gets the digest algorithm name.
            </summary>
            
            <remarks>
            Child classes must specify the name of the digest
            algorithm they implement.
            This method is only called internally and is subject to change.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoHash.StartElementName">
            <summary>
            Gets the name of the start element for the serialized info XML.
            </summary>
            
            <returns>
            A string representing the XML element name of the
            section that contains the content written with 
            <see cref="M:Microsoft.Health.Authentication.CryptoHash.WriteInfoXml(System.Xml.XmlWriter)"/>.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.CryptoHmac">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHmac.#ctor">
            <summary>
            Generates a default HMAC algorithm and generate random key material.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHmac.Finalize">
            <summary>
            Constructs the representation of the finalized HMAC state.
            </summary>
            
            <remarks>
            This method is only called internally and is subject to change.
            </remarks>
            
            <returns>
            A <see cref="T:Microsoft.Health.Authentication.CryptoHashFinalized"/> object representing the finalized state
            of the hash object is returned.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoHmac.WriteInfoXml(System.Xml.XmlWriter)">
            <summary>
            Writes the xml that will be used when authenticating with the
            Microsoft Health Service.
            </summary>
            
            <remarks>
            This method is only called internally and is subject to change.
            </remarks>
            
            <param name="writer">
            The XML writer that will be written to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is null. 
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Authentication.CryptoHmac.DigestAlgorithmName">
            <summary>
            Gets the digest algorithm name.
            </summary>
            
            <remarks>
            Child classes must specify the name of the digest
            algorithm they implement.
            This method is only called internally and is subject to change.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.CryptoServiceProviderHmac">
            <summary>
            An HMAC implementation which delegates to the native Capi libarary.
            </summary>
        </member>
        <member name="T:Microsoft.Health.Authentication.CryptoServiceProviderHash">
            <summary>
            A Hash implementation which delegates to the native Capi library.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptAcquireContext(Microsoft.Health.Authentication.SafeCryptoContextHandle@,System.String,System.String,Microsoft.Health.Authentication.ProviderType,Microsoft.Health.Authentication.CryptoAcquireContextFlags)">
            <summary>
            Acquire the crypto context.
            </summary>
            
            <param name="cryptoContext">
            The crypto context.
            </param>
            
            <param name="container">
            The container.
            </param>
            
            <param name="provider">
            The provider.
            </param>
            
            <param name="providerType">
            Type of the provider.
            </param>
            
            <param name="flags">
            The flags.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptReleaseContext(System.IntPtr,System.Int32)">
            <summary>
            Release the crypto context.
            </summary>
            
            <param name="prov">
            The provider handle.
            </param>
            
            <param name="flags">
            The flags to pass to Capi.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptCreateHash(Microsoft.Health.Authentication.SafeCryptoContextHandle,Microsoft.Health.Authentication.AlgorithmId,Microsoft.Health.Authentication.SafeCryptoKeyHandle,System.Int32,Microsoft.Health.Authentication.SafeCryptoHashHandle@)">
            <summary>
            Creates the hash handle.
            </summary>
            
            <param name="cryptoContext">
            The crypto context.
            </param>
            
            <param name="algorithmId">
            The algorithm id.
            </param>
            
            <param name="key">
            The key.
            </param>
            
            <param name="flags">
            The flags.
            </param>
            
            <param name="hash">
            The hash
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptDestroyKey(System.IntPtr)">
            <summary>
            Destroys the crypto key.
            </summary>
            
            <param name="key">
            The key handle.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptHashData(Microsoft.Health.Authentication.SafeCryptoHashHandle,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Hashes the data.
            </summary>
            
            <param name="hash">
            The hash handle.
            </param>
            
            <param name="plainText">
            The plain text.
            </param>
            
            <param name="length">
            The plain text length.
            </param>
            
            <param name="flags">
            The flags.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptGetHashParam(Microsoft.Health.Authentication.SafeCryptoHashHandle,Microsoft.Health.Authentication.HashParameter,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Gets the Hash parameter.
            </summary>
            
            <param name="hash">
            The hash handle.
            </param>
            
            <param name="hashParameter">
            The hash parameter.
            </param>
            
            <param name="hashValue">
            The hash value.
            </param>
            
            <param name="length">
            The length of the value.
            </param>
            
            <param name="flags">
            The flags.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptSetHashParam(Microsoft.Health.Authentication.SafeCryptoHashHandle,Microsoft.Health.Authentication.HashParameter,Microsoft.Health.Authentication.HMAC_INFO@,System.UInt32)">
            <summary>
            Sets the hash param.
            </summary>
            
            <param name="hash">
            The hash handle.
            </param>
            
            <param name="paramter">
            The paramter.
            </param>
            
            <param name="hmacInfo">
            The hmac info.
            </param>
            
            <param name="flags">
            The flags.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.GetHashParameterWrapper(Microsoft.Health.Authentication.SafeCryptoHashHandle,Microsoft.Health.Authentication.HashParameter)">
            <summary>
            Gets the hash parameter.  This method wraps the underlying
            api to obtain the length of the result and appropriately
            size a result byte buffer.
            </summary>
            
            <param name="hashHandle">
            The hash handle.
            </param>
            
            <param name="hashParameter">
            The hash parameter.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptImportKey(Microsoft.Health.Authentication.SafeCryptoContextHandle,System.Byte[],System.UInt32,Microsoft.Health.Authentication.SafeCryptoKeyHandle,Microsoft.Health.Authentication.CryptImportKeyFlags,Microsoft.Health.Authentication.SafeCryptoKeyHandle@)">
            <summary>
            Import a hash key to the hash.
            </summary>
            
            <param name="cryptoContext">
            The crypto context.
            </param>
            
            <param name="key">
            The key data.
            </param>
            
            <param name="keyLength">
            The key data length.
            </param>
            
            <param name="pubKey">
            The pub key.
            </param>
            
            <param name="flags">
            The flags.
            </param>
            
            <param name="keyHandle">
            The key.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.GetKeyBlob(System.Byte[])">
            <summary>
            Gets the key BLOB suitable for calling CryptoImportKey for
            an hmac.
            </summary>
            
            <param name="key">
            The key.
            </param>
            
            <returns>
            The formatted key blob.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptDestroyHash(System.IntPtr)">
            <summary>
            Destroys the underlying crypto hash.
            </summary>
            
            <param name="hash">
            The hash handle.
            </param>
            
            <returns>
            <c>true</c> if successful, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.UnsafeNativeMethods.CryptHashDataWrapper(Microsoft.Health.Authentication.SafeCryptoHashHandle,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Wraps the CryptHashData method to marshal the correct
            byte pointer.
            </summary>
            
            <param name="hash">
            The hash handle.
            </param>
            
            <param name="data">
            The data to hash.
            </param>
            
            <param name="offset">
            The offset into the data.
            </param>
            
            <param name="count">
            The count of bytes to hash.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.CryptoUtil.DisposeHandle``1(``0@)">
            <summary>
            Calls Dispose() given a non-null object and sets it to null.
            Does nothing if the object is null.
            </summary>
            
            <param name="handle">
            Reference to a SafeHande.
            </param>
        </member>
        <member name="T:Microsoft.Health.Authentication.PassportCredential">
            <summary>
            Represents the credential for those using Passport.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.PassportCredential.Create(System.Guid)">
            <summary>
            Creates a new instance of a PassportCredential.
            </summary>
            
            <param name="appId">
            A GUID representing the application identifier.
            </param>
            
            <remarks>
            A new instance of a PassportCredential is created by first
            calling into the Passport APIs and getting a ticket from the 
            Passport service for the person logging on. Once the ticket has
            been verified by the Shell, it passes it to HealthVault to create
            the session token.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.PassportCredential.GetToken">
            <summary>
            Calls the CardSpace service and establishes the client side of the
            authenticated session.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Authentication.PassportCredential.WriteInfoXml(System.Xml.XmlWriter)">
            <summary>
            Represents the XMLWriter that receives credential information.
            </summary>
            
            <param name="writer">
            The XMLWriter.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.Authentication.SafeCryptoContextHandle">
            <summary>
            Safe handle wrapping the Capi Native CryptoContextHandle.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.SafeCryptoContextHandle.ReleaseHandle">
            <summary>
            Executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the event of a catastrophic 
            failure, false. In this case, it generates a ReleaseHandleFailed Managed Debugging 
            Assistant.
            </returns>
        </member>
        <member name="T:Microsoft.Health.Authentication.SafeCryptoHashHandle">
            <summary>
            SafeHandle implementation for crypto hash handles.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.SafeCryptoHashHandle.ReleaseHandle">
            <summary>
            Executes the code required to free the handle.
            </summary>
            
            <returns>
            true if the handle is released successfully; otherwise, in the event 
            of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed 
            Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Microsoft.Health.Authentication.SafeCryptoKeyHandle">
            <summary>
            SafeHandle implemetation for crypto key handles.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.SafeCryptoKeyHandle.ReleaseHandle">
            <summary>
            Executes the code required to free the handle.
            </summary>
            
            <returns>
            true if the handle is released successfully; otherwise, in the event 
            of a catastrophic failure, false. In this case, it generates a ReleaseHandleFailed 
            Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Microsoft.Health.Authentication.Sha256">
            <summary>
            Sha256 Hmac implementation which delegates to Win32 apis.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Health.Authentication.Sha256Hmac"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Core hashing function called by parent.
            </summary>
            
            <param name="array">
            The data to hash.
            </param>
            
            <param name="ibStart">
            The offset into the array.
            </param>
            
            <param name="cbSize">
            The count of bytes to hash.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256.HashFinal">
            <summary>
            Finalizes the hash.
            </summary>
            
            <returns>
            The final hash.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Authentication.Sha256.HashSize">
            <summary>
            Gets the size of the hash.
            </summary>
            <value>The size of the hash.</value>
        </member>
        <member name="T:Microsoft.Health.Authentication.Sha256Hmac">
            <summary>
            Sha256 Hmac implementation which delegates to Win32 apis.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256Hmac.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Health.Authentication.Sha256Hmac"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256Hmac.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Health.Authentication.Sha256Hmac"/> class.
            </summary>
            
            <param name="key">
            The hmac key.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256Hmac.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256Hmac.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Core hashing function called by parent.
            </summary>
            
            <param name="rgb">
            The data to hash.
            </param>
            
            <param name="ib">
            The offset into the array.
            </param>
            
            <param name="cb">
            The count of bytes to hash.
            </param>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256Hmac.HashFinal">
            <summary>
            Finalizes the hash.
            </summary>
            
            <returns>
            The final hash.
            </returns>
        </member>
        <member name="M:Microsoft.Health.Authentication.Sha256Hmac.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Authentication.Sha256Hmac.HashSize">
            <summary>
            Gets the size of the hash.
            </summary>
            
            <value>
            The size of the hash.
            </value>
        </member>
        <member name="P:Microsoft.Health.Authentication.Sha256Hmac.Key">
            <summary>
            Gets or sets the key.
            </summary>
            
            <value>
            The key.
            </value>
        </member>
        <member name="T:Microsoft.Health.Web.Authentication.WebApplicationCredential">
            <summary>
            Enables web applications to authenticate themselves,
            with or without the authentication context of a user.
            </summary>
            
            <remarks>
            Web applications can authenticate in two modes:
            
            First, an application can authenticate itself in the anonymous mode, 
            that is, not in the context of a user. This mode enables application 
            servers to communicate with the HealthVault Service as a trusted operation, 
            but not explicitly on behalf of a user.  
            
            Secondly, an application can authenticate itself in the context of a user.
            This mode enables applications to communicate with the HealthVault
            Service both as a trusted operation and in the user context. The
            application can therefore explicitly perform operations as that user
            or as trusted operations as in the anonymous case.
            
            The credential proves the application's identity by signing the
            authentication request with the application's private key.  The user's
            context is provided by the <cref name="SubCredential"/> property.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/> 
            class with default values.
            </summary>
            
            <remarks>
            This constructor is used only for Activator-based 
            deserialization of the cookie XML. This constructor does not call 
            Initialize() here because it is expected to be initialized from
            a call to <cref name="ReadCookieXml"/>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/> 
            class with the specified application certificate.
            </summary>
            
            <param name="applicationId">
            The unique application identifier.
            </param>
            
            <param name="certificate">
            The application certificate containing the application's private key.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/> 
            class with the default values and in the anonymous context.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="applicationId"/> parameter is empty.
            </exception>
            
            <exception cref="T:System.Security.SecurityException">
            The required application-specific certificate is not found.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/> 
            class using the specified application identifier and sub-credential.
            </summary>
            
            <remarks>
            In order to enable a web application to authenticate with the
            HealthVault Service, the application must first create a 
            <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/>. The credential consists of 
            two explicit parameters, and implicitly utilizes the web 
            application's private key to sign the credential XML. The 
            sub-credential is the token received from the browser, and it 
            represents the approval for a user to run this application for the 
            lifetime of the token.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="applicationId"/> parameter is empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="subCredential"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.Security.SecurityException">
            The required application-specific certificate is not found.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/> 
            class using the specified application identifier and sub-credential.
            </summary>
            
            <remarks>
            In order to enable a web application to authenticate with the
            HealthVault Service, the application must first create a 
            <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/>. The credential consists of 
            two explicit parameters, and implicitly utilizes the web 
            application's private key to sign the credential XML. The 
            sub-credential is the token received from the browser, and it 
            represents the approval for a user to run this application for the 
            lifetime of the token.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="applicationId"/> parameter is empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="subCredential"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.Security.SecurityException">
            The required application-specific certificate is not found.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.#ctor(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/> 
            class using the specified parameters
            </summary>
            
            <remarks>
            In order to enable a web application to authenticate with the
            HealthVault Service, the application must first create a 
            <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/>. The credential consists of 
            three explicit parameters. The store location is where the certificate
            is stored. The subject for the certificate is used to lookup
            the certificate from the store
            </remarks>
            
            <param name="applicationId">
            Application Id.
            </param>
            
            <param name="storeLocation">
            Location of store where the certificate is stored.
            </param>
            
            <param name="certSubject">
            Subject of the certificate for the application.
            </param>
                   
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.Initialize(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Initializes the credential.
            </summary>
            
            <remarks>
            This method is called during construction,is for internal use only, 
            and is subject to change.
            </remarks>
            
            <param name="applicationId">
            The application identifier of the web application.
            </param>
            
            <param name="storeLocation">
            Location of store where the certificate is stored.
            </param>
            
            <param name="certSubject">
            Subject of the certificate for the application.
            </param>
             
            <exception cref="T:System.ArgumentException">
            The <paramref name="applicationId"/> parameter is empty.
            </exception>
            
            <exception cref="T:System.Security.SecurityException">
            The application certificate could not be found in the
            specified certificate store.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.SetupSignatureCertRsaProvider(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Gets the application's private key using the specified
            certificate store.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateIfRequired(Microsoft.Health.HealthServiceConnection,System.Guid)">
            <summary>
            Retrieves a value indicating whether the specified 
            <paramref name="applicationId"/> requires authentication.
            </summary>
            
            <remarks>
            This method verifies that the authentication token is valid
            for a limited timespan into the future, such that the token
            could be used to make a HealthVault Service method call
            within the validated timespan.
            </remarks>
            
            <param name="connection">
            The client-side representation of the HealthVault service.
            </param>
            
            <param name="applicationId">
            The application identifier to verify, if authentication is required.
            </param>
            
            <returns>
            <b>true</b> if calling <cref name="Authenticate"/> is required;
            otherwise, <b>false</b>. 
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.Authenticate(Microsoft.Health.HealthServiceConnection,System.Guid)">
            <summary>
            Authenticates or re-authenticates the credential.
            </summary>
            
            <param name="connection">
            The client-side representation of the HealthVault service.
            </param>
            
            <param name="applicationId">
            The HealthVault application identifier.
            request is made for.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is null.
            </exception>
            
            <seealso cref="T:Microsoft.Health.HealthServiceConnection"/>
            
            <returns>
            The credential to use for the request.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.ExpireAuthenticationResult(System.Guid)">
            <summary>
            Expire an authentication keyset pair so that 
            <cref name="AuthenticationRequired"/> will return true.
            </summary>
            
            <param name="applicationId">
            The application identifier of the web application.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.GetHeaderSection(System.Guid,System.Xml.XmlWriter)">
            <summary>
            Derived classes can insert header section XML as appropriate.
            </summary>
            
            <param name="applicationId">
            The application id context to write the header section for.
            </param>
            
            <param name="writer">
            The XML writer that is constructing the header section.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.GetHeaderSection(System.Guid)">
            <summary>
            Derived classes can return header section query string parameter 
            as appropriate.
            </summary>
            
            <return>
            The header section query string parameter.
            </return>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.UpdateAuthenticationResults(System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult})">
            <summary>
            Inserts a dictionary of authentication results.
            </summary>
            
            <remarks>
            This may be called from two primary code paths:
            
            1) WebApplicationCredential.AuthenticateKeySetPair
                pair is already locked by calling thread.
            2) and CreateAuthenticatedSessionToken
                a) the credential could be totally unintialized, including the
                    static credentials, so there will not be a lock on the pair.
                    But it doesn't matter since there are no contending threads
                    to grab the pair during this call.  The lock call is a slight
                    overhead in this very rare case.
                b) the credential already has an existing token, including
                    the static credentials.  This call will update the credentials
                    so it's possible the pair is being used by another thread.
            
            This method only update results for the applicatation id for the web 
            app.
            </remarks>
            
            <param name="newResults">
            An instance of <see cref="T:System.Collections.Generic.Dictionary`2"/> 
            representing the authentication results.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.ParseExtendedElements(System.Xml.XPath.XPathNavigator)">
            <summary>
            Parses any method specific elements in the response.
            </summary>
            
            <param name="nav">
            The response XML path navigator.
            </param>
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateWebApplicationData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Provides a mechanism for derived classes to override how this class 
            authenticates data.
            </summary>
            
            <remarks>
            This method is for internal use only and is subject to change.
            </remarks>
            
            <param name="data">
            The data to be authenticated by the credential.
            </param>
            
            <param name="index">
            The starting index into the data.
            </param>
            
            <param name="count">
            The number of bytes from the start index to authenticate.
            </param>
            
            <returns>
            A string representing the data that was authenticated by the credential.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Applies the shared secret to the specified data.
            </summary>
            
            <remarks>
            After the initial authentication is made with the HealthVault Service,
            all subsequent calls to the HealthVault service must have
            authenticated header sections. This method produces the 
            Hash Message Authentication Code (HMAC) data for the auth section.
            
            This method implements its own shared secret,
            so the SharedSecret property is <b>null</b>.
            </remarks>
            
            <param name="data">
            The data to authenticate.
            </param>
            
            <param name="index">
            The starting index into the data.
            </param>
            
            <param name="count">
            The number of bytes from the start index to authenticate.
            </param>
            
            <returns>
            The authenticated data is returned.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="data"/> parameter is <b>null</b> or empty. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.SignRequestXml(System.String)">
            <summary>
            Compute and apply the signature to the request XML.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.GetContentSection">
            <summary>
            Generate the to-be signed content for the credential.
            </summary>
            
            <returns>
            Raw XML representing the ContentSection of the info secttion.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteInfoXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML that is used when authenticating with the
            HealthVault Service.
            </summary>
            
            <remarks>
            This method is only called internally and is subject to change.
            </remarks>
            
            <param name="writer">
            The XML writer that is written to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.WriteCookieXml(System.Xml.XmlWriter)">
            <summary>
            Write the browser cookie xml for this credential.
            </summary>
            
            <remarks>
            Since this generates cookie xml, it does not reveal any secrets.
            Rather, we use secret id's so that we may look up the secret later.
            </remarks>
            
            <param name="writer">
            The writer building the cookie XML.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.ReadCookieXml(System.Xml.XmlReader)">
            <summary>
            Reconstruct the credential using cookie xml.
            </summary>
            
            <remarks>
            After enough configuration information is read from the cookie XML,
            the class instance is initialized via <cref name="Initialize"/>.
            </remarks>
            
            <param name="reader">
            XML reader of the cookie XML.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.ExpireKeySetPair(System.Guid,System.Int64)">
            <summary>
            Release lock of the pair so that the keyset pair after the request
            is complete.
            </summary>
            
            <param name="applicationId">
            The application the request is for.
            </param>
            
            <param name="refreshCounter">
            The time stamp of the calling credential.  If this does not 
            match the keyset pair's timestamp, then we do not update the
            expired status.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.IsAuthenticationExpired(System.Guid,System.Int64)">
            <summary>
            Gets if a keyset is active or not.
            </summary>
            
            <remarks>
            This method verifies that the authentication token is valid
            for a limited timespan into the future, such that the token
            could be used to make a Microsoft Health Service method call
            within the validated timespan.
            </remarks>
            
            <param name="applicationId">
            The application id to verify if authentication is required.
            </param>
            
            <param name="refreshCounter">
            The calling credential's refresh counter.
            </param>
            
            <returns>
            True if <cref name="AuthenticateKeySetPair"/> needs to be called.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.GetAuthTokenPair(System.Guid,System.Int64@,Microsoft.Health.Web.Authentication.AuthenticatedSessionKeySet@,System.Collections.Generic.Dictionary{System.Guid,Microsoft.Health.Authentication.CreateAuthenticationTokenResult}@)">
            <summary>
            Gets the cached authentication keyset pair for the application id.
            </summary>
            
            <param name="applicationId"></param>
            <param name="refreshCounter"></param>
            <param name="keySet"></param>
            <param name="results"></param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateKeySetPair(Microsoft.Health.HealthServiceConnection,System.Guid,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Authenticate the keyset pair for the specified
            <paramref name="applicationId"/> by calling to the Microsoft Health
            Service to create a new authentication token.
            </summary>
            
            <remarks>
            In order to avoid unnecessary authentication actions, it is 
            expected that the caller will first call 
            <cref name="IsAuthenticationExpired"/> before calling this.
            </remarks>
            
            <param name="connection">
            The connection used to perform the authentication.
            </param>
            
            <param name="applicationId">
            The application id of the keyset pair that will be authenticated.
            </param>
            
            <param name="certificate">
            The application's certificate containing the application's private key.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.Authentication.WebApplicationCredential.AuthenticateKeySetPair(Microsoft.Health.Web.Authentication.AuthSessionKeySetPairs,Microsoft.Health.HealthServiceConnection,System.Guid,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Authenticate the keyset pair for the specified
            <paramref name="applicationId"/> by calling to the Microsoft Health
            Service to create a new authentication token.
            </summary>
            
            <remarks>
            In order to avoid unnecessary authentication actions, it is 
            expected that the caller will first call 
            <cref name="IsAuthenticationExpired"/> before calling this.
            </remarks>
            
            <param name="keySetPairs">
            The keyset pairs collection that will contain the newly 
            authenticated keyset pair.
            </param>
            
            <param name="connection">
            The connection used to perform the authentication.
            </param>
            
            <param name="applicationId">
            The application id of the keyset pair that will be authenticated.
            </param>
            
            <param name="certificate">
            The application's certificate containing the application's private key.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.Web.Authentication.WebApplicationCredential.Thumbprint">
            <summary> 
            Gets the thumbprint of the signing cert.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.Web.Authentication.WebApplicationCredential.ApplicationId">
            <summary>
            Gets or sets the application identifier of the credential.
            </summary>
            
            <returns>
            A GUID representing the application identifier.
            </returns>
            
            <remarks>
            This property is set only internally.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Web.Authentication.WebApplicationCredential.RsaProvider">
            <summary>
            Gets or sets the cached provider for signing binary large objects 
            (blobs).
            </summary>
            
            <returns>
            An instance of <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/> representing 
            the cached provider.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Web.Authentication.WebApplicationCredential.SubCredential">
            <summary>
            Gets or sets the sub-credential.
            </summary>
            
            <remarks>
            This is the credential token retrieved from the HealthVault 
            platform.  By specifying a sub-credential, the web application
            credential can operate in the context of an authenticated user.
            </remarks>
            
            <returns>
            A string representing the sub-credential token.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.Web.Authentication.WebApplicationCredential.IsAuthenticationRetryDisabled">
            <summary>
            Gets if the credential currently is enabled to support retries.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.Blob">
            <summary>
            Represents binary data that can be associated with a person's health record.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Blob.#ctor(System.String,System.String,System.String,System.String,Microsoft.Health.HealthRecordAccessor)">
            <summary>
            Constructs an instance of the Blob class with the specified values.
            </summary>
            
            <param name="name">
            The name of the BLOB. It can be <see cref="F:System.String.Empty"/> but cannot be <b>null</b>.
            </param>
            
            <param name="contentType">
            The content type of the BLOB.
            </param>
            
            <param name="currentContentEncoding">
            The current content encoding of the BLOB or <b>null</b> if the BLOB is not encoded.
            </param>
            
            <param name="legacyContentEncoding">
            The previous content encoding of the BLOB (if any).
            </param>
            
            <param name="record">
            The health record to write the BLOB data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> or <paramref name="contentType"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.#ctor(System.String,System.String,System.String,System.String,Microsoft.Health.BlobHashInfo,Microsoft.Health.HealthRecordAccessor)">
            <summary>
            Constructs an instance of the Blob class with the specified values.
            </summary>
            
            <param name="name">
            The name of the BLOB. It can be <see cref="F:System.String.Empty"/> but cannot be <b>null</b>.
            </param>
            
            <param name="contentType">
            The content type of the BLOB.
            </param>
            
            <param name="currentContentEncoding">
            The current content encoding of the BLOB or <b>null</b> if the BLOB is not encoded.
            </param>
            
            <param name="legacyContentEncoding">
            The previous content encoding of the BLOB (if any).
            </param>
            
            <param name="hashInfo">
            The hash information for the BLOB.
            </param>
            
            <param name="record">
            The health record to write the BLOB data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> or <paramref name="contentType"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.#ctor(System.String,System.String,System.String,System.String,Microsoft.Health.BlobHashInfo,Microsoft.Health.Package.ConnectPackageCreationParameters)">
            <summary>
            Constructs an instance of the Blob class with the specified values.
            </summary>
            
            <param name="name">
            The name of the BLOB. It can be <see cref="F:System.String.Empty"/> but cannot be <b>null</b>.
            </param>
            
            <param name="contentType">
            The content type of the BLOB.
            </param>
            
            <param name="currentContentEncoding">
            The current content encoding of the BLOB or <b>null</b> if the BLOB is not encoded.
            </param>
            
            <param name="legacyContentEncoding">
            The previous content encoding of the BLOB (if any).
            </param>
            
            <param name="hashInfo">
            The hash information for the BLOB.
            </param>
            
            <param name="connectPackageParameters">
            The creation parameters for the <see cref="T:Microsoft.Health.Package.ConnectPackage"/> that will host the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/> that contains this blob.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> or <paramref name="contentType"/> 
            or <paramref name="connectPackageParameters"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.GetWriterStream">
            <summary>
            Gets a stream for writing data to a HealthVault BLOB.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.BlobStream"/> instance to write data to.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            If the Blob already has data that was retrieved from HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.WriteInline(System.String)">
            <summary>
            Writes the specified string to the blob with UTF-8 encoding.
            </summary>
            
            <param name="data">
            The data to write to the blob.
            </param>
            
            <remarks>
            The BLOB data is written into the XML request during the 
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> or <see cref="M:Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)"/>
            rather than being streamed to HealthVault. This is limited to about 3.5MB of data.
            Use <see cref="M:Microsoft.Health.Blob.GetWriterStream"/> to write more data.
            </remarks>
            
            <exception name="ArgumentNullException">
            If <paramref name="data"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.WriteInline(System.String,System.Text.Encoding)">
             <summary>
             Writes the specified string to the blob with the specified encoding.
             </summary>
             
             <param name="data">
             The data to write to the blob.
             </param>
             
             <param name="encoding">
             The encoding to use when writing the data.
             </param>
             
             <remarks>
             The BLOB data is written into the XML request during the 
             <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> or <see cref="M:Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)"/>
             rather than being streamed to HealthVault. This is limited to about 3.5MB of data.
             Use <see cref="M:Microsoft.Health.Blob.GetWriterStream"/> to write more data.
             </remarks>
             
             <exception name="ArgumentNullException">
             If <paramref name="data"/> is <b>null</b>
             <br/>-or-<br/>
             <paramref name="encoding"/> is <b>null</b>.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.WriteInline(System.Byte[])">
            <summary>
            Writes the specified bytes to the blob inline with the data XML of the type.
            </summary>
            
            <param name="bytes">
            The bytes to write to the blob.
            </param>
            
            <remarks>
            The BLOB data is written into the XML request during the 
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> or <see cref="M:Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)"/>
            rather than being streamed to HealthVault. This is limited to about 3.5MB of data.
            Use <see cref="M:Microsoft.Health.Blob.GetWriterStream"/> to write more data.
            </remarks>
            
            <exception name="ArgumentNullException">
            If <paramref name="bytes"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.Write(System.IO.Stream)">
            <summary>
            Writes the bytes from the specified stream.
            </summary>
            
            <param name="stream">
            The stream to get the bytes from to write to the blob.
            </param>
            
            <exception name="ArgumentNullException">
            If <paramref name="stream"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.Net.WebException">
            If there is an error writing the data to HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.GetReaderStream">
            <summary>
            Gets a stream for reading data from a HealthVault BLOB.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.BlobStream"/> instance to read data from.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            If there is no data to read from the BLOB.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.SaveToFile(System.String)">
            <summary>
            Saves the BLOB data to the specified file.
            </summary>
            
            <param name="filename">
            The path to the file to save the data to.
            </param>
            
            <remarks>
            This method will not overwrite an existing file.
            Exceptions that can occur by calling <see cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)"/> may also be 
            thrown by this method.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="filename"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            If the Blob doesn't have data that was retrieved from HealthVault.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is a failure reading the data from HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.SaveToFile(System.String,System.IO.FileMode)">
             <summary>
             Saves the BLOB data to the specified file.
             </summary>
             
             <param name="filename">
             The path to the file to save the data to.
             </param>
             
             <param name="mode">
             A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist,
             and determines whether the contents of existing files are retained or overwritten.
             </param>
             
             <remarks>
             Exceptions that can occur by calling <see cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)"/> may also be 
             thrown by this method.
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             <paramref name="filename"/> is <b>null</b> or empty.
             </exception>
             
             <exception cref="T:System.NotSupportedException">
             If the Blob doesn't have data that was retrieved from HealthVault.
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             If there is a failure reading the data from HealthVault.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the BLOB data to the specified file.
            </summary>
            
            <param name="stream">
            The stream to save the data to.
            </param>
            
            <remarks>
            The stream will not be closed by this method.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            If the Blob doesn't have data that was retrieved from HealthVault.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is a failure reading the data from HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.ReadAsString">
            <summary>
            Fetches the BLOB as a UTF-8 string.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            If the Blob doesn't have data that was retrieved from HealthVault.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is a failure reading the data from HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.ReadAsString(System.Text.Encoding)">
            <summary>
            Fetches the BLOB as a string with the specified encoding.
            </summary>
            
            <param name="encoding">
            The encoding used to convert the BLOB to a string.
            </param>
            
            <returns>
            A string representation of the BLOB.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            If the Blob doesn't have data that was retrieved from HealthVault.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is a failure reading the data from HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Blob.ReadAllBytes">
            <summary>
            Gets all the bytes of the BLOB.
            </summary>
            
            <returns>
            All the bytes of the BLOB.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            If the Blob doesn't have data that was retrieved from HealthVault.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is a failure reading the data from HealthVault.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Blob.Name">
            <summary>
            Gets the name of the BLOB.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Blob.ContentType">
            <summary>
            Gets the content type of the BLOB.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Blob.HashInfo">
            <summary>
            Gets the hash information for the BLOB.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Blob.ContentEncoding">
            <summary>
            Gets the content encoding of the BLOB.
            </summary>
            
            <remarks>
            This is only available for BLOBs that were added to HealthVault prior to streaming
            support being added.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Blob.ContentLength">
            <summary>
            Gets the length of the content of the BLOB.
            </summary>
            
            <remarks>
            In some cases the content length can't be determined by 
            HealthVault until the data is retrieved. In this case, the property
            will be null. For instance, when the Blob represents data that was 
            streamed to HealthVault for a <see cref="T:Microsoft.Health.Package.ConnectPackage"/> 
            the data is encrypted so the true size of the Blob is not known.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Blob.Url">
            <summary>
            Gets a URL that can be used to get the Blob data directly using HTTP GET.
            </summary>
            
            <returns>
            A URL for direct access to the Blob data.
            </returns>
            
            <remarks>
            The token used on the URL is short-lived so the URL is only valid for a short period
            of time.<br/>
            An application storing this URL, whether in a cookie or by other means, should encrypt
            it to avoid tampering.
            </remarks>
            
            <exception cref="T:System.NotSupportedException">
            If the Blob was retieved inline or the Blob was created for writing.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Blob.IsDirty">
            <summary>
            Gets or sets if the Blob instance has been modified.
            </summary>
            
            <remarks>
            Normally this property is maintained by the members of the class, however,
            if <see cref="M:Microsoft.Health.HealthRecordItem.GetItemXml"/> is used to serialize an item
            that contains this Blob before the item is committed to HealthVault, you will
            need to mark the Blob as dirty before trying to commit the item to HealthVault.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.BlobEncoder">
            <summary>
            Used to encode BLOBs in various encoding schemes.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.BlobFormat">
            <summary>
            Determines how BLOB information will be returned when fetching a 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.BlobFormat.Unknown">
            <summary>
            The requested BLOB format is unknown.
            </summary>
        </member>
        <member name="F:Microsoft.Health.BlobFormat.Information">
            <summary>
            Only BLOB information is returned.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.BlobFormat.Inline">
            <summary>
            The BLOB informat and data is returned inline with the response XML.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.BlobFormat.Streamed">
            <summary>
            Information about the BLOB sufficient to be able to retrieve the BLOB through the
            streaming interfaces.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.BlobFormat.Default">
            <summary>
            The default format is Streamed.
            </summary>
        </member>
        <member name="T:Microsoft.Health.BlobHashAlgorithm">
            <summary>
            Defines the set of supported blob hash algorithms.
            </summary>    
        </member>
        <member name="F:Microsoft.Health.BlobHashAlgorithm.Unknown">
            <summary>
            Represents an unknown blob hash algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Health.BlobHashAlgorithm.SHA256Block">
            <summary>
            The block hash algorithm using SHA256.
            </summary>
        </member>
        <member name="T:Microsoft.Health.BlobHasher">
            <summary>
            Used to calculate BLOB hashes.
            </summary>    
        </member>
        <member name="M:Microsoft.Health.BlobHasher.#ctor(Microsoft.Health.BlobHashAlgorithm,System.Int32)">
            <summary>
            Constructs the BlobHasher for calculating BLOB hashes.
            </summary>
            <param name="algorithm"></param>
            <param name="blockSize"></param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="algorithm"/> is not a supported blob hash algorithm.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="blockSize"/> is not a positive value. 
            </exception>
            
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
            If the hash algorithm's hash size has a partial byte length.
            </exception>
                    
        </member>
        <member name="M:Microsoft.Health.BlobHasher.CalculateBlockHashes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the series of block hashes from the data.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns>The block hashes.</returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="data"/> is null.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the
            <paramref name="data"/> length.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="offset"/> or <paramref name="count"/> is negative 
            </exception>
                    
        </member>
        <member name="M:Microsoft.Health.BlobHasher.CalculateBlobHash(System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Calculates the BLOB hash from a series of block hashes.
            </summary>
            <param name="blockHashes"></param>
            <returns>The BLOB hash.</returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="blockHashes"/> is null.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="blockHashes"/> is empty.
            </exception>
        </member>
        <member name="M:Microsoft.Health.BlobHasher.CalculateBlobHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Used for calculating the blob hash for inline blobs.
            </summary>        
        </member>
        <member name="T:Microsoft.Health.BlobHashInfo">
            <summary>
            Represents hash information about a <see cref="T:Microsoft.Health.Blob"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Health.BlobHashInfo.#ctor">
            <summary>        
            Creates an instance of the <see cref="T:Microsoft.Health.BlobHashInfo"/> class 
            with default values.
            </summary>        
        </member>
        <member name="P:Microsoft.Health.BlobHashInfo.BlobHashAlgorithm">
            <summary>
            The algorithm used to calculate the BLOB hash.
            </summary>
        </member>
        <member name="P:Microsoft.Health.BlobHashInfo.BlockSizeBytes">
            <summary>
            The block size in bytes used by the <see cref="P:Microsoft.Health.BlobHashInfo.BlobHashAlgorithm"/> to 
            calculate the BLOB hash.
            </summary>
        </member>
        <member name="P:Microsoft.Health.BlobHashInfo.Hash">
            <summary>
            Represents the BLOB hash as calculated by the <see cref="P:Microsoft.Health.BlobHashInfo.BlobHashAlgorithm"/> 
            and <see cref="P:Microsoft.Health.BlobHashInfo.BlockSizeBytes"/>
            </summary>
        </member>
        <member name="T:Microsoft.Health.BlobPutParameters">
            <summary>
            Blob parameters returned by BeginPutBlob
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.BlobPutParameters.#ctor(System.Uri,System.Int32,System.Int64,Microsoft.Health.BlobHashAlgorithm,System.Int32)">
            <summary>
            Constructs a BlobPutParameters instance with the specified parameters.
            </summary>
            
            <param name="blobReferenceUrl">
            The BLOB reference URL.
            </param>
            
            <param name="chunkSize">
            The chunk size, in bytes, of the portion of a BLOB that should be sent to HealthVault
            in each request.
            </param>
            
            <param name="maxBlobSize">
            The maximum overall size of a BLOB in bytes.
            </param>
            
            <param name="blobHashAlgorithm">
            The hash algorithm to use for calculating the hash of this BLOB.
            </param>
            
            <param name="blockSize">
            The block size, in bytes, used by the BLOB hash algorithm.
            </param>
        </member>
        <member name="M:Microsoft.Health.BlobPutParameters.#ctor(System.Uri,System.Int32,System.Int32,System.Int64,Microsoft.Health.BlobHashAlgorithm,System.Int32)">
            <summary>
            Constructs a BlobPutParameters instance with the specified parameters.
            </summary>
            
            <param name="blobReferenceUrl">
            The BLOB reference URL.
            </param>
            
            <param name="chunkSize">
            The chunk size, in bytes, of the portion of a BLOB that should be sent to HealthVault
            in each request.
            </param>
            
            <param name="postEncryptionChunkSize">
            The chunk size, in bytes, of the portion of a BLOB that should be sent to HealthVault
            in each request, after the connect package encryption has been applied to the portion.
            </param>
            
            <param name="maxBlobSize">
            The maximum overall size of a BLOB in bytes.
            </param>
            
            <param name="blobHashAlgorithm">
            The hash algorithm to use for calculating the hash of this BLOB.
            </param>
            
            <param name="blockSize">
            The block size, in bytes, used by the BLOB hash algorithm.
            </param>
        </member>
        <member name="P:Microsoft.Health.BlobPutParameters.Url">
            <summary>
            Gets the BLOB reference url.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobPutParameters.ChunkSize">
            <summary>
            Gets the put chunk size.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobPutParameters.PostEncryptionChunkSize">
            <summary>
            Gets the put chunk size for the bytes after the connect package encryption has been 
            applied.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobPutParameters.MaxBlobSize">
            <summary>
            Gets the maximum size of the BLOB.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobPutParameters.BlobHashAlgorithm">
            <summary>
            Gets the BLOB hash algorithm used to hash the BLOB.
            </summary>
        </member>
        <member name="P:Microsoft.Health.BlobPutParameters.HashBlockSize">
            <summary>
            Gets the block size to use for the BLOB hash algorithm.
            </summary>
        </member>
        <member name="T:Microsoft.Health.BlobSignatureItem">
            <summary>
            Represents information about a BLOB that is part of a digital signature.
            </summary>
            <remarks>
            For more details please see <see cref="T:Microsoft.Health.HealthRecordItemSignature"/>.
            </remarks>    
            
        </member>
        <member name="M:Microsoft.Health.BlobSignatureItem.#ctor(System.String,System.String,Microsoft.Health.BlobHashInfo)">
            <summary>
            Constructs a BlobSignatureItem object with the specified parameters.
            </summary>
            <param name="name"></param>
            <param name="contentType"></param>
            <param name="hashInfo"></param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> or <paramref name="contentType"/> are <b>null</b>.
            </exception>
        </member>
        <member name="P:Microsoft.Health.BlobSignatureItem.Name">
            <summary>
            Gets the name of the BLOB.
            </summary>
        </member>
        <member name="P:Microsoft.Health.BlobSignatureItem.ContentType">
            <summary>
            Gets the content type of the BLOB. 
            </summary>
        </member>
        <member name="P:Microsoft.Health.BlobSignatureItem.HashInfo">
            <summary>
            Get the hash information for the BLOB.
            </summary>
        </member>
        <member name="T:Microsoft.Health.BlobStore">
            <summary>
            A collection of the BLOBs associated with a health record item.
            </summary>
            
            <remarks>
            The <see cref="T:Microsoft.Health.BlobStore"/> is a dictionary that is read-only but allows removal of 
            <see cref="T:Microsoft.Health.Blob"/> instances. 
            To add <see cref="T:Microsoft.Health.Blob"/> instances to the dictionary use the 
            <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)"/> method.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.Add(Microsoft.Health.Blob)">
            <summary>
            Not supported.
            </summary>
            
            <remarks>
            Use the <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)"/> method instead.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.Add(System.String,Microsoft.Health.Blob)">
            <summary>
            Not supported.
            </summary>
            
            <remarks>
            Use the <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)"/> method instead.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.Clear">
            <summary>
            Clears all Blob instances from the BlobStore.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.Contains(Microsoft.Health.Blob)">
            <summary>
            Determines whether the BlobStore contains the specified Blob instance.
            </summary>
            
            <param name="blob">
            The Blob instance to locate in the BlobStore.
            </param>
            
            <returns>
            True if the Blob instance is in the store or false otherwise.
            </returns>
            
            <remarks>
            This implementation is a reference comparison and does not equate Blob instances
            with the same name.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.ContainsKey(System.String)">
            <summary>
            Determines whether the BlobStore contains a Blob with the specified key.
            </summary>
            
            <param name="key">
            The key to locate in the BlobStore.
            </param>
            
            <returns>
            True if the BlobStore contains a Blob with the key; otherwise, false.
            </returns>
            
            <remarks>
            This is a case-sensitive comparison.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@Microsoft#Health#Blob}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Microsoft#Health#Blob}}#Remove(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})">
            <summary>
            Removes the first occurrence of a specific Blob from the BlobStore.
            </summary>
            
            <param name="item">
            The Blob instance to remove.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Microsoft#Health#Blob}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob}[],System.Int32)">
            <summary>
            Copies the elements of the BlobStore to an <see cref="T:System.Array"/>, starting at a 
            particular <see cref="T:System.Array"/> index.
            </summary>
            
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the Blobs copied from
            the BlobStore. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Microsoft#Health#Blob}}#Contains(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})">
            <summary>
            Determines whether the BlobStore contains the specified item.
            </summary>
            
            <param name="item">
            The Blob to locate in the BlobStore.
            </param>
            
            <returns>
            True if <paramref name="item"/> is found in the BlobStore; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Microsoft#Health#Blob}}#Add(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Health.Blob})">
            <summary>
            Not supported.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Health.BlobStore.TryGetValue(System.String,Microsoft.Health.Blob@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            
            <param name="key">
            The key whose value to get.
            </param>
            
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed
            uninitialized.
            </param>
            
            <returns>
            True if a Blob with the specified name exists in the BlobStore; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.Remove(System.String)">
            <summary>
            Removes the Blob with the specified name from the BlobStore.
            </summary>
            
            <param name="key">
            The name of the Blob to remove.
            </param>
            
            <returns>
            True if the Blob is successfully removed; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.WriteInline(System.String,System.String,System.Byte[])">
            <summary>
            Writes the specified bytes to the blob.
            </summary>
            
            <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty"/> but cannot be <b>null</b>.
            </param>
            
            <param name="contentType">
            The content type of the BLOB.
            </param>
            
            <param name="bytes">
            The bytes to write to the blob.
            </param>
            
            <remarks>
            This is limited to about 3.5MB of data. Use <see cref="M:Microsoft.Health.Blob.GetWriterStream"/> to write
            more data.
            </remarks>
            
            <exception name="ArgumentNullException">
            If <paramref name="bytes"/> or <paramref name="blobName"/>is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="contentType"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.Write(System.String,System.String,System.IO.Stream)">
            <summary>
            Writes the bytes from the specified stream.
            </summary>
            
            <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty"/> but cannot be <b>null</b>.
            </param>
            
            <param name="contentType">
            The content type of the BLOB.
            </param>
            
            <param name="stream">
            The stream to get the bytes from to write to the blob.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="contentType"/> is <b>null</b> or empty.
            </exception>
            
            <exception name="ArgumentNullException">
            If <paramref name="stream"/>,<paramref name="blobName"/>, or <paramref name="record"/> 
            is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is an error writing the data to HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)">
            <summary>
            Creates a BLOB in the store with the specified name, content type, and encoding.
            </summary>
            
            <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty"/> but cannot be <b>null</b>.
            </param>
            
            <param name="contentType">
            The content type of the BLOB.
            </param>
            
            <returns>
            The <see cref="T:Microsoft.Health.Blob"/> instance that was created in the store.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="blobName"/> or <paramref name="contentType"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If a Blob with the same name already exists in the store. To update an existing Blob,
            remove the existing Blob and create a new one.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String,Microsoft.Health.BlobHashInfo,System.Uri)">
            <summary>
            Recreates a BLOB in the store to allow for restarting multiple BLOB uploads on a
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <param name="blobName">
            The name of the BLOB. It can be <see cref="F:System.String.Empty"/> but cannot be <b>null</b>.
            </param>
            
            <param name="contentType">
            The content type of the BLOB.
            </param>
            
            <param name="hashInfo">
            The hash information for the BLOB.
            </param>
            
            <param name="blobUrl">
            The HealthVault URL of the BLOB.
            </param>
            
            <returns>
            The <see cref="T:Microsoft.Health.Blob"/> instance that was recreated in the store.
            </returns>
            
            <remarks>
            This overload is intended to allow the caller to recover from issues that may arise 
            while uploading large BLOBs or many BLOBs for a <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            If you have a large amount of data to upload, you can periodically save the state of
            the Blob instance (and BlobStream if necessary) and then use this method to recreate
            that same Blob instance in the store.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="blobName"/> or <paramref name="contentType"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If a Blob with the same name already exists in the store. To update an existing Blob,
            remove the existing Blob and create a new one.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.BlobStore.Count">
            <summary>
            Gets the count of BLOBs associated with the health record item.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobStore.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@Microsoft#Health#Blob}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the BlobStore is read-only.
            </summary>
            
            <remarks>
            The BlobStore cannot be added to through the Add methods. Instead the
            <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)"/> method must be used. However, the <see cref="M:Microsoft.Health.BlobStore.Clear"/> and 
            <see cref="M:Microsoft.Health.BlobStore.Remove(System.String)"/> methods are available.
            </remarks>
        </member>
        <member name="P:Microsoft.Health.BlobStore.Values">
            <summary>
            Gets an ICollection&lt;Blob&gt; containing the values in the BlobStore.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobStore.Keys">
            <summary>
            Gets an ICollection&lt;string&gt; containing the Blob names in the BlobStore.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobStore.Item(System.String)">
            <summary>
            Gets the BLOB with the specified name.
            </summary>
            
            <param name="name">
            The name of the BLOB to retrieve for the item. A null key indicates the "default" BLOB.
            </param>
            
            <returns>
            The BLOB with the specified name or <b>null</b> if no BLOB with the specified name 
            exists.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.BlobStream">
            <summary>
            A stream for sending and receiving binary data associated with a health record item.
            </summary>
            
            <remarks>
            The stream can be written only for BLOBs created using 
            <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)"/>. 
            If the blob has data retrieved from HealthVault
            it will not be writable. Instead, use <see cref="M:Microsoft.Health.BlobStore.NewBlob(System.String,System.String)"/> 
            with the same name as the BLOB you wish to replace and then get the <see cref="T:Microsoft.Health.BlobStream"/> 
            from that <see cref="T:Microsoft.Health.Blob"/> instance and write to it.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Not supported.
            </summary>
            
            <exception cref="T:System.NotSupportedException"/>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Not supported.
            </summary>
            
            <exception cref="T:System.NotSupportedException"/>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Close">
            <summary>
            Closes the current stream and releases any resources associated with the current stream.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Finalize">
            <summary>
            Releases all resources held by the <see cref="T:Microsoft.Health.BlobStream"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the stream object and optionally releases the managed
            resources.
            </summary>
            
            <param name="disposing">
            true to release both managed and unmanaged resoures; false to release only unmanaged
            resoureces.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Dispose">
            <summary>
            Releases all resources used by the stream.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.EndRead(System.IAsyncResult)">
            <summary>
            Not supported.
            </summary>
            
            <exception cref="T:System.NotSupportedException"/>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.EndWrite(System.IAsyncResult)">
            <summary>
            Not supported.
            </summary>
            
            <exception cref="T:System.NotSupportedException"/>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to 
            HealthVault.
            </summary>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If a failure occurs calling HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the
            stream by the number of bytes read.
            </summary>
            
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified byte 
            array with the values between offset and (offset + count - 1) replaced by the bytes 
            read from the current source. 
            </param>
            
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data read from 
            the current stream.
            </param>
            
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of 
            bytes requested if that many bytes are not currently available, or zero (0) if the 
            end of the stream has been reached. 
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            If the stream does not support reading.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the
            <paramref name="buffer"/> length.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there was a failure reading the data from HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, 
            or returns -1 if at the end of the stream. 
            </summary>
            
            <returns>
            The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at the end of the stream.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            If the stream does not support reading.
            </exception>
            
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there was a failure reading the data from HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            
            <param name="offset">
            A byte offset releative to the <paramref name="origin"/> parameter.
            </param>
            
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain
            the new position.
            </param>
            
            <returns>
            The new position within the current stream.
            </returns>
            
            <exception cref="T:System.IO.IOException">
            If <paramref name="offset"/> causes the position to be set before the beginning or
            after the end of the stream.
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            <see cref="P:Microsoft.Health.BlobStream.CanSeek"/> is false or <see cref="P:Microsoft.Health.BlobStream.Length"/> is unknown and 
            <paramref name="origin"/> is <see cref="F:System.IO.SeekOrigin.End"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.SetLength(System.Int64)">
             <summary>
             Not supported.
             </summary>
             
             <exception cref="T:System.NotSupportedException"/>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position 
            within this stream by the number of bytes written. 
            </summary>
            
            <param name="buffer">
            An array of bytes. This method copies count bytes from buffer to the current stream.
            </param>
            
            <param name="offset">
            The zero-based byte offset in buffer at which to begin copying bytes to the current 
            stream.
            </param>
            
            <param name="count">
            The number of bytes to be written to the current stream.
            </param>
            
            <remarks>
            If the request bytes to write don't make a full chunk, they will be buffered and
            written when a full chunk size is written or <see cref="M:Microsoft.Health.BlobStream.Flush"/> or <see cref="M:Microsoft.Health.BlobStream.Close"/>
            is called.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="buffer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the
            <paramref name="buffer"/> length.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            If the stream does not support writing.
            </exception>
            
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there was a failure writing the data to HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within 
            the stream by one byte. 
            </summary>
            
            <param name="value">
            The byte to write to the stream.
            </param>
            
            <remarks>
            The bytes are buffered until the BLOB chunk size is obtained or <see cref="M:Microsoft.Health.BlobStream.Flush"/> or
            <see cref="M:Microsoft.Health.BlobStream.Close"/> is called.
            </remarks>
            
            <exception cref="T:System.NotSupportedException">
            If the stream does not support reading.
            </exception>
            
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stram was closed.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there was a failure writing the data to HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.BeginPutBlob">
            <summary>
            Calls the BeginPutBlob HealthVault method.
            </summary>
            
            <returns>
            The result of the BeginPutBlob method call as a BlobPutParameters instance.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the call to HealthVault fails in some way.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.BlobStream.BeginPutConnectPackageBlob">
            <summary>
            Calls the BeginPutBlob HealthVault method.
            </summary>
            
            <returns>
            The result of the BeginPutConnectPackageBlob method call as a 
            BlobPutParameters instance.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the call to HealthVault fails in some way.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            
            <value>
            True if the length of the stream is known, or false otherwise.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.Length">
            <summary>
            Gets the length BLOB.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            If <see cref="P:Microsoft.Health.BlobStream.CanSeek"/> is false or the length of the stream is not known.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.Position">
            <summary>
            Gets the position of the stream.
            </summary>
            
            <remarks>
            Set is not supported.
            </remarks>
            
            <exception cref="T:System.NotSupportedException">
            If <see cref="P:Microsoft.Health.BlobStream.CanSeek"/> is false when the setter is called.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.ReadTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt
            to read before timing out.
            </summary>
            
            <value>
            A value, in milliseconds, that determines how long the stream will attempt to read
            before timing out.
            </value>
            
            <remarks>
            Set the value to 0 or a negative number to request that there is no timeout.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.BlobStream.WriteTimeout">
            <summary>
            Gets or sets the timeout for write requests.
            </summary>
            
            <remarks>
            Set the value to zero or negative to request no timeout.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemSignatureMethod">
            <summary>
            Defines the HealthRecordItem digital signature methods.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSignatureMethod.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSignatureMethod.HV1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSignatureMethod.HV2">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Health.Package.ConnectPackage">
            <summary>
            Methods for accessing the package APIs of HealthVault.
            </summary>
            
            <remarks>
            The ConnectPackage class allows applications to send user data to the user's
            HealthVault account, outside of the context of an ongoing interaction with the user.
            The application can do this by sending a data package to the HealthVault service
            along with the application's identifier and user specific information.
            The user can then go to HealthVault Shell and add the package's contents to their 
            appropriate health record.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})">
            <summary>
            Represents a package of user data that is created by HealthVault in order
            to be retrieved by a user using the HealthVault Shell.
            </summary>
            
            <remarks>
            Package encryption is delegated to the .NET Crypto classes. The encryption algorithm 
            supported by default is AES256. If TripleDES is required, the caller should create 
            the custom Password Protected Package and call <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)"/>.
            <br/><br/>
            The answer key provided is not the actual key to the decryption. A key is derived using 
            the answer, the salt, and the number of hash iterations (via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> class). To ensure case-insensitivity, the answer 
            is lower cased using <see cref="M:System.String.ToLowerInvariant"/> (culturally-agnostic) 
            prior to generating the derived key.
            <br/><br/>
            The algorithm used has the following parameters:
            <ul>
               <li>Mode = CipherMode.CBC</li>
               <li>Padding = PaddingMode.ISO10126</li>
            </ul>
            <br/><br/>
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The data must be appended to the hash, then encrypted and then Base64 
            encoded.
            </remarks>
            
            <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
            
            <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
            
            <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            <paramref name="securityAnswer"/> when they go to validate the connection in 
            the HealthVault Shell.
            </param>
            
            <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion"/> which the patient must use
            when adding the package to their record via HealthVault Shell. The answer is 
            case-insensitive but otherwise must match exactly. Additionally, it must be at least 
            6 characters long.
            </param>
            
            <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage, whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
            
            <param name="packageContents">
            The list of HealthRecordItems that will be encrypted and added to the package that the 
            user will claim via HealthVault Shell.
            </param>
            
            <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="friendlyName"/>, <paramref name="securityQuestion"/>,
            <paramref name="securityAnswer"/>, <paramref name="applicationPatientId"/> or
            any element in <paramref name="packageContents"/> are
            <b>null</b> or empty.        
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="securityAnswer"/> is less than 6 characters.
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            One of the items in <paramref name="packageContents"/> is signed and contains
            streamed blobs. This is not supported.        
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Package.ConnectPackageCreationParameters,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})">
             <summary>
             Represents a package of user data that is created by HealthVault in order
             to be retrieved by a user using the HealthVault Shell.
             </summary>
             
             <remarks>
             Package encryption is delegated to the .NET Crypto classes. The encryption algorithm 
             supported by default is AES256. If TripleDES is required, the caller should create 
             the custom Password Protected Package and call <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)"/>.
             <br/><br/>
             The answer key provided is not the actual key to the decryption. A key is derived using 
             the answer, the salt, and the number of hash iterations (via the 
             <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> class). To ensure case-insensitivity, the answer 
             is lower cased using <see cref="M:System.String.ToLowerInvariant"/> (culturally-agnostic) 
             prior to generating the derived key.
             <br/><br/>
             The algorithm used has the following parameters:
             <ul>
                <li>Mode = CipherMode.CBC</li>
                <li>Padding = PaddingMode.ISO10126</li>
             </ul>
             <br/><br/>
             The salt supplied is used as the salt to the derived key as well as the key to the 
             supplied HMAC. The data must be appended to the hash, then encrypted and then Base64 
             encoded.
             </remarks>
            <param name="creationParameters">
             The <see cref="T:Microsoft.Health.Package.ConnectPackageCreationParameters"/> to be used while creating the 
             connect package.
            </param>
            
             <param name="packageContents">
             The list of HealthRecordItems that will be encrypted and added to the package that the 
             user will claim via HealthVault Shell.
             </param>
             
             <exception cref="T:System.NotSupportedException">
             One of the items in <paramref name="packageContents"/> is signed and contains
             streamed blobs. This is not supported.
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             If an error occurs when contacting HealthVault.
             </exception>
             
             <returns>
             A token that the application must give to the patient to use when validating the
             connection request.
             </returns>
             
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.CreatePackage(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})">
            <summary>
            Asks HealthVault to create a pending package for the application specified
            by the connection with the specified user specific parameters.
            </summary>
            
            <remarks>
            The encryption is delegated to the .NET Crypto classes. The encryption algorithm 
            supported by default is AES256. If TripleDES is required, the caller should create 
            the custom Password Protected Package and call <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)"/>.
            <br/><br/>
            The answer key provided is not the actual key to the decryption. A key is derived using 
            the answer, the salt, and the number of hash iterations (via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> class). To ensure case-insensitivity, the answer 
            is lower cased using <see cref="M:System.String.ToLowerInvariant"/> (culturally-agnostic) 
            prior to generating the derived key.
            <br/><br/>
            The algorithm used has the following parameters:
            <ul>
               <li>Mode = CipherMode.CBC</li>
               <li>Padding = PaddingMode.ISO10126</li>
            </ul>
            <br/><br/>
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The data must be appended to the hash, then encrypted and then Base64 
            encoded.
            </remarks>
            
            <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
            
            <param name="identityCode">
            The application unique identifier of the package.
            </param>
            
            <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
            
            <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            <paramref name="securityAnswer"/> when they go to validate the connection in 
            the HealthVault Shell.
            </param>
            
            <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion"/> which the patient must use
            when adding the package to their record via HealthVault Shell. The answer is 
            case-insensitive but otherwise must match exactly. Additionally, it must be at least 
            6 characters long.
            </param>
            
            <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage, whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
            
            <param name="packageContents">
            The list of HealthRecordItems that will be encrypted and added to the package that the 
            user will claim via HealthVault Shell.
            </param>
            
            <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="identityCode"/>, <paramref name="friendlyName"/>, <paramref name="securityQuestion"/>,
            <paramref name="securityAnswer"/>, <paramref name="applicationPatientId"/> or
            any element in <paramref name="packageContents"/> are
            <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="securityAnswer"/> is less than 6 characters.
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            One of the items in <paramref name="packageContents"/> is signed and contains
            streamed blobs. This is not supported.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)">
            <summary>
            Asks HealthVault to create a pending package for the application specified
            by the connection with the specified user specific parameters.
            </summary>
            
            <remarks>
            The password protected package supports 2 encryption algorithms, AES256 (recommended)
            and TripleDES. 
            <br/><br/>
            For AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV 
            length is 32 bytes.
            <br/><br/>
            For TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV 
            length is 8 bytes.
            <br/><br/>
            The encryption key should be derived using the answer, the salt, and the number of hash 
            iterations. The decryption will generate this key via the 
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> class, hence, encryption should use a similar or 
            identical process. To ensure case-insensitivity, the answer should be converted to its
            lower cased form using <see cref="M:System.String.ToLowerInvariant"/> (culturally-agnostic) 
            prior to generating the derived key.
            <br/><br/>
            The algorithm used has the following parameters:
            <ul>
               <li>Mode = CipherMode.CBC</li>
               <li>Padding = PaddingMode.ISO10126</li>
            </ul>
            <br/><br/>
            The salt supplied is used as the salt to the derived key as well as the key to the 
            supplied HMAC. The salt should be at least 8 bytes long.
            <br/><br/>
            It is recommended that the number of hash iterations be at least 10000.
            </remarks>
            
            <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
            
            <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
            
            <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            <paramref name="securityAnswer"/> when they go to validate the connection in the 
            HealthVault Shell.
            </param>
            
            <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
            
            <param name="connectPackage">
            The pending connect package that the user will add to his/her record. This package's
            <see cref="T:Microsoft.Health.Blob"/> must be an encrypted and Base64 
            encoded blob of xml that represents a list of HealthRecordItems. This xml blob
            must be a sequence of <thing/> elements, each wrapping the XML representation of a 
            single HealthRecordItem. Each <thing/> element may be generated by calling 
            <see cref="M:Microsoft.Health.HealthRecordItem.GetItemXml"/>.
            </param>
            
            <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="friendlyName"/>, <paramref name="securityQuestion"/>,
            <paramref name="applicationPatientId"/>, or <paramref name="connectPackage"/> is
            <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)">
             <summary>
             Asks HealthVault to create a pending package for the application specified
             by the connection with the specified user specific parameters and the pre-allocated
             identity code.
             </summary>
             
             <remarks>
             The password protected package supports 2 encryption algorithms, AES256 (recommended)
             and TripleDES. 
             <br/><br/>
             For AES256, the supported key size is 256 bits, the blocksize is 256 bits, the IV 
             length is 32 bytes.
             <br/><br/>
             For TripleDES, the supported key size is 192 bits, the blocksize is 64 bits, the IV 
             length is 8 bytes.
             <br/><br/>
             The encryption key should be derived using the answer, the salt, and the number of hash 
             iterations. The decryption will generate this key via the 
             <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> class, hence, encryption should use a similar or 
             identical process. To ensure case-insensitivity, the answer should be converted to its
             lower cased form using <see cref="M:System.String.ToLowerInvariant"/> (culturally-agnostic) 
             prior to generating the derived key.
             <br/><br/>
             The algorithm used has the following parameters:
             <ul>
                <li>Mode = CipherMode.CBC</li>
                <li>Padding = PaddingMode.ISO10126</li>
             </ul>
             <br/><br/>
             The salt supplied is used as the salt to the derived key as well as the key to the 
             supplied HMAC. The salt should be at least 8 bytes long.
             <br/><br/>
             It is recommended that the number of hash iterations be at least 10000.
             </remarks>
             
             <param name="connection">
             The application connection to HealthVault. The application ID in the connection is used
             when making the patient connection.
             </param>
             
             <param name="identityCode">
             A package identity token previously obtained from <see cref="M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)"/>.  
             </param>
             
             <param name="friendlyName">
             A friendly name for the patient connection which will be shown to the user when they
             go to HealthVault Shell to validate the connection.
             </param>
             
             <param name="securityQuestion">
             A question (usually provided by the patient) to which the patient must provide the 
             <paramref name="securityAnswer"/> when they go to validate the connection in the 
             HealthVault Shell.
             </param>
             
             <param name="applicationPatientId">
             The application specific identifier for the user. This identifier is used to uniquely
             identify the user in the application data storage whereas the HealthVault person ID is
             used to identify the person in HealthVault.
             </param>
             
             <param name="connectPackage">
             The pending connect package that the user will add to his/her record. 
             This package's
             <see cref="T:Microsoft.Health.HealthRecordItem"/>'s <see cref="T:Microsoft.Health.BlobStore"/> must be an encrypted 
             blob of xml that represents a list of HealthRecordItems. This xml blob
             must be a sequence of <thing/> elements, each wrapping the XML representation of a 
             single HealthRecordItem. Each <thing/> element may be generated by calling 
             <see cref="M:Microsoft.Health.HealthRecordItem.GetItemXml"/>.
             </param>
                     
             <returns>
             A token that the application must give to the patient to use when validating the
             connection request.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
             If <paramref name="connection"/> is <b>null</b>.
             </exception>
             
             <exception cref="T:System.ArgumentException">
             If <paramref name="identityCode"/>, <paramref name="friendlyName"/>, 
             <paramref name="securityQuestion"/>,
             <paramref name="applicationPatientId"/>, or <paramref name="connectPackage"/> is
             <b>null</b> or empty.
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             If an error occurs when contacting HealthVault.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)">
            <summary>
            Deletes all packages that have been created by the calling application 
            for the applicationPatientId and have not been accepted by the user.
            </summary>
            
            <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
            
            <param name="applicationPatientId">
            The application specific user ID that was used to create the connection 
            request.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationPatientId"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.DeletePendingForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)">
            <summary>
            Deletes a single package that has been created by the calling application but has not been 
            accepted by the user.
            </summary>
            
            <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
            
            <param name="identityCode">
            The unique token that identifies the package.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="identityCode"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)">
            <summary>
            Updates existing pending packages with a new application patient identifier.
            </summary>
            
            <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
            
            <param name="oldApplicationPatientId">
            The application patient identifier that was used to create the initial package.
            </param>
            
            <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="oldApplicationPatientId"/> or <paramref name="newApplicationPatientId"/>
            is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.UpdateApplicationPatientIdForIdentityCode(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)">
            <summary>
            Updates an existing pending package with a new application patient identifier.
            </summary>
            
            <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
            
            <param name="identityCode">
            The unique token that identifies the package.
            </param>
            
            <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="oldApplicationPatientId"/> or <paramref name="newApplicationPatientId"/>
            is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)">
            <summary>
            Allocates a package ID within HealthVault and returns it.
            </summary>
            
            <remarks>
            <para>The package ID is allocated as a place holder for information that 
            is identifiable but not yet available through the HealthVault service.
            The returned package ID token should be stored or given to a patient, 
            then used in a call to <see cref="M:Microsoft.Health.Package.ConnectPackage.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,Microsoft.Health.ItemTypes.PasswordProtectedPackage)"/>
            to send the package data to the HealthVault service.</para>
            <para>The package ID is not a GUID.  It uses a shorter format that is more
            convenient for offline delivery and manual data entry.  The HealthVault 
            service guarantees that each package ID is unique for the lifetime of the 
            package.  Once the package has been accepted by the patient using the 
            HealthVault Shell, or explicitly deleted using the API, the package ID is 
            deallocated and may be reused.</para>
            </remarks>
            
            <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
            
            <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
        </member>
        <member name="T:Microsoft.Health.Package.ConnectPackageCreationParameters">
            <summary>
            The parameters that need to be supplied in order to create 
            a <see cref="T:Microsoft.Health.ItemTypes.PasswordProtectedPackage"/> through the <see cref="T:Microsoft.Health.Package.ConnectPackage"/>
            creation API.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackageCreationParameters.#ctor(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs an <see cref="T:Microsoft.Health.Package.ConnectPackageCreationParameters"/> instance 
            with supplied values.
            </summary>
            
            <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
            
            <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
            
            <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            <paramref name="securityAnswer"/> when they go to validate the connection in the 
            HealthVault Shell.
            </param>
            
            <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion"/> which the patient must use
            when adding the package to their record via HealthVault Shell. The answer is 
            case-insensitive but otherwise must match exactly. Additionally, it must be at least 
            6 characters long.
            </param>
             
            <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="friendlyName"/>, 
            <paramref name="securityQuestion"/>,
            <paramref name="applicationPatientId"/>, or <paramref name="connectPackage"/> is
            <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="securityAnswer"/> is less than 6 characters.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackageCreationParameters.#ctor(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs an <see cref="T:Microsoft.Health.Package.ConnectPackageCreationParameters"/> instance 
            with supplied values.
            </summary>
            
            <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
            
            <param name="identityCode">
            A package identity token previously obtained from 
            <see cref="M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)"/>.  
            </param>
            
            <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
            
            <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            <paramref name="securityAnswer"/> when they go to validate the connection in the 
            HealthVault Shell.
            </param>
            
            <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion"/> which the patient must use
            when adding the package to their record via HealthVault Shell. The answer is 
            case-insensitive but otherwise must match exactly. Additionally, it must be at least 
            6 characters long.
            </param>
             
            <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="identityCode"/>, <paramref name="friendlyName"/>, 
            <paramref name="securityQuestion"/>,
            <paramref name="applicationPatientId"/>, or <paramref name="connectPackage"/> is
            <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="securityAnswer"/> is less than 6 characters.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackageCreationParameters.Dispose">
            <summary>
            Explicit clean up.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Package.ConnectPackageCreationParameters.Finalize">
            <summary>
            Last resort clean up.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.IdentityCode">
            <summary>
            Gets the package identity token previously obtained from 
            <see cref="M:Microsoft.Health.Package.ConnectPackage.AllocatePackageId(Microsoft.Health.Web.OfflineWebApplicationConnection)"/>.  
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.FriendlyName">
            <summary>
            Gets the friendly name for the patient connection which will be shown to the user 
            when they go to HealthVault Shell to validate the connection.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.SecurityQuestion">
            <summary>
            Gets the question (usually provided by the patient) to which the patient must provide 
            the  <paramref name="securityAnswer"/> when they go to validate the connection in the 
            HealthVault Shell.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.SecurityAnswer">
            <summary>
            Gets the answer to the <paramref name="securityQuestion"/> which the patient must use
            when adding the package to their record via HealthVault Shell.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.ApplicationPatientId">
            <summary>
            Gets the application specific identifier for the user. This identifier is used to 
            uniquely identify the user in the application data storage, whereas the HealthVault 
            person ID is used to identify the person in HealthVault.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.Salt">
            <summary>
            Gets the salt used to encrypt the entities within the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.ConnectPackageHMACAlgorithmName">
            <summary>
            Gets the name of the algorithm used to generate the HMAC for the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.ConnectPackageHMACAlgorithm">
            <summary>
            Gets the algorithm used to generate the HMAC for the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.PasswordProtectAlgorithm">
            <summary>
            Gets the <see cref="P:Microsoft.Health.Package.ConnectPackageCreationParameters.PasswordProtectAlgorithm"/> to be used in the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.ConnectPackageEncryptionAlgorithmName">
            <summary>
            Gets the name of the algorithm used to encrypt the <see cref="T:Microsoft.Health.HealthRecordItem"/>s, 
            that form the contents of the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.ConnectPackageEncryptionAlgorithm">
            <summary>
            Gets the algorithm used to encrypt the <see cref="T:Microsoft.Health.HealthRecordItem"/>s, 
            that form the contents of the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.BlobChunkEncryptionAlgorithmName">
            <summary>
            Gets the name of the algorithm used to encrypt the <see cref="T:Microsoft.Health.BlobStream"/>s
            that belong to the <see cref="T:Microsoft.Health.HealthRecordItem"/>s  within the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.BlobChunkEncryptionAlgorithm">
            <summary>
            Gets the algorithm used to encrypt the <see cref="T:Microsoft.Health.BlobStream"/>s
            that belong to the <see cref="T:Microsoft.Health.HealthRecordItem"/>s  within the connect package.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Package.ConnectPackageCreationParameters.Connection">
            <summary>
            Gets the application connection to HealthVault. The application ID in the connection 
            is used when making the patient connection.
            </summary>
        </member>
        <member name="T:Microsoft.Health.PatientConnect.PatientConnection">
            <summary>
            Methods for accessing the patient connection APIs of HealthVault.
            </summary>
            
            <remarks>
            Some HealthVault applications maintain some of their own data storage but need a way to
            link their account/person identifier to a HealthVault identifier. The application can do
            this by calling <see cref="M:Microsoft.Health.PatientConnect.PatientConnection.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)"/> and passing the application's 
            identifier and some information that is specific to the user. The user can then go to 
            HealthVault Shell and validate the connection with their appropriate health record. The
            application can then query for all validated connections (usually on a daily basis) by
            calling <see cref="M:Microsoft.Health.PatientConnect.PatientConnection.GetValidatedConnections(Microsoft.Health.Web.OfflineWebApplicationConnection)"/>
            or <see cref="M:Microsoft.Health.PatientConnect.PatientConnection.GetValidatedConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)"/> 
            which returns instances of <see cref="T:Microsoft.Health.PatientConnect.ValidatedPatientConnection"/>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.PatientConnect.PatientConnection.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)">
            <summary>
            Asks HealthVault to create a pending patient connection for the application specified
            by the connection with the specified user specific parameters.
            </summary>
            
            <param name="connection">
            The application connection to HealthVault. The application ID in the connection is used
            when making the patient connection.
            </param>
            
            <param name="friendlyName">
            A friendly name for the patient connection which will be shown to the user when they
            go to HealthVault Shell to validate the connection.
            </param>
            
            <param name="securityQuestion">
            A question (usually provided by the patient) to which the patient must provide the 
            answer when they go to validate the connection in the HealthVault Shell.
            </param>
            
            <param name="securityAnswer">
            The answer to the <paramref name="securityQuestion"/> which the patient must use
            when validating the connection in HealthVault Shell. The answer is case-insensitive but
            otherwise must match exactly. In most cases it is recommended that this is a single 
            word to prevent entry problems when validating the connection.
            </param>
            
            <param name="callbackUrl">
            Not yet implemented. May be null.
            </param>
            
            <param name="applicationPatientId">
            The application specific identifier for the user. This identifier is used to uniquely
            identify the user in the application data storage whereas the HealthVault person ID is
            used to identify the person in HealthVault.
            </param>
            
            <returns>
            A token that the application must give to the patient to use when validating the
            connection request.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="friendlyName"/>, <paramref name="securityQuestion"/>,
            <paramref name="securityAnswer"/>, or <paramref name="applicationPatientId"/> is
            <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PatientConnect.PatientConnection.DeletePending(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String)">
            <summary>
            Deletes a request for a connection that has been made by the calling application but
            has not been validated by the user.
            </summary>
            
            <param name="connection">
            The connection to HealthVault to use for this operation. 
            </param>
            
            <param name="applicationPatientId">
            The application's identifier for the user which was used to create the connection 
            request.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationPatientId"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PatientConnect.PatientConnection.UpdateApplicationPatientId(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String)">
            <summary>
            Updates an existing pending patient connection with a new application patient identifier.
            </summary>
            
            <param name="connection">
            The HealthVault connection to use for the operation.
            </param>
            
            <param name="oldApplicationPatientId">
            The application patient identifier that was used to make the initial connection request.
            </param>
            
            <param name="newApplicationPatientId">
            The new application patient identifier.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="oldApplicationPatientId"/> or <paramref name="newApplicationPatientId"/>
            is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs when contacting HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PatientConnect.PatientConnection.GetValidatedConnections(Microsoft.Health.Web.OfflineWebApplicationConnection)">
            <summary>
            Gets the connections for the application that people have accepted.
            </summary>
            
            <param name="connection">
            The application's connection to HealthVault.
            </param>
            
            <returns>
            A collection of the connections that people have accepted.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PatientConnect.PatientConnection.GetValidatedConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)">
            <summary>
            Gets the connections for the application that people have accepted since the specified
            date.
            </summary>
            
            <param name="connection">
            The application's connection to HealthVault.
            </param>
            
            <param name="validatedSince">
            Connections that have been validated since this date will be returned. The date passed
            should be in UTC time.
            </param>
            
            <returns>
            A collection of the connections that people have accepted.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.PatientConnect.ValidatedPatientConnection">
            <summary>
            Information about a validated patient connection.
            </summary>
            
            <remarks>
            Some HealthVault applications maintain some of their own data storage but need a way to
            link their account/person identifier to a HealthVault identifier. The application can do
            this by calling <see cref="M:Microsoft.Health.PatientConnect.PatientConnection.Create(Microsoft.Health.Web.OfflineWebApplicationConnection,System.String,System.String,System.String,System.Uri,System.String)"/> and passing the application's 
            identifier and some information that is specific to the user. The user can then go to 
            HealthVault Shell and validate the connection with their appropriate health record. The
            application can then query for all validated connections (usually on a daily basis) by
            calling <see cref="M:Microsoft.Health.PatientConnect.PatientConnection.GetValidatedConnections(Microsoft.Health.Web.OfflineWebApplicationConnection)"/>
            or <see cref="M:Microsoft.Health.PatientConnect.PatientConnection.GetValidatedConnections(Microsoft.Health.Web.OfflineWebApplicationConnection,System.DateTime)"/> 
            which returns instances of <see cref="T:Microsoft.Health.PatientConnect.ValidatedPatientConnection"/>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.PatientConnect.ValidatedPatientConnection.#ctor">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.PatientConnect.ValidatedPatientConnection"/> with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.PatientConnect.ValidatedPatientConnection.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Parses the validated patient connection information from the specified XML.
            </summary>
            
            <param name="nav"></param>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the XML is missing one more mandatory element. The code will be InvalidXml.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.PatientConnect.ValidatedPatientConnection.PersonId">
            <summary>
            Gets the person identifier for the patient that has validated their connection.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.PatientConnect.ValidatedPatientConnection.RecordId">
            <summary>
            Gets the record identifier that the patient chose when validating their connection.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.PatientConnect.ValidatedPatientConnection.ApplicationId">
            <summary>
            Gets the application identifier for which the patient validated their connection.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.PatientConnect.ValidatedPatientConnection.ApplicationPatientId">
            <summary>
            Gets the application specific identifier that the application uses to connect the
            application data with the person's HealthVault record.
            </summary>
            
            <remarks>
            This identifier was provided by the application when the original connection request
            was made.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ActiveRecordAuthorization">
            <summary>
            Provides information about a person who has access to a HealthVault record.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.RecordAuthorization">
            <summary>
            Provides information about a person who has access or who has been invited to share a 
            HealthVault record.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.RecordAuthorization.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the class members with data from the specified 
            active person information XML.
            </summary>
            
            <param name="navigator">
            The XML to get the active person information from.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.IsRecordCustodian">
            <summary>
            Gets whether or not the person is a custodian of the HealthVault record.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.Email">
            <summary>
            Gets the person's email address.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.RecordDisplayName">
            <summary>
            Gets the display name of the HealthVault record that the person has access to.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.RecordAuthorizationState">
            <summary>
            Gets the state of the sharing request for a HealthVault record.
            </summary>
            
            <remarks>
            When a HealthVault record is shared by its custodian, a record authorization is created
            in the <see cref="F:Microsoft.Health.AuthorizedRecordState.ActivationPending"/> state. If the person to
            whom the record is being shared accepts the invitation the record authorization moves
            to the <see cref="F:Microsoft.Health.AuthorizedRecordState.Active"/> state. If the person rejects the
            invitation, the record authorization moves to the 
            <see cref="F:Microsoft.Health.AuthorizedRecordState.ActivationRejected"/> state.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.DateAuthorizationExpires">
            <summary>
            Gets the date when authorization to the HealthVault record expires.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.AccessRights">
            <summary>
            Gets the permissions the person has to the HealthVault record.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.RelationshipType">
            <summary>
            Gets the relationship the person authorized to view this record
            has with the "owner" of the record.
            </summary>
            
            <value>
            An enumeration value indicating the relationship between the 
            record owner and the person authorized to use the record.
            </value>
            
            <remarks>
            See <see cref="P:Microsoft.Health.RecordAuthorization.RelationshipType"/> for more information on the
            relationships and what they mean.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.DateAuthorizationFirstAccepted">
            <summary>
            Gets the date when the person first accepted access to the HealthVault record.
            </summary>
            
            <remarks>
            If the authorized person is the record owner, this date will be the date when the
            record was created. If the authorized person is not the record owner, the date will be
            when the person first accepted the sharing invitation.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.DateAuthorizationChanged">
            <summary>
            Gets the date when the person accepted changes to their access to the HealthVault
            record.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.RecordAuthorization.CanAccessAuditInformation">
            <summary>
            Gets whether the authorized person can access audit information in the HealthVault
            record.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ActiveRecordAuthorization.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Health.ActiveRecordAuthorization"/> with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ActiveRecordAuthorization.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the class members with data from the specified 
            active person information XML.
            </summary>
            
            <param name="navigator">
            The XML to get the active person information from.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.ActiveRecordAuthorization.Name">
            <summary>
            Gets the person's name.
            </summary>
            
            <value>
            The person's full name as it was entered into HealthVault.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.AnonymousConnection">
            <summary>
            Represents a connection for an application to the HealthVault service
            for operations that require neither user authentication nor 
            application identifier verification. 
            </summary>
            
            <remarks>
            You must connect to the HealthVault service to access its
            web methods. This class does not maintain
            an open connection to the service, but uses XML over HTTP to 
            make requests and receive responses from the service. The connection
            only maintains the data necessary for the request.
            <br/><br/>
            Use an anonymous connection to access HealthVault methods that
            require only a valid application identifier, such as 
            <see cref="M:Microsoft.Health.HealthServiceConnection.GetServiceDefinition"/>.
            <br/><br/>
            For operations that require authentication, use the 
            <see cref="T:Microsoft.Health.AuthenticatedConnection"/> class and its derived classes. 
            For operations that require more specific functionality, such as 
            querying a vocabulary list, use the <see cref="T:Microsoft.Health.ApplicationConnection"/>
            class and its derived classes.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceConnection">
            <summary>
            Simplifies access to the HealthVault service. This class is 
            abstract.
            </summary>
            
            <remarks>
            A connection must be made to the HealthVault service to access the
            web methods that the service exposes. The class does not maintain
            an open connection to the service. It uses XML over HTTP to 
            make requests and receive responses from the service. The connection
            just maintains the data necessary to make the request.
            <br/><br/>
            You cannot directly instantiate this abstract class. Instead, instantiate 
            an instance of <see cref="T:Microsoft.Health.ApplicationConnection"/> or 
            <see cref="T:Microsoft.Health.AuthenticatedConnection"/> to communicate with the Microsoft 
            HealthVault service. 
            </remarks>
            
            <seealso cref="T:Microsoft.Health.AuthenticatedConnection"/>
            <seealso cref="T:Microsoft.Health.ApplicationConnection"/>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthServiceConnection"/> 
            class with default values.
            </summary>
            
            <remarks>
            The application ID and HealthVault URL are taken from the application
            or web configuration file.
            </remarks>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.#ctor(System.Guid,System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthServiceConnection"/> 
            class with the specified application identifier and HealthVault 
            web-service URL.
            </summary>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault web-service.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32)">
            <summary>
            Provides a wrapper around the XML request for the web service.
            </summary>
            
            <param name="methodName">
            The name of the method of the web-service to call.
            </param>
            
            <param name="methodVersion">
            The version of the method to call.
            </param>
            
            <returns>
            A <see cref="T:Microsoft.Health.HealthServiceRequest"/> that acts as a
            wrapper to XML request for the HealthVault web-service.
            </returns>
            
            <remarks>
            This method skips the object model provided by the other
            methods of this class and acts as a simple wrapper around the XML 
            request for the web service. The caller must provide the parameters 
            in the correct format for the called method and in order to parse 
            the response data.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="methodName"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.GetServiceDefinition">
            <summary>
            Gets information about the HealthVault service.
            </summary>
            
            <remarks>
            Gets the latest information about the HealthVault service. This 
            includes:<br/>
            - The version of the service.<br/>
            - The SDK assembly URLs.<br/>
            - The SDK assembly versions.<br/>
            - The SDK documentation URL.<br/>
            - The URL to the HealthVault Shell.<br/>
            - The schema definition for the HealthVault method's request and 
              response.
            - The common schema definitions for types that the HealthVault methods
              use.<br/>
            </remarks>
            
            <returns>
            A <see cref="T:Microsoft.Health.ServiceInfo"/> instance that contains the service version, SDK
            assemblies versions and URLs, method information, and so on.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returns an error.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            One or more URL strings returned by HealthVault is invalid.
            </exception> 
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32,System.Boolean)">
            <summary>
            Represents a simple wrapper around the XML request for the web 
            service. This method is abstract.
            </summary>
            
            <param name="methodName">
            The name of the method to call.
            </param>
            
            <param name="methodVersion">
            The version of the method to call.
            </param>
            
            <param name="forAuthentication">
            <b>true</b> if the request generates an authentication token; 
            <b>false</b> if the request calls one of the other web methods.
            </param>
            
            <remarks>
            Override this method in a derived class to provide specific behavior 
            such as authentication.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.GetHeaderSection(System.Xml.XmlWriter)">
            <summary>
            Retrieves the header section XML with the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XML writer that constructs the header section.
            </param>
            
            <remarks>
            Derived classes can insert header section XML as appropriate.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.GetHeaderSection">
            <summary>
            Retrieves the header section XML with default values.
            </summary>
            
            <return>
            The header section query string parameter.
            </return>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceConnection.GetAuthenticatedDataSection(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generates connection-specific authenticated data.
            </summary>
            
            <remarks>
            Derived classes generate connection-specific authenticated data
            from the contained credential. By default, there is no authenticated 
            section. Derived connection types may support authenticated data 
            sections.
            </remarks>
            
            <param name="headerXml">
            The UTF8 encoded data to authenticate.
            </param>
            
            <param name="index">
            The starting index into the data.
            </param>
            
            <param name="count">
            The number of bytes from the start index to authenticate.
            </param>
            
            <returns>
            The data that was authenticated by the credential.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.CancelAllRequests">
            <summary>
            Cancels any pending request to HealthVault that was initiated with this connection 
            instance and prevents any new requests from being made.
            </summary>
            
            <remarks>
            Setting this property to true will cancel any requests that was started using this 
            connection and will prevent new requests from being made.
            It is up to the caller to start the request on another thread. Cancelling will cause
            a HealthServiceRequestCancelledException to be thrown on the thread the request was
            executed on.
            <br/><br/>
            If you want to start reusing the connection set the property to false.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.DefaultWebProxy">
             <summary>
             Gets or sets the default proxy to use for all instances of
             <see cref="T:Microsoft.Health.HealthServiceConnection"/>. 
             To disable proxy usage, set this property to <b>null</b>.
             </summary>
             
             <value>
             An instance of IWebProxy. 
             </value>
             
             <remarks>
             The initial value is system default, 
             which is the value returned by System.Net.WebRequest.DefaultWebProxy.
             </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.WebProxy">
            <summary>
            Gets or sets the proxy to use with this instance of
            <see cref="T:Microsoft.Health.HealthServiceConnection"/>. 
            </summary>
            
            <remarks>
            The default setting is to use <see cref="P:System.Net.WebRequest.DefaultWebProxy"/>.
            To disable proxy usage, set this property to <b>null</b>.
            </remarks>
            
            <value>
            An instance of <see cref="T:System.Net.IWebProxy"/>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.ApplicationId">
            <summary>
            Gets the calling application's ID.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.RequestUrl">
            <summary>
            Gets the HealthVault web-service URL.
            </summary>
            
            <value>
            An instance of Uri representing the HealthVault web-service URL.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.OtherDataStreamUrl">
            <summary>
            Gets the HealthVault web-service URL to use when retrieving and setting the other data 
            in the HealthRecordItem using the http binary channel API.
            </summary>
            
            <value>
            An instance of Uri representing the HealthVault web-service URL.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.RequestTimeoutSeconds">
            <summary>
            Gets or sets the request timeout in seconds.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.RequestTimeToLive">
            <summary>
            Gets or sets the request time-to-live in seconds.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.Culture">
            <summary>
            Gets or sets the language to be sent to the server when making
            requests.
            </summary>
            
            <value>
            A CultureInfo representing the language.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.RequestCompressionMethod">
            <summary>
            Gets or sets the request compression method for this connection.
            </summary>
            
            <value>
            A string representing the request compression method.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.ResponseCompressionMethods">
            <summary>
            Gets or sets the comma-separated response compression methods.
            </summary>
            
            <value>
            A string representing the response compression methods.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceConnection.RequiresInfoHashElement">
            <summary>
            Gets or sets a value indicating whether or not the connection type requires 
            the InfoHashElement in the request envelope header.
            </summary>
            
            <value>
            <b>true</b> if the InfoHashElement is required; otherwise, <b>false</b>.
            </value>
            
            <remarks>
            This is <b>true</b> for both authenticated and application connections. 
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.AnonymousConnection.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AnonymousConnection"/> class.
            </summary>
            
            <remarks>
            The default constructor takes values from the application or web 
            configuration file.
            </remarks>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            If the web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AnonymousConnection.#ctor(System.Guid,System.Uri)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AnonymousConnection"/> class 
            for the application having the specified globally unique 
            identifier (GUID) and HealthVault service uniform resource
            locator (URL).
            </summary>
            
            <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault web service.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AnonymousConnection.#ctor(System.Guid,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AnonymousConnection"/> class 
            for the application having the specified globally unique 
            identifier (GUID) and string representing the HealthVault service 
            uniform resource locator (URL).
            </summary>
            
            <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
            
            <param name="healthServiceUrl">
            A string representing the URL of the HealthVault application.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="healthServiceUrl"/> string is not formatted 
            properly.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ApplicationBinaryConfiguration">
            <summary>
            Represents configuration data for an application which can be read from a file or stream 
            and has an associated content type.
            </summary>
            
            <remarks>
            HealthVault applications can be configured with logos, privacy statements, and terms of
            use statements that can be read from a file or stream. This class wraps the content and 
            content type for that configuration.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationBinaryConfiguration.#ctor">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.ApplicationBinaryConfiguration"/> with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationBinaryConfiguration.#ctor(System.String,System.String)">
             <summary>
             Constructs a <see cref="T:Microsoft.Health.ApplicationBinaryConfiguration"/> with the specified file and
             content type.
             </summary>
             
             <param name="binaryConfigurationFilePath">
             A local path to a file to use as the content.
             </param>
             
             <param name="contentType">
             The MIME type of the content in the file specified by 
             <paramref name="binaryConfigurationFilePath"/>.
             </param>
            
             <exception cref="T:System.ArgumentException">
             If <paramref name="binaryConfigurationFilePath"/> or <paramref name="contentType"/> is
             <b>null</b> or empty,<br/>
             or <paramref name="binaryConfigurationFilePath"/> contains one or more invalid
             characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
             </exception>
             
             <exception cref="T:System.IO.PathTooLongException">
             If <paramref name="binaryConfigurationFilePath"/> is too long.
             </exception>
             
             <exception cref="T:System.IO.DirectoryNotFoundException">
             If <paramref name="binaryConfigurationFilePath"/> is invalid (for example, it is on an
             unmapped drive).
             </exception>
             
             <exception cref="T:System.UnauthorizedAccessException">
             <paramref name="binaryConfigurationFilePath"/> is a file that is read-only.
             -or- 
             This operation is not supported on the current platform.
             -or- 
             <paramref name="binaryConfigurationFilePath"/> specified a directory.
             -or- 
             The caller does not have the required permission. 
             </exception>
             
             <exception cref="T:System.IO.FileNotFoundException">
             The file specified in <paramref name="binaryConfigurationFilePath"/> was not found.
             </exception>
             
             <exception cref="T:System.NotSupportedException">
             <paramref name="binaryConfigurationFilePath"/> is in an invalid format.
             </exception>
             
             <exception cref="T:System.Security.SecurityException">
             The caller does not have the required permission.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.ApplicationBinaryConfiguration.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.ApplicationBinaryConfiguration"/> with the specified stream and
            content type.
            </summary>
            
            <param name="binaryConfigurationContent">
            A stream containing the content.
            </param>
            
            <param name="contentType">
            The MIME type of the content in the stream specified by 
            <paramref name="binaryConfigurationContent"/>.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="binaryConfigurationContent"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="contentType"/> is
            <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationBinaryConfiguration.CreateFromXml(System.Xml.XPath.XPathNavigator,System.String,System.String,System.String)">
            <summary>
            Creates an instance from XML.
            </summary>
            
            <param name="containerNav">
            The container nav.
            </param>
            
            <param name="outerElement">
            The outer element.
            </param>
            
            <param name="dataElement">
            The data element.
            </param>
            
            <param name="contentTypeElement">
            The content type element.
            </param>
            
            <returns>
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationBinaryConfiguration.BinaryConfigurationContent">
            <summary>
            Gets or sets the binary content.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationBinaryConfiguration.CultureSpecificBinaryConfigurationContents">
            <summary>
                Gets a dictionary of language specifiers and localized content.
            </summary>
        </member>
        <member name="P:Microsoft.Health.ApplicationBinaryConfiguration.ContentType">
            <summary>
            Gets or sets the MIME type of the content.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ApplicationConfiguration">
            <summary>
            Gives access to the configuration file for the application and
            exposes some of the settings directly.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.GetShellRedirectorUrl(System.Uri)">
            <summary>
            Gets the ShellRedirectorUrl given the shellUrl.
            </summary>
            
            <param name="shellUrl">
            The Url for HealthVault shell.
            </param>
            
            <returns>
            A Uri instance representing the redirector URL.
            </returns>
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.GetApplicationCertificateSubject(System.Guid)">
            <summary>
            Gets the subject name of the certificate containing the applications private key.
            </summary>
            
            <param name="applicationId">
            The application identifier to get the certificate subject name for. This is only used
            to default the name if the certificate subject is specified in the web.config. The default
            name is "WildcatApp-" + <paramref name="applicationId"/>.
            </param>
            
            <remarks>
            This value is retrieved from the application configuration file using the configuration
            key named "AppCertSubject".
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationConfiguration.SignatureCertStoreLocation">
            <summary>
            Retrieves the store location for the application server certificate.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.GetSignatureCertRsaProvider(System.Guid,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Retrieves the application's private key using the specified
            certificate store.
            </summary>
            
            <exception cref="T:System.Security.SecurityException">
            The application certificate could not be found in the
            specified certificate store.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.UrlPathAppend(System.Uri,System.String)">
            <summary>
            Appends the specified path to the URL after trimming the path.
            </summary>
            <param name="baseUrl">The base URL to trim and append the path to.
            </param>
            <param name="path">The path to append to the URL.</param>
            <returns>The combined URL and path.</returns>
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.GetSetting(System.String)">
            <summary>
            Retrieves the specified settings.
            </summary>
            
            <param name="settingName">
            A string specifying the name of the settings to retrieve.
            </param>
            
            <returns>
            A string representing the settings.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.GetStringSetting(System.String,System.String)">
            <summary>
            Retrieves the specified setting for strings.
            </summary>
            
            <param name="settingName">
            A string specifying the name of the setting.
            </param>
            
            <param name="defaultValue">
            A string representing the default string value.
            </param>
            
            <returns>
            A string representing the settings.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.GetGuidSetting(System.String)">
            <summary>
            Retrieves the specified setting for GUIDs.
            </summary>
            
            <param name="settingName">
            A string specifying the name of the setting.
            </param>
            
            <returns>
            The GUID of the setting.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConfiguration.GetInt32Setting(System.String,System.Int32)">
            <summary>
            Retrieves the specified setting for integers.
            </summary>
            
            <param name="settingName">
            A string specifying the name of the settings to retrieve.
            </param>
            
            <param name="defaultValue">
            The default integer value.
            </param>
            
            <returns></returns>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.RequestCompressionThreshold">
            <summary>
            Gets the request compression threshold (in kilobytes) from web 
            configuration.
            </summary>
            
            <value>
            An integer representing the threshold.
            </value>
            
            <remarks>
            The configuration key for this setting is 
            "requestCompressionThreshold". 
            Only requests larger than the threshold are compressed. Note that
            this setting is applicable only if the 
            <see cref="P:Microsoft.Health.ApplicationConfiguration.RequestCompressionMethod"/> is valid.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.RequestCompressionMethod">
            <summary>
            Gets request compression method from web configuration.
            </summary>
            
            <value>
            A string representing the method, or String.Empty if the 
            configuration key is not present.
            </value>
            
            <remarks>
            The configuration key for this setting is 
            "requestCompressionMethod".
            </remarks>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The returned string is <b>null</b> or empty for methods specifying 
            other than "gzip" or "deflate".
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.ResponseCompressionMethods">
            <summary>
            Gets comma-separated response compression methods from web 
            configuration.
            </summary>
            
            <value>
            A string representing the method, or String.Empty if the 
            configuration key is not present.
            </value>
            
            <remarks>
            The configuration key for this setting is 
            "responseCompressionMethods".
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The returned string is <b>null</b> or empty for methods specifying 
            other than "gzip" or "deflate".
            </exception> 
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.ShellRedirectorUrl">
            <summary>
            Gets the HealthVault service shell redirector URL from the 
            application or web configuration file.
            </summary>
            
            <value>
            A Uri instance representing the redirector URL.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.ShellUrl">
            <summary>
            Gets the HealthVault service shell URL from the application or 
            web configuration file.
            </summary>
            
            <remarks>
            The configuration key for this setting is "WCPage_ShellUrl".
            </remarks>
            
            <value>
            A Uri instance representing the URL.
            </value> 
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.HealthServiceLargeObjectRequestUrl">
            <summary>
            Gets the HealthVault service large-object URL from the application 
            or web configuration file.
            </summary>
            
            <value>
            A Uri instance representing the large-object URL.
            </value> 
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.HealthServiceOtherDataStreamUrl">
            <summary>
            Gets the HealthVault service large-object URL from the application 
            or web configuration file.
            </summary>
            
            <value>
            A Uri instance representing the large-object URL.
            </value> 
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.HealthServiceOpenQueryRequestUrl">
            <summary>
            Gets the HealthVault service open-query URL from the application 
            or web configuration file.
            </summary>
            
            <value>
            A Uri instance representing the open-query URL.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.HealthServiceRootUrl">
            <summary>
            Gets the root URL for the HealthVault service from the application
            or web configuration file.
            </summary>
            
            <value>
            A Uri instance representing the URL.
            </value>
            
            <remarks>
            The configuration key for this setting is "HealthServiceUrl".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.HealthServiceUrl">
            <summary>
            Gets the URL for the HealthVault service from the application
            or web configuration file.
            </summary>
            
            <value>
            A Uri instance representing the URL.
            </value>
            
            <remarks>
            The configuration key for this setting is "HealthServiceUrl".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.ApplicationId">
            <summary>
            Gets the unique application identifier from the application or
            web configuration file.
            </summary>
            
            <value>
            A GUID.
            </value>
            
            <remarks>
            The configuration key for this setting is "ApplicationId".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationConfiguration.UserAppSettings">
            <summary>
            Gets or sets the user application settings.
            </summary>
            
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> representing the 
            settings.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ApplicationConnection">
            <summary>
            Base class that represents a connection of an application 
            to the HealthVault service for either online or offline operations.
            </summary>
            
            <remarks>
            You must connect to the HealthVault service to access its
            web methods. This class does not maintain
            an open connection to the service, but uses XML over HTTP to 
            make requests and receive responses from the service. The connection
            only maintains the data necessary for the request.
            <br/><br/>
            For operations that require authentication, use the 
            <see cref="T:Microsoft.Health.AuthenticatedConnection"/> class.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection"/> 
            class with default values taken from the application or web 
            configuration file.
            </summary>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            If the web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.#ctor(System.Guid,System.Uri)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection"/> 
            class for the application having the specified globally unique 
            identifier (GUID) and HealthVault service uniform resource
            locator (URL).
            </summary>
            
            <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault web service.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.#ctor(System.Guid,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ApplicationConnection"/> 
            class for the application having the specified globally unique 
            identifier (GUID) and string representing the HealthVault service 
            uniform resource locator (URL).
            </summary>
            
            <param name="callingApplicationId">
            The GUID of the HealthVault application.
            </param>
            
            <param name="healthServiceUrl">
            A string representing the URL of the HealthVault application.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="healthServiceUrl"/> string is not formatted 
            properly.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.CreateRequest(Microsoft.Health.HealthRecordAccessor,System.String,System.Int32)">
            <summary>
            Represents a simple wrapper around the XML request for the web 
            service.
            </summary>
            
            <param name="record">
            The record that prepopulates the request.
            </param>
            
            <param name="methodName">
            The name of the method to call.
            </param>
            
            <param name="methodVersion">
            The version of the method to call.
            </param>
            
            <returns>
            A <see cref="T:Microsoft.Health.HealthServiceRequest"/> that wraps 
            the XML request for the web service.
            </returns>
            
            <remarks>
            This method skips the object model provided by the other
            methods of this class and acts as a simple wrapper around
            the XML request for the web service. The caller must provide the
            parameters in the correct format for the called method and parse 
            the response data.
            The information in the <paramref name="record"/> parameter
            prepopulates the request.
            <br/><br/>
            By creating the request object directly rather than using the 
            object model, you can pass parameters that are not directly 
            exposed by the object model. Please provide feedback
            to us if this is the case. This also allows for request-specific
            parameters that are set by default when using the object model. 
            For example, you can change the language for a specific request 
            without affecting other requests to the HealthVault service through
            the same connection.
            <br/><br/>
            <br/><br/>
            You can find a list of the HealthVault methods (including their
            request and response schema) at 
            <a href="http://labs.microsoftlivehealth.com/Lab">the Microsoft
            Live Health Lab</a> site.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="record"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="methodName"/> parameter is <b>null</b> or 
            empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.ExecuteRequestWithRetry(Microsoft.Health.HealthServiceRequest)">
            <summary>
            Executes a request with support for reauthenticating the 
            <cref name="Credential"/> if HealthVault
            indicates that the token is expired.
            </summary>
            
            <remarks>
            Derived classes should implement the appropriate reauthentication
            logic for the connection's credential type.
            </remarks>
            
            <param name="request">
            The authenticated request to make.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.ExecuteRequestForTransformWithRetry(Microsoft.Health.HealthServiceRequest,System.String)">
            <summary>
            Executes a request with support for reauthenticating the 
            <cref name="Credential"/> if HealthVault indicates
            that the token is expired.
            </summary>
            
            <remarks>
            Derived classes should implement the appropriate reauthentication
            logic for the connection's credential type.
            </remarks>
            
            <param name="request">
            The authenticated request to make.
            </param>
            
            <param name="transform">
            The transform to apply the request result.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetApplicationSettingsInternal">
            <summary>
            Gets the application settings for the current application and
            person.
            </summary>
            
            <returns>
            The complete set application settings including the XML settings, selected record ID, etc.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.SetApplicationSettingsInternal(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Sets the application settings for the current application and
            person.
            </summary>
            
            <param name="applicationSettings">
            The application settings XML.
            </param>
            
            <remarks>
            This may be <b>null</b> if no application settings have been 
            stored for the application or user.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetVocabulary(System.String)">
            <summary>
            Retrieves a list of vocabulary items for the specified vocabulary.  
            </summary>
            
            <param name="name">
            The name of the vocabulary requested.
            </param>
            <returns>
            The requested vocabulary and its items.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> parameter <b>null</b> or an empty 
            string.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.
            <br></br>
            -Or- 
            <br></br>
            One of the requested vocabularies is not found on the server.
            <br></br>
            -Or- 
            <br></br>
            -Or- 
            <br></br>
            There is an error loading the vocabulary.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetVocabulary(Microsoft.Health.VocabularyKey,System.Boolean)">
            <summary>
            Retrieves a list of vocabulary items for the specified vocabulary
            and culture.
            </summary>
            
            <param name="vocabularyKey">
            A key identifying the vocabulary requested.
            </param>
            
            <param name="cultureIsFixed">
            HealthVault looks for the vocabulary items for the culture info
            specified using <see cref="P:Microsoft.Health.HealthServiceConnection.Culture"/>.
            If <paramref name="cultureIsFixed"/> is set to <b>false</b> and if 
            items are not found for the specified culture, items for the 
            default fallback culture are returned. If 
            <paramref name="cultureIsFixed"/> is set to <b>true</b>, 
            fallback will not occur, and if items are not found for the 
            specified culture, empty strings are returned.
            </param>
             
            <returns>
            The specified vocabulary and its items, or empty strings.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="vocabularyKey"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.
            <br></br>
            -Or- 
            <br></br>
            The requested vocabulary is not found on the server.
            <br></br>
            -Or- 
            <br></br>
            The requested vocabulary does not contain representations 
            for its items for the specified culture when 
            <paramref name="cultureIsFixed"/> is <b>true</b>.
            <br></br>
            -Or- 
            <br></br>
            There is an error loading the vocabulary.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetVocabulary(System.Collections.Generic.IList{Microsoft.Health.VocabularyKey},System.Boolean)">
            <summary>
            Retrieves lists of vocabulary items for the specified 
            vocabularies and culture.
            </summary>
            
            <param name="vocabularyKeys">
            A list of keys identifying the requested vocabularies.
            </param>
            
            <param name="cultureIsFixed">
            HealthVault looks for the vocabulary items for the culture info
            specified using <see cref="P:Microsoft.Health.HealthServiceConnection.Culture"/>.
            If <paramref name="cultureIsFixed"/> is set to <b>false</b> and if 
            items are not found for the specified culture, items for the 
            default fallback culture are returned. If 
            <paramref name="cultureIsFixed"/> is set to <b>true</b>, 
            fallback will not occur, and if items are not found for the 
            specified culture, empty strings are returned.
            </param>
            
            <returns>
            The specified vocabularies and their items, or empty strings.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="vocabularyKeys"/> list is empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="vocabularyKeys"/> list is <b>null</b> 
            or contains a <b>null</b> entry.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.
            <br></br>
            -Or- 
            <br></br>
            One of the requested vocabularies is not found on the server.
            <br></br>
            -Or- 
            <br></br>
            One of the requested vocabularies does not contain representations 
            for its items for the specified culture when 
            <paramref name="cultureIsFixed"/> is <b>true</b>.
            <br></br>
            -Or- 
            <br></br>
            There is an error loading the vocabulary.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetVocabularyKeys">
            <summary>
            Retrieves a collection of key information for identifying and 
            describing the vocabularies in the system.
            </summary>
            
            <returns>
            A collection of keys identifying the vocabularies in the system.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.SearchVocabularyKeys(System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})">
             <summary>
             Searches the keys of vocabularies defined by the HealthVault service.
             </summary>
             
             <remarks>
             This method does a text search of vocabulary names and descriptions.
             </remarks>
             
             <param name="searchString">
             The search string to use.
             </param>
             
             <param name="searchType">
             The type of search to perform.
             </param>
             
             <param name="maxResults">
             The maximum number of results to return. If null, all matching results 
             are returned, up to a maximum number defined by the service config 
             value with key maxResultsPerVocabularyRetrieval.
             </param>
             
             <returns>
             A <b>ReadOnlyCollection</b> of <see cref="T:Microsoft.Health.VocabularyKey"/> with entries
             matching the search criteria.
             </returns>
            
             <exception cref="T:System.ArgumentException">
             If <paramref name="searchString"/> is <b>null</b> or empty or greater 
             than <b>255</b> characters.
             <br></br>
             -Or-
             <br></br>
             if <paramref name="searchType"/> is not a known 
             <see cref="T:Microsoft.Health.VocabularySearchType"/> value.        
             <br></br>
             -Or-
             <br></br>
             when <paramref name="maxResults"/> is defined but has a value less than 1.        
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             There is an error in the server request.        
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.SearchVocabulary(Microsoft.Health.VocabularyKey,System.String,Microsoft.Health.VocabularySearchType,System.Nullable{System.Int32})">
            <summary>
            Searches a specific vocabulary and retrieves the matching vocabulary items.
            </summary>
            
            <remarks>
            This method does text search matching of display text and abbreviation text
            for the culture defined by the <see cref="P:Microsoft.Health.HealthServiceConnection.Culture"/>. 
            The <paramref name="searchString"/> is a string of characters in the specified 
            culture. 
            </remarks>
            
            <param name="vocabularyKey">
            The <see cref="T:Microsoft.Health.VocabularyKey"/> defining the vocabulary to search. If the 
            family is not specified, the default HealthVault vocabulary family is used. 
            If the version is not specified, the most current version of the vocabulary 
            is used.
            </param>
            
            <param name="searchString">
            The search string to use.
            </param>
            
            <param name="searchType">
            The type of search to perform.
            </param>
            
            <param name="maxResults">
            The maximum number of results to return. If null, all matching results 
            are returned, up to a maximum number defined by the service config 
            value with key maxResultsPerVocabularyRetrieval.
            </param>
            
            <returns>
            A <see cref="T:Microsoft.Health.VocabularyItemCollection"/> populated with entries matching 
            the search criteria.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="vocabularyKey"/> is <b>null</b>.
            <br></br>
            -Or-
            <br></br>
            If <paramref name="searchString"/> is <b>null</b> or empty or greater 
            than <b>255</b> characters.
            <br></br>
            -Or-
            <br></br>
            if <paramref name="searchType"/> is not a known 
            <see cref="T:Microsoft.Health.VocabularySearchType"/> value.        
            <br></br>
            -Or-
            <br></br>
            when <paramref name="maxResults"/> is defined but has a value less than 1.        
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            There is an error in the server request.         
            <br></br>
            -Or-        
            <br></br>
            The requested vocabulary is not found on the server.
            <br></br>
            -Or- 
            The requested search culture is not supported. 
            </exception>        
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an insecure message originating from the application to 
            the specified message recipients. 
            </summary>
            
            <param name="mailRecipient">
            The addresses and display names of the people to send the 
            message to.
            </param>
            
            <param name="senderMailboxName">
            An application specified mailbox name that's sending the message.
            The mailbox name is appended to the application's domain name to 
            form the From email address of the message. This parameter should
            only contain the characters before the @ symbol of the email 
            address.
            </param>
            
            <param name="senderDisplayName">
            The message sender's display name.
            </param>
            
            <param name="subject">
            The subject of the message.
            </param>
            
            <param name="textBody">
            The text body of the message.
            </param>
            
            <param name="htmlBody">
            The HTML body of the message.
            </param>
            
            <remarks>
            If both the <paramref name="textBody"/> and 
            <paramref name="htmlBody"/> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            
            If the domain name of the application has not been previously 
            set (usually through app registration), this method will throw 
            a <see cref="T:Microsoft.Health.HealthServiceException"/>.        
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="MailRecipient"/> is null or empty,
            -or-
            if <paramref name="senderMailboxName"/> is null or empty,
            -or-
            if <paramref name="senderDisplayName"/> is null or empty,
            -or-
            if <paramref name="subject"/> is null or empty,
            -or-
            if <paramref name="textBody"/> and <paramref name="htmlBody"/>
            are both null or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the server returned a failure when making the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.SendInsecureMessageFromApplication(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an insecure message originating from the application
            to the specified message recipients.
            </summary>
            
            <param name="recipientPersonIds">
            The unique identifiers of the people to which the message should be
            sent.
            </param>
            
            <param name="addressMustBeValidated">
            If true, HealthVault will ensure that the person has validated 
            their message address before sending the mail. If false, the 
            message will be sent even if the person's address has not been 
            validated.
            </param>
            
            <param name="senderMailboxName">
            An application specified mailbox name that's sending the message.
            The mailbox name is appended to the application's domain name to 
            form the From email address of the message. This parameter should
            only contain the characters before the @ symbol of the email 
            address.
            </param>
            
            <param name="senderDisplayName">
            The message sender's display name.
            </param>
            
            <param name="subject">
            The subject of the message.
            </param>
            
            <param name="textBody">
            The text body of the message.
            </param>
            
            <param name="htmlBody">
            The HTML body of the message.
            </param>
            
            <remarks>
            If both the <paramref name="textBody"/> and 
            <paramref name="htmlBody"/> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            
            If the domain name of the application has not been previously 
            set (usually through app registration), this method will throw
            a <see cref="T:Microsoft.Health.HealthServiceException"/>.        
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="personIds"/> is null or empty,
            -or-
            if <paramref name="senderMailboxName"/> is null or empty,
            -or-
            if <paramref name="senderDisplayName"/> is null or empty,
            -or-
            if <paramref name="subject"/> is null or empty,
            -or-
            if <paramref name="textBody"/> and <paramref name="htmlBody"/>
            are both null or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the server returned a failure when making the request.        
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.SendInsecureMessageToCustodiansFromApplication(System.Guid,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an insecure message originating from the application 
            to custodians of the specified health record.
            </summary>
            
            <param name="recordId">
            The unique identifier of the health record for which the 
            custodians should be sent the message.
            </param>
            
            <param name="addressMustBeValidated">
            If true, HealthVault will only send the message to custodians with 
            validated e-mail addresses. If false, the message will
            be sent even if the custodians' addresses have not been validated.
            </param>
            
            <param name="senderMailboxName">
            An application specified mailbox name that's sending the message.
            The mailbox name is appended to the application's domain name to 
            form the From email address of the message. This parameter should
            only contain the characters before the @ symbol of the email 
            address.
            </param>
            
            <param name="senderDisplayName">
            The message sender's display name.
            </param>
            
            <param name="subject">
            The subject of the message.
            </param>
            
            <param name="textBody">
            The text body of the message.
            </param>
            
            <param name="htmlBody">
            The HTML body of the message.
            </param>
            
            <remarks>
            If both the <paramref name="textBody"/> and 
            <paramref name="htmlBody"/> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            
            If the domain name of the application has not been previously 
            set (usually through app registration), this method will throw 
            a <see cref="T:Microsoft.Health.HealthServiceException"/>.
                    
            The calling application and the person through which authorization to the 
            specified record was obtained must be authorized for the record. 
            The person must be either authenticated, or if the person is offline,
            their person Id specified as the offline person Id.
            See <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            for more information.
            </remarks>
            
            <exception cref="T:System.ArgumentException"> 
            If <paramref name="recordId"/> is <see cref="F:System.Guid.Empty"/>
            -or-
            if <paramref name="senderMailboxName"/> is null or empty,
            -or-
            if <paramref name="senderDisplayName"/> is null or empty,
            -or-
            if <paramref name="subject"/> is null or empty,
            -or-
            if <paramref name="textBody"/> and <paramref name="htmlBody"/>
            are both null or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the server returned a failure when making the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetPersonInfo">
            <summary>
            Gets the information about the person specified.
            </summary>
            
            <returns>
            Information about the person's HealthVault account.
            </returns>
            
            <remarks>
            This method always calls the HealthVault service to get the latest 
            information. It is recommended that the calling application cache 
            the return value and only call this method again if it needs to 
            refresh the cache.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returns an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople">
            <summary>
            Gets information about people authorized for an application.
            </summary>
            
            <remarks>
            The returned IEnumerable iterator will access the HealthVault service 
            across the network. The default <see cref="T:Microsoft.Health.GetAuthorizedPeopleSettings"/> 
            values are used.
            </remarks>
                    
            <returns>
            An IEnumerable iterator of <see cref="T:Microsoft.Health.PersonInfo"/> objects representing 
            people authorized for the application.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)">
            <summary>
            Gets information about people authorized for an application.
            </summary>                
            
            <remarks>
            The returned IEnumerable iterator will access the HealthVault service 
            across the network. See <see cref="T:Microsoft.Health.GetAuthorizedPeopleSettings"/> for applicable 
            settings.
            </remarks>
            
            <param name="settings">
            The <see cref="T:Microsoft.Health.GetAuthorizedPeopleSettings"/> object used to configure the 
            IEnumerable iterator returned by this method.
            </param>
            
            <returns>
            An IEnumerable iterator of <see cref="T:Microsoft.Health.PersonInfo"/> objects representing 
            people authorized for the application.
            </returns>        
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error. The retrieval can be retried from the 
            current position by calling this method again and using the last successfully 
            retrieved person Id for <see cref="P:Microsoft.Health.GetAuthorizedPeopleSettings.StartingPersonId"/>.        
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="settings"/> is null.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Gets the <see cref="T:Microsoft.Health.HealthRecordInfo"/> for the records identified
            by the specified <paramref name="recordIds"/>.
            </summary>
            
            <param name="recordIds">
            The unique identifiers for the records to retrieve.
            </param>
            
            <returns>
            A collection of the records matching the specified record 
            identifiers and authorized for the authenticated person.
            </returns>
            
            <remarks>
            This method is useful in cases where the application is storing
            record identifiers and needs access to the functionality provided
            by the object model.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetApplicationInfo">
            <summary>
            Gets the application configuration information for the calling application.
            </summary>
            
            <returns>
            An ApplicationInfo object for the calling application.
            </returns>
            
            <remarks>
            This method always calls the HealthVault service to get the latest 
            information. It returns installation configuration about the calling 
            application.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returns an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetApplicationInfo(System.Boolean)">
            <summary>
            Gets the application configuration information for the calling application.
            </summary>
            
            <param name="allLanguages">
            A boolean value indicating whether the localized values all languages should be 
            returned, just one language. This affects all properties which can have multiple 
            localized values, including <see cref="P:Microsoft.Health.ApplicationInfo.CultureSpecificNames"/>, 
            <see cref="P:Microsoft.Health.ApplicationInfo.CultureSpecificDescriptions"/>,
            <see cref="P:Microsoft.Health.ApplicationInfo.CultureSpecificAuthorizationReasons"/>, 
            <see cref="P:Microsoft.Health.ApplicationInfo.LargeLogo"/>,
            <see cref="P:Microsoft.Health.ApplicationInfo.SmallLogo"/>,
            <see cref="P:Microsoft.Health.ApplicationInfo.PrivacyStatement"/>,
            <see cref="P:Microsoft.Health.ApplicationInfo.TermsOfUse"/>,
            and <see cref="P:Microsoft.Health.ApplicationInfo.DtcSuccessMessage"/>
            </param>
            
            <returns>
            An ApplicationInfo object for the calling application.
            </returns>
            
            <remarks>
            This method always calls the HealthVault service to get the latest 
            information. It returns installation configuration about the calling 
            application.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returns an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetUpdatedRecordsForApplication(System.Nullable{System.DateTime})">
            <summary>
            Gets a list of health record IDs for the current application, 
            that optionally have been updated since a specified date.
            </summary>
            
            <param name="updatedDate">
            Date that is used to filter health record IDs according to whether or not they have
            been updated since the specified date.
            </param>
            
            <returns>
            List of health record IDs filtered by any specified input parameters.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.GetUpdatedRecordInfoForApplication(System.Nullable{System.DateTime})">
            <summary>
            Gets a list of <see cref="T:Microsoft.Health.HealthRecordUpdateInfo"/> objects for the current application, 
            that optionally have been updated since a specified date.
            </summary>
            
            <param name="updatedDate">
            Date that is used to filter health record IDs according to whether or not they have
            been updated since the specified date.
            </param>
            
            <returns>
            List of <see cref="T:Microsoft.Health.HealthRecordUpdateInfo"/> objects filtered by any specified input parameters.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationConnection.NewSignupCode">
            <summary>
            Generates a new signup code that should be passed to HealthVault Shell in order
            to create a new user account.
            </summary>
            
            <returns>
            A signup code that can be used to create an account.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ApplicationInfo">
            <meta name="MSHAttr" content="CommunityContent:1" />
            <summary>
            Defines the configuration for a HealthVault application.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationInfo.#ctor">
            <summary>
            Constructs an <see cref="T:Microsoft.Health.ApplicationInfo"/> instance with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationInfo.#ctor(System.String,System.Collections.Generic.IList{System.Byte[]})">
            <summary>
            Constructs an <see cref="T:Microsoft.Health.ApplicationInfo"/> instance with the specified application
            name and public keys.
            </summary>
            
            <param name="name">
            The name of the application.
            </param>
            
            <param name="publicKeys">
            The public key(s) used to uniquely and positively identify the application to the
            HealthVault service. The application signs it's first request to HealthVault using it's
            application private which matches the public key being passed here. When HealthVault
            receives that request it validates the signature using the public key.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="publicKeys"/> is <b>null</b> or empty.
            If <paramref name="name"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationInfo.CreateFromInfoXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an ApplicationInfo instance from the XML info section.
            </summary>
            
            <param name="app">
            The navigator.
            </param>
            
            <returns>
            A fully constructed ApplicationInfo object.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationInfo.Update(Microsoft.Health.ApplicationConnection)">
            <summary>
            Updates the application's configuration in HealthVault.
            </summary>
            
            <param name="connection">
            The connection to use to call HealthVault.
            </param>
            
            <remarks>
            This method makes a remote call to the HealthVault service.
            The calling application in the <paramref name="connection"/> must be the same as
            the application specified by this ApplicationInfo instance or its master application.
            Note, this update will replace all configuration elements for the application. It is 
            advised that <see cref="M:Microsoft.Health.ApplicationProvisioning.Provisioner.GetApplication(Microsoft.Health.Web.OfflineWebApplicationConnection,System.Guid)"/> is 
            called to retrieve the existing application configuration before changing values and 
            calling Update.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            If <see cref="P:Microsoft.Health.ApplicationInfo.Id"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returns an error.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationInfo.ExpectedApplicationAttributes">
            <summary>
            The list of strings that are currently have meaning in
            <see cref="P:Microsoft.Health.ApplicationInfo.ApplicationAttributes"/>.
            </summary>
            <remarks>
            More expected values may be added at any time.
            </remarks>
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.Id">
            <summary>
            Gets or sets the application id.
            </summary>
            
            <remarks>
            On retrieving an application this value will be set to the application id.
            When creating or updating an application, this value is ignored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.Name">
            <summary>
            Gets or sets the name of the application.
            </summary>
            
            <remarks>
            On updating an application configuration the name will only be updated if it
            is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.CultureSpecificNames">
            <summary>
                 Gets a dictionary of language specifiers and localized names of the application.
            </summary>
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.PublicKeys">
            <summary>
            Gets a collection of the public keys for the application.
            </summary>
            
            <remarks>
            The public key(s) are used to uniquely and positively identify the application to the
            HealthVault service. The application signs its first request to HealthVault using its
            application private which matches the public key being passed here. When HealthVault
            receives that request it validates the signature using the public key.
            
            On updating an application configuration the public key(s) will only be updated if the
            collection is not empty.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.OnlineBaseAuthorizations">
            <summary>
            Gets a collection of the online base authorization rules for the application.
            </summary>
            
            <remarks>
            The online base authorization rules represent the set of data that the application
            can access when a user is logged on.
            
            On updating an application configuration the online base authorization rules will only 
            be updated if the collection is not empty.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.OfflineBaseAuthorizations">
            <summary>
            Gets a collection of the offline base authorization rules for the application.
            </summary>
            
            <remarks>
            The offline base authorization rules represent the set of data that the application
            can access when a user is not logged on.
            
            On updating an application configuration the offline base authorization rules will only 
            be updated if the collection is not empty.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.CallableMethods">
            <summary>
            Gets a collection of the HealthVault methods the application can call.
            </summary>
            
            <remarks>
            On updating an application configuration the callable methods will only 
            be updated if the collection is not empty.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.ActionUrl">
            <summary>
            Gets or sets the action URL for the application.
            </summary>
            
            <remarks>
            The action URL is the single point of re-entry to the application from the HealthVault
            Shell. The implementation of the action URL must use the query string parameters to 
            determine what the correct page is to show the user. See 
            Microsoft.Health.Web.HealthServiceActionPage for more information.
            
            On updating an application configuration the action URL will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.Description">
            <summary>
            Gets or sets a description of the application which is shown to the user when
            authorizing the application to their record.
            </summary>
            
            <remarks>
            On updating an application configuration the description will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.CultureSpecificDescriptions">
            <summary>
                 Dictionary of language specifiers and localized descriptions of the application.
            </summary>
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.AuthorizationReason">
            <summary>
            Gets or sets the reason the application requires the base online and offline 
            authorization rules it is requesting.
            </summary>
            
            <remarks>
            The authorization reason is shown to the user when they are authorizing the application
            to use their health record.
            
            On updating an application configuration the authorization reason will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.CultureSpecificAuthorizationReasons">
            <summary>
                Dictionary of language specifiers and localized authorization reasons of the 
                application.
            </summary>
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.DomainName">
            <summary>
            Gets or sets the domain name for the application.
            </summary>
            
            <remarks>
            The domain name is used when the application calls 
            ApplicationConnection.SendInsecureMessageFromApplication along with the
            specified mailbox as the sending party. For example, if the domain name of the application
            is "microsoft.com" and the mailbox is "example", then the user will get an email from
            "example@microsoft.com".
            
            On updating an application configuration the domain name will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.LargeLogo">
            <summary>
            Gets or sets the large logo for the application.
            </summary>
            
            <remarks>
            The large logo is shown at various times to the user when interacting with the
            HealthVault Shell. The large logo must be 120x60 pixels or smaller, and is limited 
            to 160kb in size.
            
            On updating an application configuration the large logo will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.SmallLogo">
            <summary>
            Gets or sets the small logo for the application.
            </summary>
            
            <remarks>
            The small logo is shown at various times to the user when interacting with the
            HealthVault Shell. The small logo is limited to 40kb in size.
            
            On updating an application configuration the small logo will only 
            be updated if the value is not null.
            </remarks>
                    
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.PrivacyStatement">
            <summary>
            Gets or sets the application's privacy statement.
            </summary>
            
            <remarks>
            A link is provided from the HealthVault Shell to the application's privacy statement.
            
            On updating an application configuration the privacy statement will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.TermsOfUse">
            <summary>
            Gets or sets the application's terms of use.
            </summary>
            
            <remarks>
            A link is provided from the HealthVault Shell to the application's terms of use.
            
            On updating an application configuration the terms of use will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.DtcSuccessMessage">
            <summary>
            Gets or sets the application's Direct To Clinical success message.
            </summary>
            
            <remarks>
            On updating an application configuration the dtc success message will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.ApplicationAttributes">
            <summary>
            Gets or sets the application attributes.
            </summary>
            
            <remarks>
            See <see cref="F:Microsoft.Health.ApplicationInfo.ExpectedApplicationAttributes"/> for a list of expected values.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.ConfigurationOptions">
            <summary>
            Gets or sets various configuration options that applications can use.
            </summary>
            
            <remarks>
            The configuration options tell HealthVault of any special behaviors that it should
            allow or enforce for this application. See <see cref="T:Microsoft.Health.ApplicationOptions"/> for more 
            information.
            
            On updating an application configuration the configuration options will only 
            be updated if the value is not null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.PersistentTokenTtlInSeconds">
            <summary>
            Gets or sets the length of time a user token will persist if they choose the "Keep me
            logged in on this computer" checkbox during HealthVault login.
            </summary>
            
            <remarks>
            This value is only used if <see cref="F:Microsoft.Health.ApplicationOptions.PersistentTokensAllowed"/> is
            specified in the <see cref="P:Microsoft.Health.ApplicationInfo.ConfigurationOptions"/>.
            
            On updating an application configuration the persistent token ttl will only 
            be updated if the value is not null.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationInfo.ValidIPPrefixes">
            <summary>
            Gets or sets the IP address masks from which the application can
            call HealthVault.
            </summary>
            
            <remarks>
            A comma separated list of IP address masks from which the
            application can call HealthVault.
            HealthVault provides some added security to applications by supporting
            calls that come from valid IP addresses of the application. IP addresses
            can be specified using a specific IP address and 32 bit mask like
            192.168.0.1/32 or by specifying a subnet and mask like 192.168.0.0/16.
            You can have more than one IP address or mask by comma separating them.
            </remarks>
        </member>
        <member name="T:Microsoft.Health.ApplicationOptions">
            <summary>
            Optional configuration settings for HealthVault applications.
            </summary>
            
            <remarks>
            The default value is None.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationOptions.None">
            <summary>
            No optional application settings specified.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationOptions.PersistentTokensAllowed">
            <summary>
            The application allows the user to stay logged in to the application across browser
            session.
            </summary>
            
            <remarks>
            This setting enables the "Keep me signed in on this computer" checkbox on the
            HealthVault login page.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationOptions.ApplicationAuthorizationRequired">
            <summary>
            The application is required to notify HealthVault that a user has been authorized to
            use the application.
            </summary>
            
            <remarks>
            If this option is specified, the application must authorize HealthVault to allow the
            user to use the application. For example, if the application requires a subscription 
            for use it could enable this option and then notify HealthVault when the status of the
            subscription has changed. In this case HealthVault will prevent the user from logging
            in to the application if the subscription has lapsed.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationOptions.PublishApplication">
            <summary>
            The application will be published to the application directory for users to find.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationOptions.All">
            <summary>
            All application options are specified.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ApplicationOptions.Default">
            <summary>
            The default is no options specified.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ApplicationSettings">
            <summary>
            Application specific settings for the user.
            </summary>
            
            <remarks>
            HealthVault can maintain settings for a specific user and application on behalf of the 
            application. You may think of this like the HKEY_CURRENT_USER part of the Windows Registry
            for HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ApplicationSettings.#ctor">
            <summary>
            Constructs an ApplicationSettings instance with default values.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationSettings.XmlSettings">
            <summary>
            Gets the application specific XML settings that the application has set for the user.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ApplicationSettings.SelectedRecordId">
            <summary>
            Gets the selected health record identifier that the user has chosen to use with this
            application.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.AuthenticatedConnection">
            <summary>
            Represents an authenticated interface to the HealthVault service. Most
            operations performed against the service require authentication.
            </summary>
            
            <remarks>
            You must connect to the HealthVault service to access its
            web methods. This class does not maintain
            an open connection to the service, but uses XML over HTTP to 
            make requests and receive responses from the service. The connection
            only maintains the data necessary for the request.
            <br/><br/>
            An authenticated connection takes the user name and password, 
            authenticates them against the HealthVault service, and then stores an 
            authentication token which is then passed to the service on each 
            subsequent request. An authenticated connection is required for 
            accessing a person's health record. 
            <br/><br/>
            For operations that do not require user or application authentication, 
            use the <see cref="T:Microsoft.Health.AnonymousConnection"/> class.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String)">
            <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
            
            <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the Live ID client APIs (IDCRL).
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> to HealthVault for the user specified in the
            <paramref name="liveIdTicket"/>.
            </returns>
            
            <remarks>
            The calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the
            app.config file for the application.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket"/> or is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If verification of the passport ticket fails or there is a failure
            in finding a HealthVault account for the specified <paramref name="liveIdTicket"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean)">
            <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
            
            <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the Live ID client APIs (IDCRL).
            </param>
            
            <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> to HealthVault for the user specified in the
            <paramref name="liveIdTicket"/>.
            </returns>
            
            <remarks>
            The calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the
            app.config file for the application.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket"/> or is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If verification of the passport ticket fails or there is a failure
            in finding a HealthVault account for the specified <paramref name="liveIdTicket"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent)">
            <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
            
            <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the IDCRL.
            </param>
            
            <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
            
            <param name="cancelTrigger">
            If the event gets triggered the log on request will be cancelled resulting in an
            <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException"/>.
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> to HealthVault for the user specified in the
            <paramref name="liveIdTicket"/>.
            </returns>
            
            <remarks>
            The calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the
            app.config file for the application.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket"/> or is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.Net.WebException">
            If the request to the HealthVault Shell to verify the <paramref name="liveIdTicket"/>
            fails.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the user specified in the <paramref name="liveIdTicket"/> could not be authenticated
            to HealthVault.
            </exception>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            If either the application identifier, platform URL or the shell URL is
            missing from the configuration.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)">
            <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
            
            <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the IDCRL.
            </param>
            
            <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
            
            <param name="cancelTrigger">
            If the event gets triggered the log on request will be cancelled resulting in an
            <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException"/>.
            </param>
            
            <param name="applicationId">
            The unique HealthVault application identifier that the user is being logged into.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service. Note, this must include the web service handler, 
            "wildcat.ashx".
            </param>
            
            <param name="shellUrl">
            The HealthVault Shell redirector URL. This is used to to verify the Live ID ticket before 
            authenticating the user to HealthVault.
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> to HealthVault for the user specified in the
            <paramref name="liveIdTicket"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket"/> or is <b>null</b> or empty, or
            <paramref name="applicationId"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="shellUrl"/> or <paramref name="healthServiceUrl"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.Net.WebException">
            If the request to the HealthVault Shell to verify the <paramref name="liveIdTicket"/>
            fails.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the user specified in the <paramref name="liveIdTicket"/> could not be authenticated
            to HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)">
            <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
            
            <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the IDCRL.
            </param>
            
            <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
            
            <param name="isPersistent">
            True if creating a persistent token, or false otherwise.  Persistent connections
            remain valid for the duration specified in the application's configuration within
            HealthVault.  Typically, persistent tokens are valid for up to one year.
            </param>
            
            <param name="cancelTrigger">
            If the event gets triggered the log on request will be cancelled resulting in an
            <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException"/>.
            </param>
            
            <param name="applicationId">
            The unique HealthVault application identifier that the user is being logged into.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service. Note, this must include the web service handler, 
            "wildcat.ashx".
            </param>
            
            <param name="shellUrl">
            The HealthVault Shell redirector URL. This is used to to verify the Live ID ticket before 
            authenticating the user to HealthVault.
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> to HealthVault for the user specified in the
            <paramref name="liveIdTicket"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket"/> or is <b>null</b> or empty, or
            <paramref name="applicationId"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="shellUrl"/> or <paramref name="healthServiceUrl"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.Net.WebException">
            If the request to the HealthVault Shell to verify the <paramref name="liveIdTicket"/>
            fails.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the user specified in the <paramref name="liveIdTicket"/> could not be authenticated
            to HealthVault.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.VerifyTicketWithShell(System.Guid,System.String,Microsoft.Health.Authentication.CryptoHash,System.Boolean,System.Boolean,System.Threading.ManualResetEvent,System.Uri)">
            <summary>
            
            </summary>
            
            <param name="appId"></param>
            <param name="ticket"></param>
            <param name="sharedSecret"></param>
            
            <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
            
            <param name="isPersistent">
            True if creating a persistent token, or false otherwise.  Persistent connections
            remain valid for the duration specified in the application's configuration within
            HealthVault.  Typically, persistent tokens are valid for up to one year.
            </param>
            
            <param name="cancelTrigger"></param>
            <param name="shellUrl"></param>
            
            <returns></returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the request results in an error being returned from the Shell.  The 
            <see cref="P:Microsoft.Health.HealthServiceException.ErrorCode"/> can give more details about the error
            that occurred.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordAuthorizationRequiredException">
            If the user could not be logged in because they have not authorized the application to
            a health record. The application should direct the user to the APPAUTH target of the
            Shell.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordAuthorizationNotPossible">
            If the user does not have access to a health record that meets the minimum authorization
            requirements of the application. The user will need to request more access from the 
            custodian to use this application.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordReauthorizationRequired">
            If the user had authorized a health record for this application but the application
            changed its required base authorizations such that the user must reauthorize the
            application. The application should direct the user to the APPAUTH target of the Shell.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.Authentication.Credential)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection"/>
            class with the specified credential.
            </summary>
            
            <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
            <remarks>
            The base class, <see cref="T:Microsoft.Health.ApplicationConnection"/>, obtains an 
            application identifier and a service URL from the configuration file.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="credential"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.Uri,Microsoft.Health.Authentication.Credential)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection"/>
            class with the specified application identifier, URL, and 
            credential.
            </summary>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault web service.
            </param>
            
            <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> or 
            <paramref name="credential"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.String,Microsoft.Health.Authentication.Credential)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection"/>
            class with the specified application identifier, a string 
            representing the URL, and credential.
            </summary>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            A string representing the URL of the HealthVault web service.
            </param>
            
            <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> or 
            <paramref name="credential"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.Authenticate">
            <summary>
            Logs on to the HealthVault service using the username and password.
            </summary>
            
            <remarks>
            It is not necessary to explicitly call this method before calling
            any of the methods that access the service. Those methods will 
            call this method if the user has not already been authenticated. 
            This method is provided as a convenience to allow for separate 
            error handling for authorization errors.
            </remarks>
            
            <exception cref="T:System.Security.SecurityException">
            The caller does not have permission to connect to the requested
            URI or a URI to which the request is redirected.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The authorization URL specified to the constructor is not a 
            valid URI.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The authorization was not returned in the response from the 
            server.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)">
            <summary>
            Sets the identifier for the person being impersonated.
            </summary>
            
            <param name="targetPersonId">
            The unique identifier for the person to impersonate.
            </param>
            
            <remarks>
            Impersonation occurs when the authenticated person wants to make
            a request to the HealthVault service on behalf of another person. This
            should not occur in most applications.
            <br/><br/>
            The authenticated person must have the rights to call the requested
            method for the person being impersonated. If that right exists, all
            security processing occurs using the impersonated person's 
            identity. If the right does not exist, the caller receives an
            <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> upon the first 
            invocation of a method that accesses the HealthVault service.
            <br/><br/>
            To start impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/> method.
            To stop impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating"/>
            method.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="targetPersonId"/> parameter is Guid.Empty.
            </exception>
            
            <seealso cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating"/>
            <seealso cref="P:Microsoft.Health.AuthenticatedConnection.IsImpersonating"/>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating">
            <summary>
            Unsets the target person identifier for all requests.
            </summary>
            
            <remarks>
            All future requests will act as the authenticated person.
            <br/><br/>
            Note, to change the person that is being impersonated,
            StopImpersonating does not have to be called. 
            <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/> can be called directly with a
            new target person identifier.
            <br/><br/>
            Impersonation occurs when the authenticated person wants to make
            a request to the HealthVault service on behalf of another person. This
            should not occur in most applications.
            <br/><br/>
            The authenticated person must have the rights to call the requested
            method for the person being impersonated. If that right exists, all
            security processing occurs using the impersonated person's 
            identity. If the right does not exist, the caller receives a
            <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> upon the first 
            invocation of a method that accesses the HealthVault service.
            <br/><br/>
            To start impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/> method.
            To stop impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating"/>
            method.
            </remarks>
            
            <seealso cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/>
            <seealso cref="P:Microsoft.Health.AuthenticatedConnection.IsImpersonating"/>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings">
            <summary>
            Gets the application settings for the current application and person.
            </summary>
            
            <returns>
            A complete set of application settings including the XML, selected record ID, etc.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.GetApplicationSettings">
            <summary>
            Gets the application settings for the current application and
            person.
            </summary>
            
            <returns>
            The application settings XML.
            </returns>
            
            <remarks>
            This might be <b>null</b> if no application settings have been 
            stored for the application or user.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Sets the application settings for the current application and
            person.
            </summary>
            
            <param name="applicationSettings">
            The application settings XML.
            </param>
            
            <remarks>
            This might be <b>null</b> if no application settings have been stored
            for the application or user.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.GetAuthenticatedDataSection(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Derived classes generate connection-specific authenticated data
            from the contained credential.
            </summary>
            
            <param name="headerXml">
            The UTF8 encoded data to authenticate.
            </param>
            
            <param name="index">
            The starting index into the data.
            </param>
            
            <param name="count">
            The number of bytes from the start index to authenticate.
            </param>
            
            <returns>
            The data that was authenticated by the credential.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.ExecuteRequestWithRetry(Microsoft.Health.HealthServiceRequest)">
            <summary>
            Executes a request with support for reauthenticating the 
            <cref name="Credential"/> if HealthVault indicates
            that the token is expired.
            </summary>
            
            <param name="request">
            The authenticated request to make.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.AuthenticatedConnection.ExecuteRequestForTransformWithRetry(Microsoft.Health.HealthServiceRequest,System.String)">
            <summary>
            Executes a request with support for reauthenticating the 
            <cref name="Credential"/> if HealthVault indicates
            that the token is expired.
            </summary>
            
            <param name="request">
            The authenticated request to make.
            </param>
            
            <param name="transform">
            The transform to apply the request result.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.AuthenticatedConnection.IsImpersonating">
             <summary>
             Gets the value which states whether or not the current connection
             is impersonating a different user than who is authenticated.
             </summary>
             
             <value>
             <b>true</b> if <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/> has been called with a 
             valid target person identifier and <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating"/> 
             has not been called; otherwise, <b>false</b>.
             </value>
             
             <remarks>
             Impersonation occurs when the authenticated person wants to make
             a request to the HealthVault service on behalf of another person. This
             should not occur in most applications.
             <br/><br/>
             The authenticated person must have the rights to call the requested
             method for the person being impersonated. If that right exists, all
             security processing occurs using the impersonated person's 
             identity. If the right does not exist, the caller receives a
             <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> upon the first 
             invocation of a method that accesses the HealthVault service.
             <br/><br/>
             To start impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/> method.
             To stop impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating"/>
             method.
             </remarks>
            
             <seealso cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/>
             <seealso cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating"/>
             
        </member>
        <member name="P:Microsoft.Health.AuthenticatedConnection.ImpersonatedPersonId">
            <summary>
            Gets the ID of the person being impersonated.
            </summary>
            
            <remarks>
            This is Guid.Empty if <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)"/> has not been
            called.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.AuthenticatedConnection.AuthenticationToken">
            <summary>
            Gets the authorization token to be used in all requests
            for this user.
            </summary>
            
            <value>
            The authorization token is a base64 encoded string that represents
            the person ID, application ID, expiration, and group membership
            of the person and application requesting access to HealthVault.
            </value>
            
            <remarks>
            The authorization token can be retrieved using the 
            CreateAuthenticatedSessionToken web method from the HealthVault 
            service or by calling the HealthVault Shell authentication 
            web page.
            <br/><br/>
            Typically, the value is obtained by using the 
            <see cref="M:Microsoft.Health.AuthenticatedConnection.Authenticate"/> method.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The authentication results are <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.AuthenticatedConnection.Credential">
            <summary>
            Gets the user credential of the user that will be used to access HealthVault.
            </summary>
            
            <value>
            The name of the HealthVault user account to access.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.IEasyWebResponseHandler">
            <summary> 
            handler to implement custom response handling 
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.IEasyWebResponseHandler.HandleResponseStream(System.IO.Stream)">
            <summary>
            the callback 
            </summary>
            
            <param name="stream"></param>
            
        </member>
        <member name="T:Microsoft.Health.AuthorizedRecordState">
            <summary>
            Defines the state of a HealthVault record authorization.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.AuthorizedRecordState.Active">
            <summary>
            The record authorization is active.
            </summary>
        </member>
        <member name="F:Microsoft.Health.AuthorizedRecordState.ActivationPending">
            <summary>
            The record authorization is pending activation.
            </summary>
        </member>
        <member name="F:Microsoft.Health.AuthorizedRecordState.ActivationRejected">
            <summary>
            The record authorization is rejected for activation.
            </summary>
        </member>
        <member name="T:Microsoft.Health.AuthorizationRule">
            <summary>
            This class defines an authorization rule in the HealthVault service.
            </summary>
            
            <remarks>
            Authorization rules are applied to authorized records to state what
            permissions the person or group being authorized has on the data in
            that record. See the HealthVault Developer's Guide for more information
            on how authorization works in HealthVault.
            
            This rule does not necessarily represent a rule that is present
            on the server. It can be used to generate the necessary XML when 
            using the Shell pages to authorize records.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.AuthorizationRule"/> class
            with the specified permissions.
            </summary>
            
            <param name="permissions">
            The permissions granted.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="permissions"/> parameter is 
            <see cref="F:Microsoft.Health.HealthRecordItemPermissions.None"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.#ctor(Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.AuthorizationRule"/> class 
            with the specified permissions, target and exception sets.
            </summary>
            
            <param name="permissions">
            The permissions granted. 
            </param>
            
            <param name="targetSets">
            The set or sets of health record items to which this rule applies.
            </param>
            
            <param name="exceptionSets">
            The set or sets of health record items to which this rule does not 
            apply even if contained in a set defined by 
            <paramref name="targetSets"/>.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="permissions"/> parameter is 
            <see cref="F:Microsoft.Health.HealthRecordItemPermissions.None"/>.
            </exception>
                    
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.#ctor(System.String,System.String,Microsoft.Health.HealthRecordItemPermissions,System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Collections.Generic.IList{Microsoft.Health.AuthorizationSetDefinition},System.Boolean,Microsoft.Health.AuthorizationRuleDisplayFlags)">
             <summary>
             Creates a new instance of the <see cref="T:Microsoft.Health.AuthorizationRule"/> class 
             with the specified name, reason, permissions, target, exception sets,
             optional and display flags.
             </summary>
             
             <param name="name">
             The name uniquely identifying this rule in a set
             </param>
            
             <param name="reason">
             The reason why an application wants this access
             </param>
            
             <param name="permissions">
             The permissions granted. 
             </param>
             
             <param name="targetSets">
             The set or sets of health record items to which this rule applies.
             </param>
             
             <param name="exceptionSets">
             The set or sets of health record items to which this rule does not 
             apply even if contained in a set defined by 
             <paramref name="targetSets"/>.
             </param>
            
             <param name="isOptional">
             Flag indicating whether or not this rule is optional
             </param>
            
             <param name="displayFlags">
             Flags controlling how to display this rule
             </param>
             
             <exception cref="T:System.ArgumentException">
             The <paramref name="permissions"/> parameter is 
             <see cref="F:Microsoft.Health.HealthRecordItemPermissions.None"/>.
             </exception>
                     
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.ToString">
            <summary>
            Gets the XML representation of the <see cref="T:Microsoft.Health.AuthorizationRule"/>.
            </summary>
            
            <returns>
            The XML representation of the <see cref="T:Microsoft.Health.AuthorizationRule"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.GetRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})">
            <summary>
            Retrieves the authorization XML for the specified rules.
            </summary>
            
            <param name="rules">
            The authorization rules to be included in the authorization XML.
            </param>
            
            <returns>
            A string containing the XML representation of the specified
            authorization rules.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="rules"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.GetBase64EncodedRulesXml(System.Collections.Generic.IList{Microsoft.Health.AuthorizationRule})">
            <summary>
            Gets the base-64 encoding of the authorization XML for the 
            specified rules.
            </summary>
            
            <param name="rules">
            The authorization rules to be included in the authorization XML.
            </param>
            
            <returns>
            A string containing the base-64 encoding of the XML representation 
            of the specified authorization rules.
            </returns>
            
            <remarks>
            The base-64 encoding of the authorization rules can be used when
            calling the Shell web pages to authorize records, register an
            application, or set permissions on a record for a person or group.
            The base-64 encoding of the authorization rules is passed as a 
            value in the appropriate query string argument to the web page.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="rules"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.GetXml">
            <summary>
            Gets the XML representation of the rule.
            </summary>
            
            <returns>
            A string containing XML representing the rule.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationRule.CreateFromXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an instance of an AuthorizationRule object using
            the specified XML.
            </summary>
            
            <param name="authNav">
            The XML containing the auth rules information.
            </param>
            
            <returns>
            A Collection of AuthorizationRule objects parsed out from 
            the XML.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="authNav"/> is null.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.Name">
            <summary>
            Gets the name uniquely identifying the rule within the rule set.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.IsOptional">
            <summary>
            Gets a value indicating whether the authorization rule is optional
            </summary>
            
            <remarks>
            Optional rules are not required for application authorization.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.Reason">
            <summary>
            Gets the reason the application wants the access represented by this rule.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.CultureSpecificReasons">
            <summary>
            Gets a dictionary of language specifiers and reasons.
            </summary>
            <remarks>
             Each entry is a localized version of the same reason.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.DisplayFlags">
            <summary>
            Gets flags controlling display behavior of rules.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.Permissions">
            <summary>
            Gets the permissions that the rule grants.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.HealthRecordItemPermissions"/>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.TargetSets">
            <summary>
            Gets the sets of health record items to which this rule 
            grants permission.
            </summary>
            
            <value>
            A read-only collection of type <see cref="T:Microsoft.Health.AuthorizationSetDefinition"/>
            representing the items.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.AuthorizationRule.ExceptionSets">
            <summary>
            Gets the sets of health record items that are excluded by this 
            rule even if they are part of the <see cref="P:Microsoft.Health.AuthorizationRule.TargetSets"/>.
            </summary>
            
            <value>
            A read-only collection of type <see cref="T:Microsoft.Health.AuthorizationSetDefinition"/>
            representing the items.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.AuthorizationRule.SetProcessingState">
            <summary>
            Defines the states of a state machine that ensures that the sets 
            are processed in the appropriate order to match the XML schema 
            defined for target and exception sets.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.AuthorizationRuleDisplayFlags">
            <summary>
            A class representing the display strategies for optional rules
            </summary>
            
            <remarks>
            Optional rules may be displayed in the AppAuth page in several ways.
            This class specifies the configuration to control that display.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.AuthorizationRuleDisplayFlags.None">
            <summary>
            No special display handling configured
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.AuthorizationRuleDisplayFlags.DisplayFirstTime">
            <summary>
            If set, the rule is displayed when the person is initially
            authorizing the application.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.AuthorizationRuleDisplayFlags.CheckedFirstTime">
            <summary>
            If set, display the rule as checked when 
            initially authorizing the application.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.AuthorizationRuleDisplayFlags.CheckedByDefault">
            <summary>
            If set, the display the rule as checked.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.AuthorizationSetDefinition">
            <summary>
            Defines the interface for interacting with sets of health record items 
            for authorization purposes. This class is abstract.
            </summary>
            
            <remarks>
            Permissions on data in a person's health records are always included
            in an authorization set (whether implicitly via their type or 
            effective date, or explicitly by setting the system set). 
            <see cref="T:Microsoft.Health.AuthorizationSetDefinition"/> is the base class for the 
            different types of authorization sets.
            The concrete class definitions that define the sets are
            <see cref="T:Microsoft.Health.DateRangeSetDefinition"/> and <see cref="T:Microsoft.Health.TypeIdSetDefinition"/>.
            </remarks>
            
            <seealso cref="T:Microsoft.Health.DateRangeSetDefinition"/>
            <seealso cref="T:Microsoft.Health.TypeIdSetDefinition"/>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationSetDefinition.GetXml">
            <summary>
            Retrieves the XML representation of the set. This method is abstract.
            </summary>
            
            <returns>
            The XML representation of the set as a string.
            </returns>
            
            <remarks>
            The XML representation adheres to the schema required by the
            HealthVault methods.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.AuthorizationSetDefinition.ToString">
            <summary>
            Retrieves the XML representation of the set as a string.
            </summary>
            
            <returns>
            A string containing the XML representation of the set.
            </returns>
            
            <remarks>
            The XML representation adheres to the schema required by the
            HealthVault methods.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.CertificateType">
            <summary>
            Supported certificate types.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.CertificateType.None">
            <summary>
            The HealthRecordItem is not signed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.CertificateType.Unknown">
            <summary>
            Unable to determine the type of the certificate used to sign the HealthRecordItem.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.CertificateType.X509Certificate">
            <summary>
            Matches <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.CertificateValidationException">
             <summary>
             Represents the exception thrown when a failure occurs during a 
             certificate validation.
             </summary>
            
        </member>
        <member name="M:Microsoft.Health.CertificateValidationException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.CertificateValidationException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.CertificateValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.CertificateValidationException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
            <param name="innerException">
            The exception that occurred during the certificate operation.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.CertificateValidationException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.CertificateValidationException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.CertificateValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.CertificateValidationException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.CertificateValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.Certificate.CertificateName">
            <summary>
            Wrapper around a disntinguished name for a certificate.  
            </summary>
            
            <remarks>
            Class is seperate from X500DistinguishedName since that
            class does not allow public access to the encoded name.
            </remarks>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateName.#ctor(System.String)">
            <summary>
            Creates a name for a given distinguished name.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="distinguishedName"/> is null or empty
            </exception>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateName.GetCryptoApiBlob">
            <summary>
            Gets a CryptoApiBlob for this name.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateName.GetEncodedName">
            <summary>
            Converts the distinguished name into a cert blob.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">If the conversion cannot be performed</exception>
            <returns>encoded form of the name</returns>
        </member>
        <member name="P:Microsoft.Health.Certificate.CertificateName.DistinguishedName">
            <summary>
            Gets the distinguished name of the certificate.
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.CertificateStore">
            <summary>
            Wrapper around X509 Store for HealthVault.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.#ctor">
             <summary>
             Creates an instance of CertificateStore.
             </summary>
             
             <exception ref="CryptographicException">
             The store is unreadable.
             </exception>
            
             <exception ref="SecurityException">
             The caller does not have the required permissions.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation)">
             <summary>
             Creates an instance of CertificateStore.
             </summary>
             
             <param name="storeType">Specifies store type.</param>
             
             <exception ref="CryptographicException">
             The store is unreadable.
             </exception>
            
             <exception ref="SecurityException">
             The caller does not have the required permissions.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds the certificate to the store.
            </summary>
            
            <param name="cert">
            The certificate to be added to the store.
            </param>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.RemoveCert(System.Guid)">
            <summary>
            Removes certificate from the store.
            </summary>
            
            <param name="appID">
            Id for the application for which the certificate is to be removed.
            </param>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.RemoveCert(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Removes certificate from store.
            </summary>
            
            <param name="cert">
            Certificate that is to be removed.
            </param>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.Contains(System.Guid)">
            <summary>
            Checks if the certificate associated with appID exists in store.
            </summary>
            
            <param name="appID">
            Id for the application.
            </param>
            
            <returns>
            Boolean value indicating whether certificate for appID exists in store
            </returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.Contains(System.String)">
            <summary>
            Checks if the certificate by subjectName exists in store.
            </summary>
            
            <param name="subjectName">
            Subject name of the certificate.
            </param>
            
            <returns>
            Boolean value indicating whether certificate exists in store
            </returns>
            
            <exception cref="T:System.ArgumentException"> 
            subjectName cannot be empty or null 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.FindBySubject(System.String)">
            <summary>
            Finds certificate by SubjectName.
            </summary>
            
            <param name="subjectName">
            Subject name of certificate to be looked up.
            </param>
            
            <returns>
            Returns the certificate associated with the subject name.
            </returns>
            
            <exception cref="T:System.ArgumentException"> 
            subjectName cannot be empty or null 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.Dispose(System.Boolean)">
            <summary>
            	Clean up the contained resources that need disposing. 
            </summary>
            <param name="disposing">true if called from Dispose, false if from the finalizer</param>
            
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStore.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Microsoft.Health.Certificate.CertificateStore.Item(System.String)">
            <summary>
            Gets certificate by looking up subject name in the store.
            </summary>
            
            <param name="subjectName">
            Subject name of the certificate to lookup in the certificate store.
            </param>
            
            <returns>The certificate associated with the subject name.</returns>
        </member>
        <member name="P:Microsoft.Health.Certificate.CertificateStore.Item(System.Guid)">
            <summary>
            Gets the X509Certificate asociated with the appID.
            </summary>
            
            <param name="appID">
            Id of the application to lookup the certificate.
            </param>
            
            <returns>
            The certificate associated with the appID.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.Certificate.CryptoApiBlob">
            <summary>
            	Blob to pass to CAPI.
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/cryptoapi_blob.asp
            </remarks>
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.#ctor">
            <summary>
            Create a null blob
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.#ctor(System.Byte[])">
            <summary>
            Create a new blob from the given data.
            </summary>
            <exception cref="T:System.ArgumentNullException">If data is null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.AllocateBlob(System.Int32)">
            <summary>
            Allocate space for the blob.
            </summary>
            <remarks>
            Will also free the blob if it was already allocated.
            </remarks>
            <param name="size">Size of the blob to allocate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If size is less than zero.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">If the blob could not be allocated.</exception>
            
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.ClearBlob">
            <summary>
            Clear the blob, releasing held memory if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.GetBytes">
            <summary>
            Create a byte array for this blob.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.Dispose(System.Boolean)">
            <summary>
            Clean up after the blob
            </summary>
            <param name="disposing">true if called from Dispose, false if from the finalizer</param>
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.Dispose">
            <summary>
            Clean up the blob
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CryptoApiBlob.Finalize">
            <summary>
            	Last resort blob cleanup
            </summary>
        </member>
        <member name="P:Microsoft.Health.Certificate.CryptoApiBlob.DataSize">
            <summary>
            Gets the size of the contained blob
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.ApplicationCertificate">
            <summary>
            Generates a new HealthVault application certificate.
            This certificate is typically used by HealthVaultClientApplication
            </summary>
        </member>
        <member name="F:Microsoft.Health.Certificate.ApplicationCertificate.CertSubjectPrefix">
            <summary>
            Client application certificates will be prefixed by HVClient
            </summary>
        </member>
        <member name="F:Microsoft.Health.Certificate.ApplicationCertificate.NumberOfYears">
            <summary>
            Default number of years for certificate validity
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.#ctor">
            <summary>
            Creates an instance of ApplicationCertificate
            This will create a new GUID which will be used for naming 
            the certificate
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.#ctor(System.Guid)">
            <summary>
            Creates an instance of ApplicationCertificate
            </summary>
            <param name="applicationID">
            Application ID. Used to associate the certificate and application
            </param>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.#ctor(System.Guid,System.Boolean)">
            <summary>
            Creates an instance of ApplicationCertificate
            </summary>
            <param name="applicationID">
            Application ID. Used to associate the certificate and application.
            </param>
            <param name="alwaysCreate">
                Specify to always create the certificate.
            </param>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.#ctor(System.Guid,System.Boolean,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Generate an X509 cert that works with the HealthVault SDK
            </summary>
            <param name="applicationID"></param>
            <param name="alwaysCreate"></param>
            <param name="storeLocation"></param>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.MakeCertSubject(System.Guid)">
            <summary>
                Make subject for certificate
            </summary>
            <param name="appID"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.MakeCertName(System.Guid)">
            <summary>
                Create name of certificate from appID
            </summary>
            <param name="appID"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.CreateCert(System.Guid,System.Int16)">
            <summary>
            Creates a certificate 
            </summary>
            <param name="appID"></param>
            <param name="numberOfYears"></param>
            
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.AddNativeCertToStore">
            <summary>
            Adds the certificate to the store
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.GenerateKeys">
            <summary>
            	Generate a key pair to be used in the certificate
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.Dispose(System.Boolean)">
            <summary>
            	Clean up the contained managed classes that need disposing. 
            </summary>
            <param name="disposing">true if called from Dispose, false if from the finalizer</param>
            <remarks>
            This class does not need a finalizer as the managed classes that wrap that native OS 
            resources for certificates have finalizers. Howerver, there may be a need for a subclass to
            introduce a finalizer, so Dispose is properly implemented.
            </remarks>
        </member>
        <member name="M:Microsoft.Health.Certificate.ApplicationCertificate.Dispose">
            <summary>
            	
            </summary>
        </member>
        <member name="P:Microsoft.Health.Certificate.ApplicationCertificate.Certificate">
            <summary>
            Returns the native certificate
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.CertificateHandle">
            <summary>
            Safe handle for a PCERT_CONTEXT
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateHandle.#ctor">
            <summary>
            Creates an instance of CertificateHandle
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateHandle.ReleaseHandle">
            <summary>
            Releases the handle. Deletes certificate from store if deleteOnRelease is true.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Health.Certificate.CertificateHandle.IsInvalid">
            <summary>
            Checks whether handle is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.Health.Certificate.CertificateHandle.DeleteOnRelease">
            <summary>
            Gets or sets whether to delete the certificate from the store when the handle is released.
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.CertificateStoreHandle">
            <summary>
            Safe handle for a HCERTSTORE
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStoreHandle.#ctor">
            <summary>
            Constructor for CertificateStoreHandle.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.CertificateStoreHandle.ReleaseHandle">
            <summary>
            Releases the handle associated with the certificate store.
            </summary>
            <returns>True if CertCloseStore succeeds, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Health.Certificate.CertificateStoreHandle.IsInvalid">
            <summary>
            Gets whether handle is invalid.
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.KeyContainerHandle">
            <summary>
            Safe handle for a HCRYPTPROV
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.KeyContainerHandle.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.KeyContainerHandle.ReleaseHandle">
            <summary>
            Releases the handle associated with crypto context.
            </summary>
            <returns>true of false indicating success of CryptReleaseContext.</returns>
        </member>
        <member name="P:Microsoft.Health.Certificate.KeyContainerHandle.IsInvalid">
            <summary>
            Gets whether handle is invalid.
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.KeyHandle">
            <summary>
            Safe handle for a HCRYPTKEY
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.KeyHandle.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.KeyHandle.ReleaseHandle">
            <summary>
            Releases 
            </summary>
            <returns>Releases the handle associated with the public key </returns>
        </member>
        <member name="P:Microsoft.Health.Certificate.KeyHandle.IsInvalid">
            <summary>
            Gets whether handle is invalid.
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.NativeMethods">
            <summary>
            Wrapper class for all native methods
            </summary>
        </member>
        <member name="F:Microsoft.Health.Certificate.NativeMethods.CERT_STORE_PROV_MSG">
            <summary>
            Constants for store providers
            From WinCrypt.h
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CertStrToName(Microsoft.Health.Certificate.NativeMethods.CertEncodingType,System.String,Microsoft.Health.Certificate.NativeMethods.StringType,System.IntPtr,System.Byte[],System.Int32@,System.Text.StringBuilder@)">
            <summary>
            	Convert a X.500 string to an encoded certificate name
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/certstrtoname.asp
            </remarks>
            <param name="dwCertEncodingType">Encoding type to use</param>
            <param name="pszX500">X.500 string to convert</param>
            <param name="dwStrType">Type of the input string</param>
            <param name="pvReserved">Must be null</param>
            <param name="pbEncoded">Buffer to recieve the encoded structure</param>
            <param name="pcbEncoded">Size of the buffer</param>
            <param name="ppszError">Set to the point in the string where a parsing error occured</param>
            <returns>True on success, false on error</returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CertFreeCertificateContext(System.IntPtr)">
            <summary>
            	Free a certificate context by decrementing its reference count
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/certfreecertificatecontext.asp
            </remarks>
            <param name="pCertContext">CERT_CONTEXT to free</param>
            <returns>always true</returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CertDeleteCertificateFromStore(System.IntPtr)">
            <summary>
            	Delete a certificate context from the certificate store
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CertCloseStore(System.IntPtr,System.Int32)">
            <summary>
            	Close a certificate store handle
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/certclosestore.asp
            </remarks>
            <param name="hCertStore">handle of the store to be closed</param>
            <param name="dwFlags">flags to close with</param>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CryptDestroyKey(System.IntPtr)">
            <summary>
            	Close a key handle
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/cryptdestroykey.asp
            </remarks>
            <param name="hKey">key handle to close</param>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CryptReleaseContext(System.IntPtr,System.Int32)">
            <summary>
            	Close a key container handle
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/cryptreleasecontext.asp
            </remarks>
            <param name="hProv">key container to close</param>
            <param name="dwFlags">reserved, must be zero</param>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CertCreateSelfSignCertificate(Microsoft.Health.Certificate.KeyContainerHandle,Microsoft.Health.Certificate.CryptoApiBlob,Microsoft.Health.Certificate.NativeMethods.SelfSignFlags,System.IntPtr,System.IntPtr,Microsoft.Health.Certificate.NativeMethods.SystemTime@,Microsoft.Health.Certificate.NativeMethods.SystemTime@,System.IntPtr)">
            <summary>
            	Build a self signed certificate
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/certcreateselfsigncertificate.asp
            </remarks>
            <param name="hProv">[optional] Handle of the cryptographic provider used to sign the certificate</param>
            <param name="pSubjectIssuerBlob">Pointer to the blob containing the DN of the certificate</param>
            <param name="dwFlags">Flags to override the default function behavior</param>
            <param name="pKeyProvInfo">[optional] information on the key provider for the certificate</param>
            <param name="pSignatureAlgorithm">[optional] A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure. 
                                                        If NULL, the default algorithm, SHA1RSA, is used.</param>
            <param name="pStartTime">[optional] begining of the certificate's validity</param>
            <param name="pEndTime">[optional] end of the certificate's validity</param>
            <param name="pExtensions">[optional] certificate extensions</param>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CertOpenStore(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            	Open a certificate store
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/certopenstore.asp
            </remarks>
            <param name="lpszStoreProvider">Store provider type</param>
            <param name="dwMsgAndCertEncodingType">Encoding of the certificate store</param>
            <param name="hCryptProv">handle to a crypto provider</param>
            <param name="dwFlags">general characteristics of the store</param>
            <param name="pvPara">extra data for the provider</param>
            <returns>handle to the store, NULL on error</returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CertAddCertificateContextToStore(Microsoft.Health.Certificate.CertificateStoreHandle,Microsoft.Health.Certificate.CertificateHandle,Microsoft.Health.Certificate.NativeMethods.AddDisposition,Microsoft.Health.Certificate.CertificateHandle@)">
            <summary>
            	Add a certificate to a certificate store
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/certaddcertificatecontexttostore.asp
            </remarks>
            <param name="hCertStore">handle of a certificate store</param>
            <param name="pCertContext">certificate to add to the store</param>
            <param name="dwAddDisposition">action to take if a matching cert is already in the store</param>
            <param name="ppStoreContext">[out, optional] pointer to the copy of the cert added to the store</param>
            <returns>true on success, false on error</returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CryptAcquireContext(Microsoft.Health.Certificate.KeyContainerHandle@,System.String,System.String,Microsoft.Health.Certificate.NativeMethods.ProviderType,Microsoft.Health.Certificate.NativeMethods.ContextFlags)">
            <summary>
            	Create a key container
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/cryptacquirecontext.asp
            </remarks>
            <param name="phProv">[out]key container handle</param>
            <param name="pszContainer">key container name</param>
            <param name="pszProvider">name of the CSP to use</param>
            <param name="dwProvType">type of CSP to aquire</param>
            <param name="dwFlags">flag values</param>
            <returns>true on success, false on error</returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.CryptGenKey(Microsoft.Health.Certificate.KeyContainerHandle,Microsoft.Health.Certificate.NativeMethods.AlgorithmType,Microsoft.Health.Certificate.NativeMethods.KeyFlags,Microsoft.Health.Certificate.KeyHandle@)">
            <summary>
            	Generate a random key
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/cryptgenkey.asp
            </remarks>
            <param name="hProv">key container to put the key into</param>
            <param name="algId">algorithm the key to be generated is for</param>
            <param name="dwFlags">type of key to generate</param>
            <param name="phKey">[out]generated key</param>
            <returns>true on success, false on error</returns>
        </member>
        <member name="M:Microsoft.Health.Certificate.NativeMethods.PFXExportCertStoreEx(Microsoft.Health.Certificate.CertificateStoreHandle,System.IntPtr,System.IntPtr,System.IntPtr,Microsoft.Health.Certificate.NativeMethods.PfxExportFlags)">
            <summary>
            	Export the certificates and private keys from a store
            </summary>
            <remarks>
            	See http://msdn.microsoft.com/library/default.asp?url=/library/en-us/seccrypto/security/pfxexportcertstoreex.asp
            </remarks>
            <param name="hStore">handle of the store to export certs from</param>
            <param name="pPFX">blob to contain the PFX data</param>
            <param name="szPassword">password to encrypt and verify the PFX data with</param>
            <param name="pvReserved">reserved for future use</param>
            <param name="dwFlags">export flags</param>
            <returns>true on success, false on error</returns>
        </member>
        <member name="T:Microsoft.Health.Certificate.NativeMethods.CertEncodingType">
            <summary>
            	Way to encode the certificate name
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.NativeMethods.StringType">
            <summary>
            String format for the certificate name
            </summary>
        </member>
        <member name="T:Microsoft.Health.Certificate.Util">
            <summary>
            Utility class.
            </summary>
        </member>
        <member name="M:Microsoft.Health.Certificate.Util.GetLastErrorMessage">
            <summary>
            Get the formatted string of the last error message
            </summary>
        </member>
        <member name="T:Microsoft.Health.CommonItemData">
            <summary>
            Represents data that is common for all types of health record items.
            </summary>
            
            <remarks>
            The common data for all health record item types includes data 
            such as notes, source, and extensions.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.CommonItemData.#ctor">
            <summary>
            Creates an empty instance of the CommonItemData class.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.CommonItemData.Source">
            <summary>
            Gets or sets the source of the health record item.
            </summary>
            
            
            <value>
            A string representing the item source.
            </value>
            
            <remarks>
            The source is the description of the device or application
            from which the health record item came.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.CommonItemData.Note">
            <summary>
            Gets or sets a note on the health record item.
            </summary>
            
            <value>
            A string.
            </value>
            
            <remarks>
            Notes are general annotations about the health record item.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.CommonItemData.Tags">
            <summary>
            Gets or sets a comma-separated list of tags on 
            the health record item.
            </summary>
            
            <value>
            A string representing the tag list.
            </value>
            
            <remarks>
            Tags enable users to group information freely. Applications
            must parse the tag list for individual tags.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.CommonItemData.Extensions">
            <summary>
            Gets the collection representing the extension data of the 
            health record item.
            </summary>
            
            <value>
            A collection of <see cref="T:Microsoft.Health.HealthRecordItemExtension"/> objects.
            </value>
            
            <remarks>
            To add extensions to the health record item, add an instance of the
            <see cref="T:Microsoft.Health.HealthRecordItemExtension"/> or derived class to this 
            collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.CommonItemData.RelatedItems">
             <summary>
             Gets the collection representing the health record items related to this one.
             </summary>
             
             <value>
             A collection of <see cref="T:Microsoft.Health.HealthRecordItemRelationship"/> objects.
             </value>
             
             <remarks>
             The relationships between this item and the health record items defined in this collection
             are not maintained by HealthVault. It is solely the responsibility of applications to
             ensure that the referenced items exist and are in the same health record.
             </remarks>
            
        </member>
        <member name="P:Microsoft.Health.CommonItemData.ClientId">
            <summary>
            Gets and sets a client assigned identifier to be associated with the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Health.ConversionFailureException">
             <summary>
             Represents the exception thrown when a failure occurs during a 
             conversion operation.
             </summary>
            
        </member>
        <member name="M:Microsoft.Health.ConversionFailureException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ConversionFailureException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ConversionFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ConversionFailureException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
            <param name="innerException">
            The exception that occurred during the conversion operation.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ConversionFailureException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ConversionFailureException"/> 
            class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Health.ConversionFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.ConversionFailureException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ConversionFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.CultureSpecificDictionary`1">
            <summary>
            Dictionary for storing localized values.
            </summary>
            <remarks>
            The key is the language-country string such as "en-US", and the value is whatever type is 
            necessary, usually either string or byte[].
            </remarks>
        </member>
        <member name="F:Microsoft.Health.CultureSpecificDictionary`1.DefaultLanguage">
            <summary>
            Constant key to indicate the default string. Used in place of the language specifier.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.CultureSpecificDictionary`1.BestValue">
            <summary>
            Get the best value. 
            </summary>
            <remarks>
            The caller will typically only get one translated language back from the platform, 
            and it may have a non-default language specifier. The best value property allows 
            getting that value.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.CultureSpecificDictionary`1.DefaultValue">
            <summary>
            Get or set the default value., with the key = DefaultLangauge.
            </summary>
            <remarks>
            The default value is a value with no corresponding language-country specified.
            It's stored in the dictionary with key = DefaultLangauge.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.CultureSpecificStringDictionary">
            <summary>
            Dictionary for storing localized string values.
            </summary>
            <remarks>
            The key is the language-country string such as "en-US", and the value is of type string.
            </remarks>
        </member>
        <member name="M:Microsoft.Health.CultureSpecificStringDictionary.ConvertToString(System.String)">
            <summary>
            Creates a delegate for converting an xml string to a string.
            </summary>
        </member>
        <member name="M:Microsoft.Health.CultureSpecificStringDictionary.ConvertFromString(System.String)">
            <summary>
            Creates a delegate for converting an string to an xml string.
            </summary>
        </member>
        <member name="T:Microsoft.Health.CultureSpecificByteArrayDictionary">
            <summary>
            Dictionary for storing localized byte array values.
            </summary>
            <remarks>
            The key is the language-country string such as "en-US", and the value is of type byte[].
            </remarks>
        </member>
        <member name="M:Microsoft.Health.CultureSpecificByteArrayDictionary.ConvertToByteArray(System.String)">
            <summary>
            Creates a delegate for converting an xml string to a byte array.
            </summary>
        </member>
        <member name="M:Microsoft.Health.CultureSpecificByteArrayDictionary.ConvertFromByteArray(System.Byte[])">
            <summary>
            Creates a delegate for converting a byte array to an xml string.
            </summary>
        </member>
        <member name="T:Microsoft.Health.DateRangeSetDefinition">
            <summary>
            Defines a set of health record items for authorization 
            purposes whose effective date falls within a specified range.
            </summary>
            
            <remarks>
            Permissions on data in a person's health records are always included
            in an authorization set (whether implicitly via their type or 
            effective date, or explicitly by setting the system set.) This class
            serves as a set of health record items that have effective dates 
            falling within the specified range. Other types of authorization 
            sets include <see cref="T:Microsoft.Health.TypeIdSetDefinition"/>.
            </remarks>
            
            <seealso cref="T:Microsoft.Health.AuthorizationSetDefinition"/>
            <seealso cref="T:Microsoft.Health.TypeIdSetDefinition"/>
            
        </member>
        <member name="M:Microsoft.Health.DateRangeSetDefinition.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.DateRangeSetDefinition"/> class 
            with the specified minimum and maximum dates.
            </summary>
            
            <param name="dateMin">
            The minimum effective date of the health record items included in 
            the set.
            </param>
            
            <param name="dateMax">
            The maximum effective date of health record items included in 
            the set.
            </param>
            
            <remarks>
            All dates and times are considered to be in UTC time. The calling
            application must do any conversion from local time.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="dateMin"/> parameter is greater than the 
            <paramref name="dateMax"/> parameter.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.DateRangeSetDefinition.GetXml">
            <summary>
            Gets the XML representation of the set.
            </summary>
            
            <returns>
            The XML representation of the set as a string.
            </returns>
            
            <remarks>
            The XML representation adheres to the schema required by the
            HealthVault methods.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.DateRangeSetDefinition.DateMin">
            <summary>
            Gets the minimum effective date of the health record items in 
            this set.
            </summary>
            
            <value>
            A DateTime value in UTC.
            </value>
            
            <remarks>
            The calling application is responsible for changing any local
            times to UTC.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.DateRangeSetDefinition.DateMax">
            <summary>
            Gets the maximum effective date of the health record items in 
            this set.
            </summary>
            
            <value>
            A DateTime value in UTC.
            </value>
            
            <remarks>
            The calling application is responsible for changing any local 
            times to UTC time.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.EasyWebRequest">
            <summary>
            helper for making web calls
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.#ctor">
            <summary> default constructor for GET </summary>
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.#ctor(System.String)">
            <summary> 
            constructor for string POST 
            </summary>
            
            <param name="stringRequest">
            text to send 
            </param>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.#ctor(System.Byte[],System.Int32)">
            <summary> 
            constructor for Xml POST 
            </summary>
            
            <param name="utf8EncodedXml">
            Utf8 encoded Xml to send 
            </param>
            
            <param name="length">
            Significant byte count in the buffer.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.CancelRequest">
            <summary>
            Cancels the request.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.Fetch(System.Uri,Microsoft.Health.IEasyWebResponseHandler)">
            <summary> 
            Do the dance --- custom handler
            </summary>
            
            <param name="url"> 
            url to request 
            </param>
            
            <param name="customHandler">
            response handler (nullable)
            </param>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.CreateOutputCompressionStream(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Transform the response stream depending on the content type.
            </summary>
            
            <param name="outputStream">
            Output stream to be transformed
            </param>
            
            <param name="contentEncoding">
            Http request/response content encoding
            </param>
            
            <param name="leaveOpen">
            If true, leave the outputStream open
            when transform stream is closed
            </param>
            
            <returns>
            Transformed stream. Closing this stream will
            close the input stream
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.CreateInputDecompressionStream(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Transforms the input stream depending on the content type
            </summary>
            
            <param name="inputStream">
            Stream to be transformed
            </param>
            
            <param name="contentEncoding">
            Http request/response content encoding
            </param>
            
            <param name="leaveOpen">
            If true, leave the outputStream open
            when transform stream is closed
            </param>
            
            <returns>
            Transformed stream. Closing this stream will
            close the input stream
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.CreateResponseWrapper">
            <summary>
            Creates a MemoryStream wrapper over the buffered response data.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.WaitForCompletion">
            <summary> 
            wait for request to complete
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.Dispose">
            <summary>
            Disposes the request.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.EasyWebRequest.Dispose(System.Boolean)">
            <summary>
            Cleans up the cancel request trigger.
            </summary>
            
            <param name="disposing"></param>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.DefaultWebProxy">
            <summary>
            Sets the default proxy to use for all instances of
            EasyWebRequest. The initial value is system default.
            i.e. the value returned by System.Net.WebRequest.DefaultWebProxy
            To disable proxy usage, set this property to null.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.RetryOnInternal500Count">
            <summary>
            Gets or sets the number of times the request will be retried if
            the server returns an Internal Error 500.
            </summary>
            
            <remarks>
            This value can be configured using the 
            "RequestRetryOnInternal500Count" key in the application 
            configuration file.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.RetryOnInternal500SleepSeconds">
            <summary>
            Gets or sets the number of seconds that will be slept before the
            request will be retried after encountering an Internal Error 
            500.
            </summary>
            
            <remarks>
            This value can be configured using the 
            "RequestRetryOnInternal500SleepSeconds" key in the application 
            configuration file.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.WebProxy">
            <summary>
            Sets the proxy to use with this instance of
            EasyWebRequest. The default setting is to use
            <see cref="P:Microsoft.Health.EasyWebRequest.DefaultWebProxy"/>.
            To disable proxy usage, set this property to null.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.Headers">
            <summary>
            Gets the dictionary of headers that will be added to the web request.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.RequestCancelTrigger">
            <summary>
            If the <see cref="P:Microsoft.Health.EasyWebRequest.RequestCancelTrigger"/> is set by calling 
            <see cref="M:System.Threading.EventWaitHandle.Set"/> the pending request will be aborted and a 
            HealthServiceRequestCancelledException will be thrown.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.RequestSize">
            <summary>
            Gets the request size in bytes.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.ResponseSize">
            <summary>
            Gets the response size in bytes.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.TimeoutMilliseconds">
            <summary> 
            approx request timeout value (default infinite) 
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.RequestCompressionThreshold">
            <summary>
            Gets or sets the request compression threshold in kilobytes.
            </summary>
            
            <remarks>
            Only requests larger than the threshold are compressed. Note that
            this setting is applicable only if the RequestCompressionMethod is 
            valid.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.RequestCompressionMethod">
            <summary>
            Gets or sets the request compression method.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.ResponseCompressionMethods">
            <summary>
            Gets or sets the comma separated response compression methods.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.EasyWebRequest.ForceAsyncRequest">
            <summary>
            If true will make Get requests asynchronous instead of the default synchronous.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.GetAuthorizedPeopleSettings">
            <summary>
            The settings for retrieving a set of <see cref="T:Microsoft.Health.PersonInfo"/> objects through 
            <see cref="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)"/>
            </summary>
            
            <remarks>
            These settings allow specifying the behavior of data retrieval from the HealthVault 
            service through 
            <see cref="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Health.GetAuthorizedPeopleSettings.#ctor">
            <summary>
            Creates a <see cref="T:Microsoft.Health.GetAuthorizedPeopleSettings"/> object with default values.
            </summary>
        </member>
        <member name="P:Microsoft.Health.GetAuthorizedPeopleSettings.BatchSize">
            <summary>
            Gets or sets the number of <see cref="T:Microsoft.Health.PersonInfo"/> objects to retrieve when a network 
            call is made to the HealthVault service to retrieve the next batch.
            </summary>
            
            <remarks>        
            The maximum batch size is limited by the HealthVault platform.        
            <br/><br/>
            Specify 0 to set the batch size to the service configuration value 
            'defaultPersonInfosPerRetrieval'. 
            <br/><br/>
            The default value is 0.        
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            An attempt was made to set the batch size to a negative number.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.GetAuthorizedPeopleSettings.AuthorizationsCreatedSince">
            <summary>
            Get or sets the DateTime in UTC that will be used to filter authorized people
            from the returned list according to the date that the person was authorized for the application.
            Calls to <see cref="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)"/> 
            will only return people whose authorization was created after the given date and time.
            </summary>
            
            <remarks>
            The default value is DateTime.MinValue.
            <br/><br/>
            The application is responsible for converting from local time to UTC.        
            </remarks>
        </member>
        <member name="P:Microsoft.Health.GetAuthorizedPeopleSettings.StartingPersonId">
            <summary>
            Gets or sets the person id that determines the starting point for the 
            <see cref="T:Microsoft.Health.PersonInfo"/> object iterator.
            </summary>
            
            <remarks>
            The <see cref="T:Microsoft.Health.PersonInfo"/> iterator returned by 
            <see cref="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)"/> 
            will begin with the first authorized person <em>after</em> the person whose ID is 
            specified by <b>StartingPersonId</b>.
            <br/><br/>
            To begin with the first available authorized person, set this value to <see cref="F:System.Guid.Empty"/>. 
            The default value is <see cref="F:System.Guid.Empty"/>.
            <br/><br/>
            In case of a <see cref="T:Microsoft.Health.HealthServiceException"/> while iterating through the results, 
            the last successfully retrieved person id can be specified for this value and and used 
            to retrieve a new iterator with   
            <see cref="M:Microsoft.Health.ApplicationConnection.GetAuthorizedPeople(Microsoft.Health.GetAuthorizedPeopleSettings)"/>. 
            The new iterator will begin with the authorized person that follows the last successfully retrieved PersonInfo.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthApplicationConfiguration">
            <summary>
            Gives access to the configuration file for the application and
            exposes some of the settings directly.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthApplicationConfiguration.DefaultHmacAlgorithmName">
            <summary>
            The default HMAC algorithm name.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthApplicationConfiguration.DefaultHashAlgorithmName">
            <summary>
            The default hash algorithm name.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureHashAlgorithmName">
            <summary>
            The default signature hash algorithm name.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthApplicationConfiguration.DefaultSignatureAlgorithmName">
            <summary>
            The default signature algorithm name.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthApplicationConfiguration.DefaultSymmetricAlgorithmName">
            <summary>
            The default symmetric algorithm name.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.Current">
            <summary>
            Gets or sets the current configuration object for the app-domain.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultUrl">
            <summary>
            Gets the root HealthVault URL.
            </summary>
            
            <remarks>
            This property corresponds to the "HealthServiceUrl" configuration
            value with "wildcat.ashx" removed.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultMethodUrl">
            <summary>
            Gets the HealthVault method request URL.
            </summary>
            
            <remarks>
            This property corresponds to the "HealthServiceUrl" configuration
            value.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultShellUrl">
            <summary>
            Gets the HealthVault Shell URL.
            </summary>
            
            <remarks>
            This property corresponds to the "ShellUrl" configuration
            value.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.BlobStreamUrl">
            <summary>
            Gets the URL to/from which BLOBs get streamed.
            </summary>
            
            <remarks>
            This property corresponds to the "HealthVaultUrl" configuration
            value with the path modified to the appropriate handler.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.HealthVaultOpenQueryRequestUrl">
            <summary>
            Gets the Open Query URL.
            </summary>
            
            <remarks>
            This property corresponds to the "HealthVaultUrl" configuration
            value with the path modified to the appropriate handler.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.ApplicationCertificate">
            <summary>
            Gets a certificate containing the application's private key.
            </summary>
            
            <remarks>
            This property corresponds to the "SignatureCertStoreLocation", "AppCertSubject",
            "ApplicationCertificateFilename", and "ApplicationCertificatePassword" configuration
            values.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.ApplicationId">
            <summary>
            Gets the application's unique identifier.
            </summary>
            
            <remarks>
            This property corresponds to the "ApplicationId" configuration
            value.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.HmacAlgorithmName">
            <summary>
            Gets the name of the algorithm used to ensure communication with HealthVault
            isn't tampered with.
            </summary>
            
            <remarks>
            This property corresponds to the "HmacAlgorithmName" configuration
            value. The value defaults to "HMACSHA256".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.HashAlgorithmName">
            <summary>
            Gets the name of the hashing algorithm to use when communicating with HealthVault.
            </summary>
            
            <remarks>
            This property corresponds to the "HashAlgorithmName" configuration
            value. The value defaults to "SHA256".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.SignatureHashAlgorithmName">
            <summary>
            Gets the name of the signature hash algorithm.
            </summary>
            
            <remarks>
            This property corresponds to the "SignatureHashAlgorithmName" configuration
            value. The value defaults to "SHA1".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.SignatureAlgorithmName">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
            
            <remarks>
            This property corresponds to the "SignatureAlgorithmName" configuration
            value. The value defaults to "RSA-SHA1".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.SymmetricAlgorithmName">
            <summary>
            Gets the name of the symmetric algorithm.
            </summary>
            
            <remarks>
            This property corresponds to the "SymmetricAlgorithmName" configuration
            value. The value defaults to "AES256".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeout">
            <summary>
            Gets the request timeout in seconds.
            </summary>
            
            <remarks>
            This value is used to set the <see cref="P:System.Net.HttpWebRequest.Timeout"/> property 
            when making the request to HealthVault. The timeout is the number of seconds that a 
            request will wait for a response from HealtVault. If the method response is not
            returned within the time-out period the request will throw a <see cref="T:System.Net.WebException"/>
            with the <see cref="P:System.Net.WebException.Status">Status</see> property set to
            <see cref="F:System.Net.WebExceptionStatus.Timeout"/>.
            This property corresponds to the "defaultRequestTimeout" configuration
            value. The value defaults to 30 seconds.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.DefaultRequestTimeToLive">
            <summary>
            Gets the request time to live in seconds.
            </summary>
            
            <remarks>
            This property defines the "msg-ttl" in the HealthVault request header XML. It determines
            how long the same XML can be used before HealthVault determines the request invalid.
            This property corresponds to the "defaultRequestTimeToLive" configuration
            value. The value defaults to 1800 seconds.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500Count">
            <summary>
            Gets the number of retries the .NET APIs will make when getting an internal
            error response (error 500) from HealthVault.
            </summary>
            
            <remarks>
            This property corresponds to the "RequestRetryOnInternal500" configuration
            value. The value defaults to 2.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.RetryOnInternal500SleepSeconds">
            <summary>
            Gets the sleep duration in seconds between retries due to HealthVault returning
            an internal error (error 500).
            </summary>
            
            <remarks>
            This property corresponds to the "RequestRetryOnInternal500SleepSeconds" configuration
            value. The value defaults to 1 second.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.RequestCompressionThreshold">
            <summary>
            Gets the size in kilobytes above which requests will be compressed.
            </summary>
            
            <remarks>
            This property corresponds to the "requestCompressionThreshold" configuration
            value. The value defaults to 1KB.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.RequestCompressionMethod">
            <summary>
            Gets the method used to compress requests.
            </summary>
            
            <remarks>
            This property corresponds to the "requestCompressionMethod" configuration
            value. The value defaults is to not compress requests.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.ResponseCompressionMethods">
            <summary>
            Gets the application's supported compression methods that can be sent back 
            from HealtVault during a method response.
            </summary>
            
            <remarks>
            This property corresponds to the "responseCompressionMethods" configuration
            value. The value defaults to not compress responses.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthApplicationConfiguration.InlineBlobHashBlockSize">
            <summary>
            Gets the size in bytes of the block used to hash inlined BLOB data.
            </summary>
            
            <remarks>
            This property corresponds to the "defaultInlineBlobHashBlockSize" configuration
            value. The value defaults to 2MB.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthClientApplication">
            <summary>
            Represents a HealthVault client application.
            </summary>
            
            <remarks>
            Use this class for creating a Windows client application
            for connecting to HealthVault. 
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthClientApplication._childCert">
            <summary>
            Certificate for the child application
            </summary>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.#ctor">
            <summary>
            Private constructor for <see cref="T:Microsoft.Health.HealthClientApplication"/>.
            </summary>
            
            <remarks>
            Constructor is private. For creating an instance of 
            <see cref="T:Microsoft.Health.HealthClientApplication"/> use Create.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid)">
            <summary>
            Create the application using values stored in the app.config file.
            </summary>
            
            <param name="applicationId">
            Unique identifier of the new local client application.
            </param>
            
            <param name="masterApplicationId">
            Unique identifier of an existing HealthVault master application.
            The client application will be created as a child application using
            the specified application as a parent.
            </param>
            
            <remarks>
            App.config entries are as follows:
            ShellUrl - The url of the HealthVault shell
            HealthServiceUrl - the url of the HealthVault platform
            </remarks>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The configuration file does not 
            contain an entry for either ShellUrl or HealthServiceUrl.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            Either the <paramref name="applicationId "/> or
            <paramref name="masterApplicationId"/> parameter is <see cref="F:System.Guid.Empty"/>. 
            </exception>
            
            <exception ref="CryptographicException">
            If the certificate cannot be created or could not be added to the store.
            </exception>
            
            <remarks>
            This method will lookup the certificate in the
            user certificate store by applicationId. If the
            certificate does not exist, then a new certificate will
            be created.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.Create(System.Guid,System.Guid,System.Uri,System.Uri)">
            <summary>
            Create an application based on the passed-in values.
            </summary>
            
            <param name="applicationId">
            Unique identifier of the new local client application.
            </param>
            
            <param name="masterApplicationId">
            Unique identifier of an existing HealthVault master application.
            The client application will be created as a child application using
            the specified application as a parent.
            </param>
            
            <param name="shellUrl">
            The URL of the HealthVault shell service.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault platform service.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The value of <paramref name="shellUrl"/> or 
            <paramref name="healthServiceUrl"/> is 
            <b>null</b>, or the value of <paramref name="applicationId"/> or 
            <paramref name="masterApplicationId"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception ref="CryptographicException">
            If the certificate cannot be created or could not be added to the store.
            </exception>
            
            <remarks>
            This method looks up the certificate in the
            user certificate store using applicationId. If the
            certificate does not exist, then it will create
            a new certificate.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthClientApplication._applicationId">
            <summary>
            ApplicationId for the child application
            </summary>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.GetApplicationInfo">
            <summary>
            Gets an <see cref="T:Microsoft.Health.ApplicationInfo"/> from the HealthVault server that
            describes the client application.
            </summary>
            
            <remarks>
            <para>This method makes a call to HealthVault to get the ApplicationInfo.
            If the application exists, then the ApplicationInfo is created and returned.</para>
            <para>If application does not exist, the method returns <b>null</b>.
            To create the application on the server, 
            call <see cref="M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess"/>.</para>
            </remarks>
            
            <returns>
            An <see cref="T:Microsoft.Health.ApplicationInfo"/> that describes the application,
            or <b>null</b> if the application does not exist on the server.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error. This exception does not indicate
            that the application does not exist on the server: the method returns <b>null</b>
            in that case and no exception is thrown.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl">
            <summary>
            Gets the URL of a web page that will direct the user to create the application.
            </summary>
            <remarks>
            Open this URL in a browser window to allow the user to create the application.
            By default, the client name will be set to the local machine name. 
            </remarks>
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl"/> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId"/> is <see cref="F:System.Guid.Empty"/> or
            the required application-specific certificate is not found.
            </exception>
            
            <returns>
            The URL of the application creation web page.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String)">
            <summary>
            Gets the URL of a web page that will direct the user to create the application.
            </summary>
            <remarks>
            Open this URL in a browser window to allow the user to create the application.
            </remarks>
            
            <param name="clientName">The client name to use.</param>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl"/> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId"/> is <see cref="F:System.Guid.Empty"/> or
            the required application-specific certificate is not found.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="clientName"/> is empty or <b>null</b>.
            </exception>
            
            <returns>
            The URL of the application creation web page.
            </returns>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.GetApplicationCreationUrl(System.String,System.String)">
            <summary>
            Gets the URL of a web page that will direct the user to create the application.
            </summary>
            <remarks>
            Open this URL in a browser window to allow the user to create the application.
            </remarks>
            
            <param name="clientName">The client name to use.</param>
            
            <param name="optionalQueryParameters">
            Optional parameters to be added to the creation URL:
            
            <ul>
                <li>ismra - the application can use multiple records for the same user at one time.</li>
                <li>extrecordid - record identifier.</li>
                <li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>
                <li>onopt# - A sequence of online optional authorization rule names
                            identifying which rules to present.  The sequence begins with 1.</li>
                <li>offopt# - A sequence of offline optional authorization rule names  
                            identifying which rules to present.  The sequence begins with 1.</li>
            </ul>
            </param>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl"/> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId"/> is <see cref="F:System.Guid.Empty"/> or
            the required application-specific certificate is not found.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="clientName"/> is empty or <b>null</b>.
            </exception>
            
            <returns>
            The URL of the application creation web page.
            </returns>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl">
            <summary>
            Gets the URL of a web page that will direct the user to authorize the application.
            </summary>
            <remarks>
            Open this URL in a browser window to allow the user to authorize the application.
            </remarks>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl"/> is <b>null</b>, 
            or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <returns>
            The URL of the application authorization web page.
            </returns>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.GetUserAuthorizationUrl(System.String)">
            <summary>
            Gets the URL of a web page that will direct the user to authorize the application, 
            including optional APPAUTH parameters.
            </summary>
            <remarks>
            Open this URL in a browser window to allow the user to authorize the application.
            </remarks>
            
            <param name="optionalQueryParameters">
            Optional parameters to be added to the authorization URL:
            
            <ul>
                <li>ismra - the application can use multiple records for the same user at one time.</li>
                <li>extrecordid - record identifier.</li>
                <li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>
                <li>onopt# - A sequence of online optional authorization rule names
                            identifying which rules to present.  The sequence begins with 1.</li>
                <li>offopt# - A sequence of offline optional authorization rule names  
                            identifying which rules to present.  The sequence begins with 1.</li>
            </ul>
            </param>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl"/> is <b>null</b>, 
            or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <returns>
            The URL of the application authorization web page.
            </returns>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess">
            <summary>
            Start the authorization process.
            </summary>
            
            <remarks>
            Starts the authorization process by opening an authorization page in the 
            user's default browser.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            authorization is complete.
            </remarks>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the authorization URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.StartUserAuthorizationProcess(System.String)">
            <summary>
            Start the authorization process with optional APPAUTH parameters.
            </summary>
            
            <remarks>
            Starts the authorization process by opening an authorization page in the 
            user's default browser with optional APPAUTH parameters.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            authorization is complete.
            </remarks>
            
            <param name="optionalQueryParameters">
            Optional parameters to be added to the authorization URL:
            
            <ul>
                <li>ismra - the application can use multiple records for the same user at one time.</li>
                <li>extrecordid - record identifier.</li>
                <li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>
                <li>onopt# - A sequence of online optional authorization rule names
                            identifying which rules to present.  The sequence begins with 1.</li>
                <li>offopt# - A sequence of offline optional authorization rule names  
                            identifying which rules to present.  The sequence begins with 1.</li>
            </ul>
            </param>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the uri.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess">
            <summary>
            Start the application creation process with a default application name.
            </summary>
            
            <remarks>
            Starts the application creation process by opening a URL in the 
            user's default browser.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            application creation is complete.
            The name of the child application is set to the local machine name.
            </remarks>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl"/> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.StartApplicationCreationProcess(System.String)">
            <summary>
            Start the application creation process with a specified application name.
            </summary>
            
            <remarks>
            Starts the application creation process by opening a URL in the 
            user's default browser.
            After this call, the application is responsible for waiting 
            until the authorization process is completed before continuing.  A typical 
            implementation will create a UI element that allows the user to indicate that
            application creation is complete.
            </remarks>
            
            <param name="clientName">
            The unique client name to use. The client name specifies the instance name
            of the application.
            </param>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The value of <see cref="P:Microsoft.Health.HealthClientApplication.ShellUrl"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl"/> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/> or 
            <see cref="P:Microsoft.Health.HealthClientApplication.MasterApplicationId"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="clientName"/> is empty or <b>null</b>.
            </exception>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.CreateAuthorizedConnection(System.Guid)">
            <summary>
            Creates an authorized client connection to the application.
            </summary>
            
            <param name="personId">
            ID of the person for the connection.
            </param>
            
            <exception ref="SecurityException">
            The required application-specific certificate is invalid.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="personId"/> parameter is empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The required application-specific certificate is not found,
            the value of <see cref="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl"/> is 
            <b>null</b>, or the value of <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationId"/>
            is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <returns>
            A <see cref="T:Microsoft.Health.HealthClientAuthorizedConnection"/> instance.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.DeleteCertificate">
            <summary>
            Deletes the certificate created as part of application creation
            </summary>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The required application-specific certificate is not found,
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.Finalize">
            <summary>
            Finalize method
            </summary>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.Dispose">
            <summary>
            Disposes the request.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.Dispose(System.Boolean)">
            <summary>
            Cleans up the cancel request trigger.
            </summary>
            
            <param name="disposing"></param>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.CreateApplication">
            <summary>
            Creates the application.
            </summary>
            
            <remarks>
            The caller should store the value of the ApplicationId property so it can re-use this 
            application. This method will lookup the certificate by application Id. If no 
            certificate is found, it creates one in the current user store.
            </remarks>
            
            <exception ref="CryptographicException">
            If the certificate cannot be created or could not be added to the store.
            </exception>
            ///
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.Connect">
            <summary>
            Create a connection to the application.
            </summary>
            
            <remarks>
            The ApplicationId must be set before calling this method.
            </remarks>
            
            <exception ref="SecurityException">
            The required application-specific certificate is not found.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The person Id is empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The application Id or the certificate, or the healthServiceUrl
            are incorrect.
            </exception>
            
            <returns>
            An HealthClientAuthorizedConnection instance
            </returns>
        </member>
        <member name="M:Microsoft.Health.HealthClientApplication.LaunchBrowser(System.Uri)">
            <summary>
            Launches the browser process with the specified Uri.
            </summary>
            
            <param name="uri">
            Uri to be launched.
            </param>
            
            <exception cref="T:System.ComponentModel.Win32Exception">
            There was an error opening the uri.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthClientApplication.ApplicationId">
            <summary>
            Gets the ID of the local client application.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthClientApplication.ShellUrl">
            <summary>
            Gets the URL of the HealthVault shell service.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthClientApplication.HealthServiceUrl">
            <summary>
            Gets the URL of the HealthVault platform service.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthClientApplication.MasterApplicationId">
            <summary>
            Gets the ID of the master application.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthClientApplication.ApplicationConnection">
            <summary>
            Gets an <see cref="P:Microsoft.Health.HealthClientApplication.ApplicationConnection"/> that represents the connection to HealthVault.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthClientApplication.Certificate">
            <summary>
            Gets the certificate associated with the application
            </summary>
        </member>
        <member name="T:Microsoft.Health.HealthClientAuthorizedConnection">
             <summary>
             Represents an authorized connection between a HealthVault client application
             and the HealthVault service.
             </summary>
            
             <remarks>
             HealthClientAuthorizedConnection is a connection used by a HealthVault client 
             application. The connection is authenticated using an
             application certificate in the user store, and does not require an authenticated user.
             The connection is only valid for <see cref="T:Microsoft.Health.HealthClientApplication"/> instances, and 
             each instance must be authorized using the HealthVault Shell service.
             </remarks>
             
        </member>
        <member name="T:Microsoft.Health.Web.OfflineWebApplicationConnection">
            <summary>
            Represents a connection for an application to HealthVault for 
            operations that are performed when a user is offline using the 
            permissions granted by the user to the application. 
            </summary>
            
            <remarks>
            A connection must be made to HealthVault to access the
            Web methods that the service exposes. This class does not maintain
            an open connection to the service.  It uses XML over HTTP to 
            to make requests and receive responses from the service. The connection
            just maintains the data necessary to make the request.
            <br/><br/>
            For operations that require the user to be online, use the 
            <see cref="T:Microsoft.Health.AuthenticatedConnection"/> class.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            class with the specified person identification.
            </summary>
            
            <param name="offlinePersonId">
            The unique identifier of the offline person who granted permissions 
            to the application to perform operations.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.#ctor(Microsoft.Health.Web.Authentication.WebApplicationCredential,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            class with the specified credential and person identification.
            </summary>
            
            <param name="credential">
            The HealthVault application credential used to authenticate 
            the connection.
            </param>
            
            <param name="offlinePersonId">
            The unique identifier of the offline person who granted permissions 
            to the application to perform operations.
            </param>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            If the web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.#ctor(System.Guid,System.String,System.Guid)">
            <summary>
            Creates an instance of the class for the specified application,
            and HealthVault URL
            </summary>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service. If an application does not add "/wildcat.ashx" at the end of 
            the URL, the constructor will add it automatically.
            </param>
            
            <param name="offlinePersonId">
            The unique identifier of the offline person who granted permissions 
            to the application to perform operations.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="healthServiceUrl"/> property is not properly 
            formatted.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.#ctor(System.Guid,System.Uri,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            class with the specified application, HealthVault service URL, and 
            person identification.
            </summary>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service. If an application does not add "/wildcat.ashx" at the end of 
            the URL, the constructor will add it automatically.
            </param>
            
            <param name="offlinePersonId">
            The unique identifier of the offline person who granted permissions 
            to the application to perform operations.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.#ctor(Microsoft.Health.Web.Authentication.WebApplicationCredential,System.Guid,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            class with the specified credential, application, string-formatted 
            HealthVault service URL, and person identification.
            </summary>
            
            <param name="credential">
            The HealthVault application credential used to authenticate
            the connection.
            </param>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service. If an application does not add "/wildcat.ashx" at the end of 
            the URL, the constructor will add it automatically.
            </param>
            
            <param name="offlinePersonId">
            The unique identifier of the offline person who granted permissions 
            to the application to perform operations.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="offlinePersonId"/> parameter is Guid.Empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="healthServiceUrl"/> parameter is not a properly 
            formatted URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.#ctor(Microsoft.Health.Web.Authentication.WebApplicationCredential,System.Guid,System.Uri,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            class with the specified credential, application, HealthVault 
            service URL, and person identification.
            </summary>
            
            <param name="credential">
            The HealthVault application credential used to authenticate the connection.
            </param>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service. If an application does not add "/wildcat.ashx" at the end of 
            the URL, the constructor will add it automatically.
            </param>
            
            <param name="offlinePersonId">
            The unique identifier of the offline person who granted permissions 
            to the application to perform operations.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="healthServiceUrl"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.Authenticate">
            <summary>
            Authenticates the application with HealthVault.
            </summary>
            
            <remarks>
            It is not necessary to explicitly call this method before calling
            any of the methods that access the service. Those methods will 
            call this method if the user has not already been authenticated. 
            This method is provided as a convenience to allow for separate 
            error handling for authorization errors.
            </remarks>
            
            <exception cref="T:System.Security.SecurityException">
            The caller does not have permission to connect to the requested
            URI or a URI that the request is redirected to.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The authorization URL specified to the constructor is not a 
            valid URI.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The authorization was not returned in the response from the server.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.GetAuthenticatedDataSection(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Derived classes generate connection-specific authenticated data
            from the contained credential.
            </summary>
            
            <param name="headerXml">
            The UTF8 encoded data to authenticate.
            </param>
            
            <param name="index">
            The starting index into the data.
            </param>
            
            <param name="count">
            The number of bytes from the start index to authenticate.
            </param>
            
            <returns>
            The data that was authenticated by the credential.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.ExecuteRequestWithRetry(Microsoft.Health.HealthServiceRequest)">
            <summary>
            Executes a request with support for reauthenticating the 
            <cref name="Credential"/> if HealthVault indicates
            that the token is expired.
            </summary>
            
            <param name="request">
            The authenticated request to make.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.ExecuteRequestForTransformWithRetry(Microsoft.Health.HealthServiceRequest,System.String)">
            <summary>
            Executes a request with support for reauthenticating the 
            <cref name="Credential"/> if HealthVault indicates
            that the token is expired.
            </summary>
            
            <param name="request">
            The authenticated request to make.
            </param>
            
            <param name="transform">
            The transform to apply the request result.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.GetAllApplicationSettings">
            <summary>
            Gets the application settings for the current application and person.
            </summary>
            
            <returns>
            A complete set of application settings including the XML, selected record ID, etc.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.GetApplicationSettings">
            <summary>
            Gets the application settings for the current application and
            person.
            </summary>
            
            <returns>
            The application settings XML.
            </returns>
            
            <remarks>
            This might be <b>null</b> if no application settings have been 
            stored for the application or user.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Web.OfflineWebApplicationConnection.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Sets the application settings for the current application and
            person.
            </summary>
            <param name="applicationSettings">
            The application settings xml.
            </param>
            
            <remarks>
            This may be <b>null</b> if no application settings have been stored
            for the application or user.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Web.OfflineWebApplicationConnection.OfflinePersonId">
            <summary>
            Gets or sets the unique identifier of the offline person who granted 
            permissions to the calling application to perform certain 
            operations.
            </summary>
            
            <value>
            A GUID representing the offline person.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.Web.OfflineWebApplicationConnection.AuthenticationToken">
            <summary>
            Gets the authorization token to be used in all requests for this user.
            </summary>
            
            <value>
            A base64 encoded string that represents the person ID, application 
            ID, expiration, and group membership of the person and application 
            requesting access to HealthVault.
            </value>
            
            <remarks>
            The authorization token can be retrieved using the 
            <see cref="M:Microsoft.Health.Authentication.Credential.CreateAuthenticatedSessionToken(Microsoft.Health.HealthServiceConnection,System.Guid)"/> web method from 
            HealthVault or by calling the HealthVault Shell authentication web page.
            <br/><br/>
            Generally, the value is obtained using the <see cref="M:Microsoft.Health.Web.OfflineWebApplicationConnection.Authenticate"/> method.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Web.OfflineWebApplicationConnection.Credential">
            <summary>
            Gets or sets the application credential that is used to access 
            HealthVault.
            </summary>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientAuthorizedConnection.#ctor">
            <summary>
            Creates an instance of HealthClientAuthorizedConnection using
            connection information stored in a configuration file.
            </summary>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientAuthorizedConnection.#ctor(Microsoft.Health.Web.Authentication.WebApplicationCredential)">
            <summary>
            Creates an instance of HealthClientAuthorizedConnection
            using a specified <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/> and
            connection information stored in a configuration file..
            </summary>
            
            <param name="webApplicationCredential">
            Credential for authenticating the application.
            </param>
            
            <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientAuthorizedConnection.#ctor(Microsoft.Health.Web.Authentication.WebApplicationCredential,System.Guid,System.Uri)">
            <summary>
            Creates a new instance of HealthClientAuthorizedConnection
            using a specified <see cref="T:Microsoft.Health.Web.Authentication.WebApplicationCredential"/>, application ID, and health service URL.
            </summary>
            
            <param name="webApplicationCredential">
            Credential for authenticating the application.
            </param>
            
            <param name="applicationId">
            The ID of the client application.
            </param>
            
            <param name="healthServiceUri">
            The URL of the HealthVault platform service.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="healthServiceUrl"/> parameter is not a properly 
            formatted URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthClientAuthorizedConnection.#ctor(Microsoft.Health.Web.Authentication.WebApplicationCredential,System.Guid,System.Uri,System.Guid)">
            <summary>
            Creates a new instance of HealthClientAuthorizedConnection
            with a WebApplicationCredential, an applicationID, 
            healthServiceUri and personId
            </summary>
            
            <param name="webApplicationCredential">
            Credential for authenticating the application
            </param>
            
            <param name="applicationId">
            The ID of the client application.
            </param>
            
            <param name="healthServiceUri">
            The URL of the HealthVault platform service.
            </param>
            
            <param name="personId">
            The ID of the person for whom the authorized connection is created.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="healthServiceUrl"/> parameter is not a properly 
            formatted URL.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordAccessor">
            <summary>
            Represents the API set used to access a health record for an individual. 
            </summary>
            
            <remarks>
            A HealthRecordAccessor represents a person's view of a health record.
            This view can vary based upon the access rights the person has to the
            record. More than one person might have access to the same record but have
            different views. For instance, a husband might have a HealthRecordAccessor
            instance for himself and another for his wife's health record to which 
            she granted him access.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an instance of a HealthRecordAccessor object using
            the specified XML.
            </summary>
            
            <param name="connection">
            A connection for the current user.
            </param>
            
            <param name="navigator">
            The XML containing the record information.
            </param>
            
            <returns>
            A new instance of a HealthRecordAccessor object containing the
            record information.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> or <paramref name="navigator"/> 
            parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Parses HealthRecordAccessor member data from the specified XPathNavigator.
            </summary>
            
            <param name="navigator">
            The XML containing the record information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetXml">
            <summary>
            Retrieves the XML representation of the <see cref="T:Microsoft.Health.HealthRecordAccessor"/>.
            </summary>
            
            <returns>
            A string containing the XML representation of the 
            <see cref="T:Microsoft.Health.HealthRecordAccessor"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.SendMessageToCustodiansFromApplication(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an insecure message originating from the application 
            to custodians of the health record.
            </summary>
            
            <param name="addressMustBeValidated">
            If true, HealthVault will only send the message to custodians with 
            validated e-mail addresses. If false, the message will
            be sent even if the custodians' addresses have not been validated.
            </param>
            
            <param name="senderMailboxName">
            An application specified mailbox name that's sending the message.
            The mailbox name is appended to the application's domain name to 
            form the From email address of the message. This parameter should
            only contain the characters before the @ symbol of the email 
            address.
            </param>
            
            <param name="senderDisplayName">
            The message sender's display name.
            </param>
            
            <param name="subject">
            The subject of the message.
            </param>
            
            <param name="textBody">
            The text body of the message.
            </param>
            
            <param name="htmlBody">
            The HTML body of the message.
            </param>
            
            <remarks>
            If both the <paramref name="textBody"/> and 
            <paramref name="htmlBody"/> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            
            If the domain name of the application has not been previously 
            set (usually through app registration), this method will throw 
            a <see cref="T:Microsoft.Health.HealthServiceException"/>.      
            
            The calling application and the person through which authorization to the 
            record was obtained must be authorized for the record. 
            The person must be either authenticated, or if the person is offline,
            their person Id specified as the offline person Id.
            See <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> 
            for more information.
            </remarks>
            
            <exception cref="T:System.ArgumentException"> 
            if <paramref name="senderMailboxName"/> is null or empty,
            -or-
            if <paramref name="senderDisplayName"/> is null or empty,
            -or-
            if <paramref name="subject"/> is null or empty,
            -or-
            if <paramref name="textBody"/> and <paramref name="htmlBody"/>
            are both null or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If the server returned a failure when making the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.#ctor(Microsoft.Health.ApplicationConnection,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordAccessor"/>
            class. 
            </summary>
            
            <param name="connection">
            An instance of a connection to which the record 
            operations will be directed.
            </param>
            
            <param name="id">
            The unique identifier for the record.
            </param>
            
            <remarks>
            This constructor creates a view of a personal health record.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> parameter is Guid.Empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.#ctor(Microsoft.Health.ApplicationConnection)">
            <summary>
            Constructs a HealthRecordAccessor for deserialization purposes.
            </summary>
            
            <param name="connection">
            An instance of a connection to which the record 
            operations will be directed.
            </param>
            
            <remarks>
            This constructor is useful only if ParseXml is called.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.CreateSearcher">
            <summary>
            Creates a new HealthRecordSearcher for this record.
            </summary>
            
            <returns>
            A HealthRecordSearcher that searches for items associated
            with this record.
            </returns>
            
            <remarks>
            You can also call the <see cref="T:Microsoft.Health.HealthRecordSearcher"/> constructor 
            directly and pass in a reference to this 
            <see cref="T:Microsoft.Health.HealthRecordAccessor"/>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.CreateSearcher(System.Guid[])">
             <summary>
             Creates a new HealthRecordSearcher for a list of specific types.
             </summary>
             
             <returns>
             A <see cref="T:Microsoft.Health.HealthRecordSearcher"/> that searches for items with specific type IDs
             within this record.
             </returns>
             
             <remarks>
             The method adds a filter to the <see cref="T:Microsoft.Health.HealthRecordSearcher"/> that only returns
             items of the specified type IDs. That filter may be accessed through the
             returned searcher using searcher.Filters[0].
             
             You can also call the <see cref="T:Microsoft.Health.HealthRecordSearcher"/> constructor 
             directly and pass in a reference to this 
             <see cref="T:Microsoft.Health.HealthRecordAccessor"/>.
             </remarks>
             
             <param name="typeIds">
             A list of unique type ids to filter on.
             </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid,Microsoft.Health.HealthRecordItemSections)">
            <summary>
            Gets the health record item specified by its ID.
            </summary>
            
            <param name="itemId">
            The ID of the health record item to retrieve.
            </param>
            
            <param name="sections">
            The data sections of the health record item to retrieve.
            </param>
            
            <returns>
            A <see cref="T:Microsoft.Health.HealthRecordItem"/> with the specified data sections 
            filled out.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetItem(System.Guid)">
            <summary>
            Gets the health record item specified by its ID.
            </summary>
            
            <param name="itemId">
            The ID of the health record item to retrieve.
            </param>
            
            <returns>
            A <see cref="T:Microsoft.Health.HealthRecordItem"/> with the default data sections (Core and XML) 
            filled out.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordItemSections)">
            <summary>
            Gets the health record items related to this record filtered on the
            specified type.
            </summary>
            
            <param name="typeId">
            A unique identifier for the type of health record item to filter 
            on.
            </param>
            
            <param name="sections">
            The data sections of the health record item to retrieve.
            </param>
            
            <returns>
            A collection of the health record items related to this record
            that match the specified type identifier.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid,Microsoft.Health.HealthRecordView)">
            <summary>
            Gets the health record items related to this record filtered on the
            specified type.
            </summary>
            
            <param name="typeId">
            A unique identifier for the type of health record item to filter 
            on.
            </param>
            
            <param name="view">
            The view to use when retrieving the data.
            </param>
            
            <returns>
            A collection of the health record items related to this record
            that match the specified type identifier.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetItemsByType(System.Guid)">
            <summary>
            Gets the health record items related to this record filtered on the
            specified type.
            </summary>
            
            <param name="typeId">
            A unique identifier for the type of health record item to filter 
            on.
            </param>
            
            <returns>
            A collection of the health record items related to this record
            that match the specified type identifier.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)">
            <summary>
            Creates a new health record item associated with this record in the 
            HealthVault service.
            </summary>
            
            <param name="item">
            The health record item to be created in the HealthVault service.
            </param>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The HealthRecordItem supplied was null.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.NewItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})">
            <summary>
            Creates new health record items associated with the record.
            </summary>
            
            <param name="items">
            The health record items from which to create new instances.
            </param>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault service returned an error. 
            The exception's Error property will contain the index of the
            item on which the failure occurred in the ErrorInfo property. If any failures occur, 
            no items will have been created.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            At least one HealthRecordItem in the supplied list was null.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.UpdateItem(Microsoft.Health.HealthRecordItem)">
             <summary>
             Updates the specified health record item.
             </summary>
             
             <param name="item">
             The health record item to be updated.
             </param>
             
             <remarks>
             Only new items are updated with the appropriate unique identifier. 
             All other sections must be updated manually.
             <br/><br/>
             This method accesses the HealthVault service across the network.
             </remarks>
             
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="item"/> parameter is <b>null</b>.
             </exception>
             
             <exception cref="T:System.ArgumentException">
             The <paramref name="item"/> parameter does not have an ID.
             </exception>
            
             <exception cref="T:Microsoft.Health.HealthServiceException">
             The HealthVault service returned an error.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.UpdateItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})">
             <summary>
             Updates the specified health record items in one batch call to 
             the service.
             </summary>
             
             <param name="itemsToUpdate">
             The health record items to be updated.
             </param>
             
             <remarks>
             Only new items are updated with the appropriate unique identifier. 
             All other sections must be updated manually.
             <br/><br/>
             This method accesses the HealthVault service across the network.
             </remarks>
             
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="itemsToUpdate"/> parameter is <b>null</b>.
             </exception>
             
             <exception cref="T:System.ArgumentException">
             The <paramref name="itemsToUpdate"/> contains a <b>null</b> member or
             a <see cref="T:Microsoft.Health.HealthRecordItem"/> instance that does not have an ID.
             </exception>
            
             <exception cref="T:Microsoft.Health.HealthServiceException">
             The HealthVault service returned an error.
             The exception's Error property will contain the index of the
             item on which the failure occurred in the ErrorInfo property. If any failures occur, 
             no items will have been updated.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetThingIdXPathExpression(System.Xml.XPath.XPathNavigator)">
            <summary>
            Returns the XPathExpression for the ThingId from the supplied XPathNavigator
            </summary>
            
            <param name="infoNav"></param>
            
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItem)">
            <summary>
            Marks the specified health record item as deleted.
            </summary>
            
            <param name="item">
            The health record item to remove.
            </param>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            <br/><br/>
            Health record items are never completely deleted. Instead, they 
            are marked as deleted and are ignored for most normal operations. 
            Items can be undeleted by contacting customer service.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="item"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            There are errors that remove the health record item from 
            the server.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})">
            <summary>
            Marks the specified health record item as deleted.
            </summary>
            
            <param name="itemsToRemove">
            A list of the health record items to remove.
            </param>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            <br/><br/>
            Health record items are never completely deleted. They are marked
            as deleted and are ignored for most normal operations. Items can 
            be undeleted by contacting customer service.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="itemsToRemove"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            Errors removed the health record items from the server.
            The exception's Error property will contain the index of the
            item on which the failure occurred in the ErrorInfo property. If any failures occur, 
            no items will have been removed.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.RemoveItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemKey})">
            <summary>
            Marks the specified health record item as deleted.
            </summary>
            
            <param name="itemsToRemove">
            The unique item identifiers of the items to remove.
            </param>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            <br/><br/>
            Health record items are never completely deleted. They are marked 
            as deleted and are ignored for most normal operations. Items can 
            be undeleted by contacting customer service.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="itemToRemove"/> parameter is Guid.Empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            Errors removed the health record items from the server.
            The exception's Error property will contain the index of the
            item on which the failure occurred in the ErrorInfo property. If any failures occur, 
            no items will have been removed.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.RemoveItem(Microsoft.Health.HealthRecordItemKey)">
            
             <summary>
             Marks the specified health record item as deleted.
             </summary>
             
             <param name="itemId">
             The unique item identifier to remove.
             </param>
             
             <remarks>
             This method accesses the HealthVault service across the network.
             <br/><br/>
             Health record items are never completely deleted. They are marked 
             as deleted and are ignored for most normal operations. Items can 
             be undeleted by contacting customer service.
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             The <paramref name="itemToRemove"/> parameter is Guid.Empty.
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             Errors removed the health record items from the server.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.RemoveApplicationAuthorization">
            <summary>
            Releases the authorization of the application on the health record.
            </summary>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            Errors during the authorization release.
            </exception>
            
            <remarks>
            Once the application releases the authorization to the health record, 
            calling any methods of this <see cref="T:Microsoft.Health.HealthRecordAccessor"/> will result 
            in a <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/>."
            </remarks>
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItemTypeDefinition})">
            <summary>
            Returns a list of <see cref="T:Microsoft.Health.HealthRecordItemTypePermission"/> 
            objects which represent the permissions that the current
            authenticated person has for the HealthRecordItemTypes specified
            in the current health record when using the current application.
            </summary>
            
            <param name="healthRecordItemTypes">
            A collection of <see cref="T:Microsoft.Health.HealthRecordItemTypeDefinition"/> 
            representing the health record item types 
            for which the permissions are being queried. 
            </param>
            
            <returns>
            A list of <see cref="T:Microsoft.Health.HealthRecordItemTypePermission"/> 
            objects which represent the permissions that the current
            authenticated person has for the HealthRecordItemTypes specified
            in the current health record when using the current application.
            </returns>
            
            <remarks> 
            If the list of health record item types is empty, an empty list is 
            returned. If for a health record item type, the person has 
            neither online access nor offline access permissions, 
            HealthRecordItemTypePermission object is not returned for that
            health record item type. 
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.QueryPermissionsByTypes(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Gets the permissions which the authenticated person 
            has when using the calling application for the specified item types
            in this  record.
            </summary>
            
            <param name="healthRecordItemTypeIds">
            A collection of unique identifiers to identify the health record  
            item types, for which the permissions are being queried. 
            </param>
            
            <returns>
            Returns a dictionary of <see cref="T:Microsoft.Health.HealthRecordItemTypePermission"/> 
            with health record item types as the keys. 
            </returns>
            
            <remarks> 
            If the list of health record item types is empty, an empty dictionary is 
            returned. If for a health record item type, the person has 
            neither online access nor offline access permissions, 
            <b> null </b> will be returned for that type in the dictionary.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="healthRecordItemTypeIds"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is an exception during executing the request to HealthVault. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.QueryPermissions(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Gets the permissions which the authenticated person 
            has when using the calling application for the specified item types 
            in this health record.
            </summary>
            
            <param name="healthRecordItemTypeIds">
            A collection of uniqueidentifiers to identify the health record  
            item types, for which the permissions are being queried. 
            </param>
            
            <returns>
            A list of <see cref="T:Microsoft.Health.HealthRecordItemTypePermission"/> 
            objects which represent the permissions that the current
            authenticated person has for the HealthRecordItemTypes specified
            in the current health record when using the current application.
            </returns>
            
            <remarks> 
            If the list of health record item types is empty, an empty list is 
            returned. If for a health record item type, the person has 
            neither online access nor offline access permissions, 
            HealthRecordItemTypePermission object is not returned for that
            health record item type. 
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="healthRecordItemTypeIds"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If there is an exception during executing the request to HealthVault. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetPeopleForRecord">
            <summary>
            Gets information about the people that have been authorized to the HealthVault record
            or have been invited to share the record.
            </summary>
            
            <returns>
            A collection containing <see cref="T:Microsoft.Health.ActiveRecordAuthorization"/> instances for those
            people that have access to the HealthVault record, or 
            <see cref="T:Microsoft.Health.InactiveRecordAuthorization"/> for those people that have been invited to
            share the record. The <see cref="P:Microsoft.Health.RecordAuthorization.RecordAuthorizationState"/> 
            property can be used to determine if it is an active or inactive authorization.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs while contacting the HealthVault service.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAccessor.GetValidGroupMembership(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Gets valid group memberships for a record.
            </summary>
            
            <remarks>
            Group membership thing types allow an application to signify that the
            record belongs to an application defined group.  A record in the group may be 
            eligible for special programs offered by other applications, for example.  
            Applications then need a away to query for valid group memberships.
            <br/>
            Valid group memberships are those memberships which are not expired, and whose
            last updating application is authorized by the the last updating person to 
            read and delete the membership.
            </remarks>
            
            <param name="applicationIds">
            A collection of unique application identifiers for which to 
            search for group memberships.  For a null or empty application identifier 
            list, return all valid group memberships for the record.  Otherwise, 
            return only those group memberships last updated by one of the 
            supplied application identifiers.
            </param>
            
            <returns>
            A List of HealthRecordItems representing the valid group memberships.
            </returns>
            <exception cref="T:Microsoft.Health.HealthServiceException">
            If an error occurs while contacting the HealthVault service.
            </exception>
        </member>
        <member name="P:Microsoft.Health.HealthRecordAccessor.Id">
            <summary>
            Gets the record identifier.
            </summary>
            
            <value>
            A globally unique identifier (GUID) for the record.
            </value>
            
            <remarks>
            The record identifier is issued when the record is created. Creating
            the account automatically creates a self record as well.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordAccessor.Connection">
            <summary>
            Gets a reference to the HealthVault service that
            created this <see cref="T:Microsoft.Health.HealthRecordAccessor"/>.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordAuthorizationNotPossible">
            <summary>
            The exception representing an error while trying to log a user on to an application without
            a health record that meets the minimum authorization requirements for the application.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceException">
            <summary>
            Represents the base class for all HealthVault exceptions 
            thrown by the SDK.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.#ctor(Microsoft.Health.HealthServiceStatusCode)">
             <summary>
             Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceException"/> 
             class with the specified error (status) code.
             </summary>
             
             <remarks>
             This constructor is internal to the SDK. Application developers 
             using the SDK should catch instances of this exception instead of 
             throwing new exceptions of this type.
             </remarks>
             
             <param name="errorCode">
             The status code representing the error that occurred.
            </param>
             
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.#ctor(Microsoft.Health.HealthServiceStatusCode,Microsoft.Health.HealthServiceResponseError)">
             <summary>
             Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceException"/> 
             class with the specified error (status) code and error information.
             </summary>
             
             <remarks>
             This constructor is internal to the SDK. Application developers 
             using the SDK should catch instances of this exception instead of 
             throwing new exceptions of this type.
             </remarks>
             
             <param name="errorCode">
             The status code representing the error.
            </param>
             
             <param name="error">
             Information about an error that occurred while processing
             the request.
             </param>
             
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.#ctor(System.Int32,Microsoft.Health.HealthServiceResponseError)">
             <summary>
             Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceException"/> 
             class with the specified error identifier and error information.
             </summary>
             
             <remarks>
             This constructor is internal to the SDK. Application developers 
             using the SDK should catch instances of this exception instead of 
             throwing new exceptions of this type.
             </remarks>
             
             <param name="errorCodeId">
             An integer representing the identifier of the status code 
             of the error.
            </param>
             
             <param name="error">
             Information about an error that occurred while processing
             the request.
             </param>
             
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceException"/> 
            class having the specified error message.
            </summary>
            
            <param name="message">
            A string representing the error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceException"/> 
            class having the specified error message and inner exception.
            </summary>
            
            <param name="message">
            A string representing the error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceException"/> 
            class with the specified serialization information.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceException.ToString">
            <summary>
            Retrieves the string representing the 
            <see cref="T:Microsoft.Health.HealthServiceException"/> object.
            </summary>
            
            <returns> 
            A string representing the contents of the 
            <see cref="T:Microsoft.Health.HealthServiceException"/> object.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceException.ErrorCode">
            <summary>
            Gets the status code returned by HealthVault to indicate the type
            of error that causes this exception.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceException.ErrorCodeId">
            <summary>
            Gets the identifier of the status code in the HealthVault response.
            </summary>
            
            <value>
            An integer representing the identifier.
            </value>
            
            <remarks>
            This property is useful when the SDK is out of sync with the 
            HealthVault status code set. The actual integer value of the 
            status code can be looked up for further investigation.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceException.Error">
            <summary>
            Gets the information about an error that occurred while processing
            the request.  
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthServiceResponseError"/> object representing the
            error information.
            </value>
            
            <remarks>
            This value can be <b>null</b> for those exceptions that 
            occurred in the SDK rather than in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationNotPossible.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationNotPossible"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationNotPossible.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationNotPossible"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationNotPossible.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationNotPossible"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationNotPossible.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationNotPossible"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationNotPossible.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordAuthorizationRequiredException">
            <summary>
            The exception representing an error while trying to log a user on to an application without
            a health record being authorized for that application.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationRequiredException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationRequiredException"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationRequiredException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationRequiredException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationRequiredException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordAuthorizationRequiredException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordAuthorizationRequiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordAuthorizationStatus">
             <summary>
             The record's current authorization status.
             </summary>
             <remarks>
             The members of HealthRecordAuthorizationStatus represent the current
             status of the application's authorization to the record.  Any status
             other than NoActionRequired, requires user intervention in HealthVault
             before the application may successfully access the record.
             </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordAuthorizationStatus.Unknown">
            <summary>
            An unknown state was returned from the server.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordAuthorizationStatus.NoActionRequired">
            <summary>
            The record should be accessible to the application. 
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordAuthorizationStatus.AuthorizationRequired">
            <summary>
             The user must authorize this application.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordAuthorizationStatus.ReauthorizationNotPossible">
            <summary>
            It is not possible to reauthorize this application.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordAuthorizationStatus.ReauthorizationRequired">
            <summary>
            The user must reauthorize this application.
            </summary>
        </member>
        <member name="T:Microsoft.Health.HealthRecordExporter">
            <summary>
            Exports HealthVault record items.
            </summary>
            
            <remarks>
            This class will return results in HealthVault XML format. Derived classes should override...
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordExporter.#ctor(Microsoft.Health.HealthRecordInfo)">
            <summary>
            Constructs an instance of a HealthRecordExporter for the specified
            health record.
            </summary>
            
            <param name="record">
            The health record to export data from.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="record"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordExporter.#ctor(Microsoft.Health.HealthRecordInfo,System.Xml.Xsl.XslCompiledTransform)">
            <summary>
            Constructs an instance of a HealthRecordExporter for the specified
            health record and the specified transform.
            </summary>
            
            <param name="record">
            The health record to export data from.
            </param>
            
            <param name="transform">
            The transform used to convert HealthVault XML to the destination format.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="record"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordExporter.#ctor(Microsoft.Health.HealthRecordInfo,System.String)">
            <summary>
            Constructs an instance of a HealthRecordExporter for the specified
            health record and the specified transform tag.
            </summary>
            
            <param name="record">
            The health record to export data from.
            </param>
            
            <param name="transformTag">
            The name of the transform to be retrieved from HealthVault to convert 
            the HealthVault XML to the destination format. For example, "toccr" will
            convert the data to the Continuity of Care Record XML format.
            </param>
            
            <remarks>
            Note, this constructor makes a call to HealthVault to retrieve the specified
            data transform. The web request may cause a variety of WebExceptions to be thrown.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="record"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="transformTag"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.Net.WebException">
            If the transform with the specified <paramref name="transformTag"/>
            could not be found.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordExporter.ExportItems">
            <summary>
            </summary>
            
            <returns>
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            If the filters specified do not reduce the amount of data being retrieved from the
            record, this method could take a significant amount of time as data gets paged into
            memory from HealthVault.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The response from the server was anything but 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.Ok"/>.
            -or-
            <see cref="P:Microsoft.Health.HealthRecordSearcher.Filters"/> is empty
            or contains invalid filters.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordExporter.TransformItemXml(System.String)">
            <summary>
            
            </summary>
            <param name="healthRecordItemsXml"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Health.HealthRecordExporter.AddStandardParametersToTransformArguments">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Health.HealthRecordExporter.Record">
            <summary>
            Gets the health record that is being searched for health record items.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthRecordInfo"/> representing the record.
            </value>
            
            <remarks>
            The authenticated person must have 
            <see cref="F:Microsoft.Health.HealthRecordItemPermissions.Read"/> access rights to the
            health record to get results from the query.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordExporter.Filters">
            <summary>
            Gets the filters associated with the search.
            </summary>
            
            <remarks>
            To add a search filter, call the Add method of the
            returned collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordExporter.Transform">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordExporter.TransformArgumentList">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordExporter.ClientFilters">
            <summary>
            Client side filtering of the results of the HealthVault search for items.
            </summary>
            
            <remarks>
            If more than one handler is added to the filter, the item will only be deemed to
            pass the filter if all handlers return true.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordClientFilterHandler">
            <summary>
            Defines the method signature for client side filtering of HealthRecordItems.
            </summary>
            
            <param name="item">
            The <see cref="T:Microsoft.Health.HealthRecordItem"/> to perform the filter test on.
            </param>
            
            <returns>
            True if the <paramref name="item"/> passes the filter.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordFilter">
            <summary>
            Defines a filter for use with <see cref="T:Microsoft.Health.HealthRecordSearcher"/>
            searches.
            </summary>
            
            <remarks>
            This class generates the XML for a single filter group for querying 
            health record items with the "GetThings" method.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordFilter"/> 
            class using default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordFilter"/> 
            class with the specified name.
            </summary>
            
            <param name="name">
            The name of the filter.
            </param>
            
            <remarks>
            The name is used to distinguish results matching this filter as
            opposed to results matching other filters when multiple filters 
            are applied to the same search.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordFilter"/> 
            class with the specified maximum number of items to return.
            </summary>
            
            <param name="maxItemsReturned">
            The maximum number of items to return that match the filter.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="maxItemsReturned"/> parameter is negative.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordFilter"/> 
            class with the specified name and maximum number of items to return.
            </summary>
            
            <param name="name">
            The name of the filter.
            </param>
            
            <param name="maxItemsReturned">
            The maximum number of items to return that match the filter.
            </param>
            
            <remarks>
            The name is used to distinguish results matching this filter as
            opposed to results matching other filters when multiple filters 
            are applied to the same search.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="maxItemsReturned"/> parameter is negative.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.#ctor(System.Guid[])">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordFilter"/> 
            class with the specified unique item type identifiers as filters.
            </summary>
            
            <param name="typeIds">
            The unique item type identifiers limiting the scope of the search to
            only the specified item types.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.ThrowIfNotValid">
            <summary>
            Checks whether at least one property is set.
            </summary>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The filter does not have at least one property set or both ItemIds
            and ItemKeys are specified.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.ToString">
            <summary>
            Gets a string representation of the instance.
            </summary>
            
            <returns>
            The XML that is used as the group portion of the
            XML request for a "GetThings" method call.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordFilter.AddFilterXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML for the filter group which is used in the
            "GetThings" request.
            </summary>
            
            <param name="writer">
            The Xml writer to write the filter group XML to.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.Name">
            <summary>
            Gets or sets the name of the filter.
            </summary>
            
            <remarks>
            The name is used to distinguish results matching this filter as
            opposed to results matching other filters when multiple filters 
            are applied to the same search.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.MaxItemsReturned">
            <summary>
            Gets or sets the maximum number of health record items to return.
            </summary>
            
            <remarks>
            The default value returns all items that match the filter.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> is set to less than zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.MaxFullItemsReturnedPerRequest">
            <summary>
            Gets or sets the maximum number of full health record items returned per request to
            HealthVault.
            </summary>
            
            <remarks>
            By default HealthVault will only return a certain number of "full" health record items
            for any query. It then returns the "keys" for the remaining items that matched the
            query which can then be queried for by ID. <see cref="T:Microsoft.Health.HealthRecordItemCollection"/>
            automatically manages this paging for you. However, if you want further control over
            the count of full items retrieved on each request, 
            <see cref="P:Microsoft.Health.HealthRecordFilter.MaxFullItemsReturnedPerRequest"/> can be set to optimize for smaller sets
            of data. For example, let's say the data being retrieved is being displayed in a
            GridView and the results are shown 10 items per page.  Rather than get the default
            number of full things, you can request 10 full items per request.  Then only if the
            user clicks to the second page would you need to get the next 10 items.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> is set to less than zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.View">
            <summary>
            Gets or sets the view for the filter group.
            </summary>
            
            <remarks>
            The default view retrieves the "Core" and data
            sections ("Xml").
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.ItemIds">
            <summary>
            Gets or sets the ids identifying health record items for 
            the search filter.
            </summary>
            
            <remarks>
            Each specified ID is AND'd with any other filter parameter. The 
            filter limits the search to the specified health record items.
            It is illegal to specify both ItemIds and ItemKeys in a single
            filter.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.ItemKeys">
            <summary>
            Gets or sets the keys uniquely identifying health record items for 
            the search filter.
            </summary>
            
            <remarks>
            Each specified ItemKey is AND'd with any other filter parameter. The 
            filter limits the search to the specified health record items.
            It is illegal to specify more than one of ItemIds, ClientItemIds or ItemKeys in a 
            single filter.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.ClientItemIds">
            <summary>
            Gets or sets the client assigned IDs identifying health record items for 
            the search filter.
            </summary>
            
            <remarks>
            Each specified ID is AND'd with any other filter parameter. The 
            filter limits the search to the specified health record items.
            It is illegal to specify more than one of ItemIds, ClientItemIds or ItemKeys in a 
            single filter.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.TypeIds">
            <summary>
            Gets a collection of the unique item type identifiers to search
            for.
            </summary>
            
            <remarks>
            Each health record item is associated with a type through a
            type identifier. If set, these values are combined in an OR 
            operation. The group is then combined in an AND operation with 
            any other filter value in the search for matching health record 
            items. This AND operation excludes ItemId as a filter value, 
            because ItemId results are obtained by an OR operation.
            To add a type ID, use the Add method of the returned collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.States">
            <summary>
            Gets or sets a set of flags representing the health record item  
            states to search for.
            </summary>
            
            <value>
            The set of flags. If not specified, health record items with state 
            <see cref="F:Microsoft.Health.HealthRecordItemState.Active"/>  
            are returned.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.CurrentVersionOnly">
            <summary>
            Gets or sets a value indicating whether to return only the flag 
            specifying the current versions of the health record items that 
            satisfy the filter restrictions. 
            </summary>
            
            <value>
            <b>true</b> to return only current versions of health record items;
            <b>false</b> to return all versions of the health record items that 
            satisfy the filter restrictions. 
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.UpdatedDateMin">
            <summary>
            Gets or sets the minimum date of an updated item to return.
            </summary>
            
            <value>
            The DateTime in UTC of the minimum date of an updated item to
            return.
            </value>
            
            <remarks>
            If this property is not set, DateTime.MaxValue is returned.
            <br/><br/>
            The application is responsible for converting from local time to 
            UTC, if applicable.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.UpdatedDateMax">
            <summary>
            Gets or sets the maximum date of a returned updated item to return.
            </summary>
            
            <value>
            The DateTime in UTC of the maximum date of an updated item 
            to return.
            </value>
            
            <remarks>
            If this property is not set, DateTime.MinValue is returned.
            <br/><br/>
            The application is responsible for converting from local time to 
            UTC, if applicable.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.UpdatedPerson">
            <summary>
            Gets or sets the search filter to filter on the person who
            last updated the health record item.
            </summary>
            
            <remarks>
            If the property is not set, Guid.Empty is returned.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.UpdatedApplication">
            <summary>
            Gets or sets the search filter to filter on the application that
            last updated the health record item.
            </summary>
            
            <remarks>
            If this property is not set, Guid.Empty is returned.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.CreatedDateMin">
            <summary>
            Gets or sets the minimum date the item was created.
            </summary>
            
            <value>
            The DateTime in UTC of the minimum date a item was created.
            </value>
            
            <remarks>
            If this property has not been set, DateTime.MaxValue is returned.
            <br/><br/>
            The application is responsible for converting from local time to 
            UTC, if applicable.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.CreatedDateMax">
            <summary>
            Gets or sets the maximum date the item was created.
            </summary>
            
            <value>
            The DateTime in UTC of the maximum date a item was created.
            </value>
            
            <remarks>
            If this property has not been set, DateTime.MinValue is returned.
            <br/><br/>
            The application is responsible for converting from local time to 
            UTC  if applicable.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.CreatedPerson">
            <summary>
            Gets or sets the search filter to filter on the person who
            created the health record item.
            </summary>
            
            <remarks>
            If this property has not been set, Guid.Empty is returned.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.CreatedApplication">
            <summary>
            Gets or sets the search filter to filter on the application that
            created the health record item.
            </summary>
            
            <remarks>
            If this property has not been set, Guid.Empty is returned.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.EffectiveDateMin">
            <summary>
            Gets or sets the minimum date the item pertains to.
            </summary>
            
            <value>
            The DateTime in UTC of the minimum effective date of a item.
            </value>
            
            <remarks>
            If this property has not been set, DateTime.MaxValue is returned.
            <br/><br/>
            The application is responsible for converting from local time to 
            UTC, if applicable.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.EffectiveDateMax">
            <summary>
            Gets or sets the maximum date the item was pertains to.
            </summary>
            
            <value>
            The DateTime in UTC of the maximum effective date of a item.
            </value>
            
            <remarks>
            If this property has not been set, DateTime.MinValue is returned.
            <br/><br/>
            The application is responsible for converting from local time to 
            UTC, if applicable.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordFilter.XPath">
             <summary>
             Gets or sets the search filter to filter on the existence
             of data in an XML (structured data) item.
             </summary>
             
             <value>
             A string representing the filter.
             </value>
             <remarks>
             The HealthVault XPath Explorer can be used to create these XPath queries.
            
             If this property has not been set, <b>null</b> is returned.
             <br/><br/>
             This can only be an existence check. It cannot be used for 
             calculations or to return only specific values.
             </remarks>
             
        </member>
        <member name="T:Microsoft.Health.HealthRecordInfo">
            <summary>
            Represents the APIs and information about a health record for an individual.
            </summary>
            
            <remarks>
            A HealthRecordInfo represents a person's view of a health record and 
            information about the health record such as the state, name, date of
            expiration, and so on. This view may vary based upon the access rights the 
            person has to the record and multiple people may have access to the 
            same record but have different views. For instance, a husband may 
            have a HealthRecordInfo instance for himself and another for his 
            wife's health record which she shared with him.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.IMarshallable">
            <summary>
            Defines the HealthVault interface used to perform versioned 
            serialization of objects.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.IMarshallable.Marshal(System.Xml.XmlWriter)">
            <summary>
            Serializes the object.
            </summary>
            
            <param name="writer">
            The XmlWriter that receives the object data.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.IMarshallable.Unmarshal(System.Xml.XmlReader)">
            <summary>
            Deserializes the object.
            </summary>
            
            <exception cref="T:Microsoft.Health.IncompatibleVersionException">
            The serialized data version cannot be deserialized due to version 
            incompatibilities.
            </exception>
            
            <param name="reader">
            The XmlReader from which to deserialize the 
            object data from.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an instance of a HealthRecordInfo object using
            the specified XML.
            </summary>
            
            <param name="connection">
            A connection for the current user.
            </param>
            
            <param name="navigator">
            The XML containing the record information.
            </param>
            
            <returns>
            A new instance of a HealthRecordInfo object populated with the
            record information.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> or <paramref name="nav"/> 
            parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Parses HealthRecordInfo member data from the specified XPathNavigator.
            </summary>
            
            <param name="navigator">
            The XML containing the record information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.Unmarshal(System.Xml.XmlReader)">
            <summary>
            Populates the data of the class from the XML in
            the specified reader.
            </summary>
            
            <param name="reader">
            The reader from which to get the data for the class instance.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="reader"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.GetXml">
            <summary>
            Gets the XML representation of the HealthRecordInfo.
            </summary>
            
            <returns>
            A string containing the XML representation of the HealthRecordInfo.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.Marshal(System.Xml.XmlWriter)">
            <summary>
            Writes the record information into the specified writer as XML.
            </summary>
            
            <param name="writer">
            The writer that receives the record information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.#ctor(Microsoft.Health.HealthRecordInfo)">
            <summary>
            Copy constructor
            </summary>
            
            <param name="recordInfo">
            The record info object which is to be used as the source 
            for the data.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.#ctor(Microsoft.Health.ApplicationConnection,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordInfo"/> class, 
            providing a new view of a personal health record.
            </summary>
            
            <param name="connection">
            An instance of a <see cref="T:Microsoft.Health.ApplicationConnection"/> 
            to which the record operations are directed.
            </param>
            
            <param name="id">
            The unique identifier for the record.
            </param>
            
            <remarks>
            With this constructor, none of the data held in the properties
            is valid except the 
            <see cref="P:Microsoft.Health.HealthRecordAccessor.Id"/> 
            property. The ID is not validated with the service and the data
            is not retrieved until 
            <see cref="M:Microsoft.Health.HealthRecordInfo.Refresh"/>
            is called. However, any of the methods can be called without 
            Update being called.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="service"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> parameter is Guid.Empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.#ctor(Microsoft.Health.ApplicationConnection)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordInfo"/> class 
            for deserialization purposes.
            </summary>
            
            <param name="connection">
            An instance of a <see cref="T:Microsoft.Health.ApplicationConnection"/> 
            to which the record operations are directed.
            </param>
            
            <remarks>
            This constructor is only useful if ParseXml is called.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.Refresh">
            <summary>
            Updates the <see cref="T:Microsoft.Health.HealthRecordInfo"/> instance with data from 
            the server using the <see cref="P:Microsoft.Health.HealthRecordAccessor.Id"/>.
            </summary>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            This method is called and the 
            <see cref="P:Microsoft.Health.HealthRecordAccessor.Connection"/> 
            object of the <see cref="T:Microsoft.Health.HealthRecordInfo"/> is not an 
            <see cref="T:Microsoft.Health.AuthenticatedConnection"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordInfo.ToString">
            <summary>
            Gets the name of the record.
            </summary>
            
            <value>
            The name of the record.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.IsCustodian">
            <summary>
            Gets a value indicating whether or not the person is a custodian 
            of the record.
            </summary>
            
            <value>
            <b>true</b> if the person is a custodian of the record; otherwise, 
            <b>false</b>.
            </value>
            
            <remarks>
            A person is considered a custodian if they have been given 
            ownership of the record. The owner can give ownership to another 
            as an explicit action when sharing the record.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            The record was constructed using the record ID and 
            <see cref="M:Microsoft.Health.HealthRecordInfo.Refresh"/> has not been called.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.DateAuthorizationExpires">
            <summary>
            Gets the date/time that the authorization for the record expires.
            </summary>
            
            <value>
            A DateTime in UTC indicating when the record is no longer
            accessible to the user.
            </value>
            
            <remarks>
            When a person shares their record with another HealthVault account,
            they can specify the date when that sharing is revoked (if ever).
            This property indicates that date. If the person tries to access
            the record after the indicated date, they receive a
            <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/>.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            The record was constructed using the record ID and 
            <see cref="M:Microsoft.Health.HealthRecordInfo.Refresh"/> has not been called.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.HasAuthorizationExpired">
            <summary>
            <b>true</b> if the authorization of the authenticated person has
            expired for this record; otherwise, <b>false</b>.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.Name">
            <summary>
            Gets the name of the record.
            </summary>
            
            <value>
            A string indicating the name of the record.
            </value>
            
            <remarks>
            The name defaults to the name of the person to whom the record
            belongs. See <see cref="P:Microsoft.Health.HealthRecordInfo.DisplayName"/> for how to override the 
            name to customize the view for a person authorized to view the 
            record.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            The record was constructed using the record ID and 
            <see cref="M:Microsoft.Health.HealthRecordInfo.Refresh"/> has not been called.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.RelationshipType">
            <summary>
            Gets the relationship the person authorized to view this record
            has with the "owner" of the record.
            </summary>
            
            <value>
            An enumeration value indicating the relationship between the 
            record owner and the person authorized to use the record.
            </value>
            
            <remarks>
            See <see cref="P:Microsoft.Health.HealthRecordInfo.RelationshipType"/> for more information on the
            relationships and what they mean.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            The record was constructed using the record ID and 
            <see cref="M:Microsoft.Health.HealthRecordInfo.Refresh"/> has not been called.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.RelationshipName">
            <summary>
            Gets the localized string representing the relationship between
            the person authorized to view this record and the owner of the
            record.
            </summary>
            
            <value>
            A string representation of the enumeration value indicating the 
            relationship between the record owner and the person authorized 
            to use the record.
            </value>
            
            <remarks>
            See <see cref="P:Microsoft.Health.HealthRecordInfo.RelationshipType"/> for more information on the
            relationships and what they mean.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            The record was constructed using the record ID and 
            <see cref="M:Microsoft.Health.HealthRecordInfo.Refresh"/> has not been called.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.DisplayName">
            <summary>
            Gets the display name of the record.
            </summary>
            
            <value>
            A string representing the name of the record as seen by the
            current user.
            </value>
            
            <remarks>
            A record has a name that defaults to the name of the owner of
            the record. A nickname can override the record name for each 
            person authorized to use the record. If the nickname is specified,
            it is returned in this property. If the nickname is not specified,
            the record name is returned.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            The record was constructed using the record ID and 
            <see cref="M:Microsoft.Health.HealthRecordInfo.Refresh"/> has not been called.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.State">
             <summary>
             Gets the state of a <see cref="T:Microsoft.Health.HealthRecordInfo"/>.
             </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.DateCreated">
            <summary>
            Gets the date the record was created, in UTC.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.QuotaInBytes">
            <summary>
            Gets the maximum total size in bytes that the <see cref="T:Microsoft.Health.HealthRecordItem"/>s in 
            the <see cref="T:Microsoft.Health.HealthRecordInfo"/> can occupy.
            </summary>
            
            <remarks> 
            This data value is only available when the <see cref="T:Microsoft.Health.HealthRecordInfo"/> object is 
            fetched from the HealthVault platform as opposed to created on the fly.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.QuotaUsedInBytes">
            <summary>
            Gets the total size in bytes that the <see cref="T:Microsoft.Health.HealthRecordItem"/>s in 
            the <see cref="T:Microsoft.Health.HealthRecordInfo"/> currently occupy.
            </summary>
            
            <remarks> 
            This data value is only available when the <see cref="T:Microsoft.Health.HealthRecordInfo"/> object is 
            fetched from the HealthVault platform as opposed to created on the fly.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordInfo.HealthRecordAuthorizationStatus">
            <summary>
            Gets the <see cref="P:Microsoft.Health.HealthRecordInfo.HealthRecordAuthorizationStatus"/> for the record.
            </summary>
            <remarks>
            The status indicates whether, at the time of retrieval, the application 
            is able to access the record.  Any status other than NoActionRequired 
            requires user intervention in HealthVault before the application may 
            successfully access the record.  
            </remarks>
        </member>
        <member name="T:Microsoft.Health.HealthRecordItem">
            <summary>
            Represents a health record item.
            </summary>
            
            <remarks>
            A health record item is a single piece of data in a health record 
            that is accessible through the HealthVault service. Examples of health 
            record items include a blood pressure measurement, an exercise session, 
            or an insurance claim.
            <br/><br/>
            Health record items are typed and have XML data that adheres to the 
            schema for the type.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.#ctor(System.Guid)">
            <summary>
            Derived classes must call this method when their default 
            constructor is called.
            </summary>
            
            <param name="typeId">
            The unique identifier of the type of which the item is an instance.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.#ctor(System.Guid,System.Xml.XPath.IXPathNavigable)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItem"/> class 
            with the specified type identifier and type-specific data.
            </summary>
            
            <param name="typeId">
            The unique identifier for the item type.
            </param>
            
            <param name="typeSpecificData">
            The type-specific data XML for the item. 
            </param>
            
            <remarks>
            This constructor is reserved for when there are no derived
            classes for the item type being created. In most situations, use the
            derived type constructor.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Parses the type-specific XML data for the item.
            </summary>
            
            <param name="typeSpecificXml">
            The type-specific data XML for the item.
            </param>
            
            <remarks>
            Derived classes should override this method and populate their
            members with the data from the XML.
            <br/><br/>
            The default implementation does nothing.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML for the type-specific data of the item to the
            specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter that receives the type-specific data.
            </param>
            
            <remarks>
            Derived classes should override this method and write the type-
            specific XML which goes in the data-xml section of the item.
            <br/><br/>
            The default implementation writes the XML in the 
            <see cref="P:Microsoft.Health.HealthRecordItem.TypeSpecificData"/> property to the specified writer.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItem._signedItemXml">
            <summary>
            The item XML used to generate the signature on this health record item.
            </summary>
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.ClearDirtyFlags">
            <summary>
            Called after an update to indicate that the instance is in sync with the platform 
            instance.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2)">
             <summary>
             Signs the <see cref="T:Microsoft.Health.HealthRecordItem"/> with a digital signature.
             </summary>
             
             <param name="signingCertificate">
             An X509 certificate. The private key from the certificate is used to sign the
             <see cref="T:Microsoft.Health.HealthRecordItem"/>.
             </param>
             
             <remarks>
             Creates an instance of <see cref="T:Microsoft.Health.HealthRecordItemSignature"/> and calls its Sign method.
             </remarks>
             
             <exception cref="T:System.ArgumentNullException">
             The specified argument is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:Microsoft.Health.HealthRecordItem"/> is already signed and may only have one signature.
             </exception>
            
             <exception cref="T:System.Xml.XmlException">
             There is a load or parse error in the XML.
             </exception>
            
             <exception cref="T:Microsoft.Health.SignatureFailureException">
             Signing failed. See the inner exception.
             The inner exception may be one of the following:
             An <see cref="T:System.Xml.XmlException"/> is thrown because there is a load or parse error loading 
             the xsl.
             A CryptographicException is thrown because the nodelist from the xsl does not contain 
             an <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform"/> object.
             A <see cref="T:System.Security.Cryptography.CryptographicException"/> is thrown because signingCertificate.PrivateKey 
             is not an RSA or DSA key, or is unreadable.
             A <see cref="T:System.Security.Cryptography.CryptographicException"/> is thrown because signingCertificate.PrivateKey 
             is not a DSA or RSA object.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.IsSignatureValid">
            <summary>
            Checks if the health record item's signature is valid.
            </summary>
            
            <remarks>
            Verifies that the signature on the item is valid for the XML representation of the 
            item as retrieved from the HealthVault service.
            <br/><br/>
            This method will always verify against the underlying XML of this item as returned 
            from the service, even if local modifications are made to the item. In the case 
            of new items that have not yet been created in the HealthVault service, this method 
            validates the signature against the XML of the item at the time of signing.
            <br/><br/>
            For more information about XML digital signatures see: 
            <see cref="N:System.Security.Cryptography.Xml"/>. 
            </remarks>
            
            <returns>
            <b>true</b> if the signature is valid against the XML representation of the item 
            returned from the service, or for new items, if the signature is valid against
            the XML of the item at the time the item was signed. Returns <b>false</b> if the 
            signature could not be validated.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">
            The signature could not be validated because the <see cref="T:Microsoft.Health.HealthRecordItem"/> is not 
            signed.
            </exception>
            
            <exception cref="T:Microsoft.Health.SignatureFailureException">
            Signature validation failed becaue either the 
            <see cref="T:Microsoft.Health.HealthRecordItemSignatureMethod"/> of this item is unknown and cannot be
            validated, or the integrity of the signature could not be verified in which case the 
            inner exception contains details on the reasons why.
            The inner exception is <see cref="T:System.Security.Cryptography.CryptographicException"/>, thrown because of one of:
            The SignatureAlgorithm property of the public key in the 
            signature does not match the SignatureMethod property.
            The signature description could not be created.
            The hash algorithm could not be created. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.FetchV1SignedItemXml">
            <summary>
            Fetches item xml in V1 signature format. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.ValidateCertificate">
            <summary>
            Checks if the certificates are valid.
            </summary>
            
            <remarks>
            Validates the certificates of each signature on the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </remarks>
            
            <exception cref="T:Microsoft.Health.CertificateValidationException">
            Certificate validation failed.
            There may be an inner exception is <see cref="T:System.Security.Cryptography.CryptographicException"/>, thrown because
            of:
            The certificate is unreadable. 
            If there is no inner exception, there will be a string with info about the certificate
            and the error.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The certificate could not be validated because the <see cref="T:Microsoft.Health.HealthRecordItem"/> is 
            not signed.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.HealthRecordAccessor)">
            <summary>
            Gets the BLOB store for this health record item.
            </summary>
            
            <param name="record">
            The <see cref="T:Microsoft.Health.HealthRecordAccessor"/> that any BLOB data will be written to. This parameter
            may be <b>null</b> if only read access is required or the BLOB data to be written is 
            for a <see cref="T:Microsoft.Health.Package.ConnectPackage"/>.
            </param>
            
            <remarks>
            This method replaces the previous OtherData property. All binary data is now created,
            updated, and retrieved through <see cref="T:Microsoft.Health.BlobStore"/> instance associated with the
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.<br/>
            <br/>
            GetBlobStore will return an empty store on an existing <see cref="T:Microsoft.Health.HealthRecordItem"/>
            if <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload"/> is not specified when retrieving
            the item. In this case it is possible to overwrite or remove existing Blobs in the
            <see cref="T:Microsoft.Health.HealthRecordItem"/> instance stored in HealthVault by using the same name
            as the existing Blob. It is recommended that if you are going to be manipulating 
            Blobs in the BlobStore, that you specify
            <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload"/> when retrieving the item.
            </remarks>
            
            <returns>
            A <see cref="T:Microsoft.Health.BlobStore"/> instance related to this health record item.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.Package.ConnectPackageCreationParameters)">
            <summary>
            Gets the BLOB store for this health record item.
            </summary>
            
            <param name="connectPackageParameters">
            The <see cref="T:Microsoft.Health.Package.ConnectPackageCreationParameters"/> that define 
            the <see cref="T:Microsoft.Health.Package.ConnectPackage"/> to which any BLOB data will be written to.
            </param>
            
            <remarks>
            This method replaces the previous OtherData property. All binary data is now created,
            updated, and retrieved through <see cref="T:Microsoft.Health.BlobStore"/> instance associated with the
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.<br/>
            <br/>
            GetBlobStore will return an empty store on an existing <see cref="T:Microsoft.Health.HealthRecordItem"/>
            if <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload"/> is not specified when retrieving
            the item. In this case it is possible to overwrite or remove existing Blobs in the
            <see cref="T:Microsoft.Health.HealthRecordItem"/> instance stored in HealthVault by using the same name
            as the existing Blob. It is recommended that if you are going to be manipulating 
            Blobs in the BlobStore, that you specify
            <see cref="F:Microsoft.Health.HealthRecordItemSections.BlobPayload"/> when retrieving the item.
            </remarks>
            
            <returns>
            A <see cref="T:Microsoft.Health.BlobStore"/> instance related to this health record item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connectPackageParameters"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.GetSizeInBytes">
            <summary>
            Gets the size of the health record item which will be added to the quota used in the
            person's health record.
            </summary>
            
            <remarks>
            This size may be used to determine if there is sufficient room left in the person's health
            record. It is recommended that this be used only for large items that may cause the
            person to exceed their quota. This measurement is an approximation. The HealthVault
            service may evaluate the item to have slightly more or fewer bytes depending on how the
            white space is transformed between the client and server. The person's health record
            quota usage may also change on the HealthVault service due to data being added by other
            applications.
            </remarks>
            
            <returns>
            The size in bytes of the health record item.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.GetItemXml">
            <summary>
            Gets the XML representation of the health record item.
            </summary>
            
            <returns>
            A string containing the XML representation of the item.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections)">
            <summary>
            Gets the XML representation of the health record item.
            </summary>
            
            <param name="sections">
            The sections of the item to write to the XML.
            </param>
            
            <returns>
            A string containing the XML representation of the item wrapped by a "thing" element. 
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="elementName"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.GetItemXml(System.String)">
            <summary>
            Gets the XML representation of the health record item.
            </summary>
            
            <param name="elementName">
            The element that will wrap the thing's contents.
            </param>
            
            <returns>
            A string containing the XML representation of the item wrapped by the specified 
            <paramref name="elementName"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="elementName"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.GetItemXml(Microsoft.Health.HealthRecordItemSections,System.String)">
            <summary>
            Gets the XML representation of the health record item.
            </summary>
            
            <param name="sections">
            The sections of the item to write to the XML.
            </param>
            
            <param name="elementName">
            The element that will wrap the thing's contents.
            </param>
            
            <returns>
            A string containing the XML representation of the item wrapped by the specified 
            <paramref name="elementName"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="elementName"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddXmlPutThingsRequestParameters(System.Xml.XmlWriter)">
            <summary>
            Adds the XML data section to the thing XML.
            </summary>
            
            <param name="writer">
            The XML writer to use to write the XML data section to the thing XML.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddBlobPayloadPutThingsRequestParameters(System.Xml.XmlWriter)">
            <summary>
            Adds the BLOB payload section to the thing XML.
            </summary>
            
            <param name="writer">
            The XML writer to use to write the BLOB payload section to the thing XML.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddSignaturesPutThingsRequestParameters(System.Xml.XmlWriter)">
            <summary>
            Adds the signature section to the thing XML.
            </summary>
            
            <param name="writer">
            The XML writer to use to write the signature section to the thing XML.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            Signing failed. The thing was already signed and another signature is not allowed.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddTagsPutThingsRequestParameters(System.Xml.XmlWriter)">
            <summary>
            Adds the tags section to the thing XML.
            </summary>
            
            <param name="writer">
            The XML writer to use to write the tags section to the thing XML.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddCorePutThingsRequestParameters(System.Xml.XmlWriter,System.Boolean,Microsoft.Health.HealthRecordItemSections)">
            <summary>
            Adds the XML representing the core section to the specified
            XML writer.
            </summary>
            
            <param name="writer">
            The XML writer to add the core section's element to.
            </param>
            
            <param name="writeAllCore">
            If true, thing-state and eff-date elements will be written.
            </param>
            
            <param name="sections">
            The sections to be written to the XML.
            </param>
            
            <returns>
            True if the system sets or effective date needs to be updated.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddAuditThingsRequestParameters(System.Xml.XmlWriter)">
            <summary>
            Adds the XML representing the audits section to the specified
            XML writer.
            </summary>
            
            <param name="writer">
            The XML writer to add the audits section's element to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Populates the HealthRecordItem elements with data from the XML.
            </summary>
            
            <param name="thingNavigator">
            The XML from which the health record item will be constructed.
            </param>
            
            <param name="thingXml">
            The XML from which the health record item will be constructed.
            </param>
            
            <remarks>
            Most of the methods called use an XmlNavigator. However AddSignatureSectionValues
            requires an XmlReader, because it requires the exact xml passed in, and XmlNavigator
            can change the white space.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemDeserializationException">
            The derived type's <see cref="M:Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)"/> 
            method throws an exception when called. The inner exception 
            will be the exception thrown by the method.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddCoreSectionValues(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds the values from the core section of the health record item to 
            the specified HealthRecordItem and updates the Sections 
            appropriately.
            </summary>
            
            <param name="thingNavigator">
            The containing XPath navigator in which to find a child named
            "core".
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddAuditsSectionValues(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds the values from the created and updated sections of the 
            health record item to the specified HealthRecordItem and updates 
            the Sections appropriately.
            </summary>
            
            <param name="thingNavigator">
            The containing XPath navigator in which to find a child named
            "created" and "updated".
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddXmlSectionValues(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds the values from the xml section of the health record item to 
            the specified HealthRecordItem and updates the Sections 
            appropriately.
            </summary>
            
            <param name="thingNavigator">
            The containing XPath navigator in which to find a child named
            "data-xml".
            </param>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemDeserializationException">
            If derived type's <see cref="M:Microsoft.Health.HealthRecordItem.ParseXml(System.Xml.XPath.IXPathNavigable)"/> throws 
            an exception when called. The inner exception will be the 
            exception thrown by the method.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddBlobPayloadSectionValues(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds the values from the BLOB payload section of the health record item to 
            the specified HealthRecordItem and updates the Sections 
            appropriately.
            </summary>
            
            <param name="thingNavigator">
            The containing XPath navigator in which to find a child named
            "blob-payload".
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddSignatureSectionValues(System.Xml.XPath.XPathNavigator,System.String)">
             <summary>
             Adds the values from the Signature section of the health record item to 
             the specified HealthRecordItem and updates the Sections 
             appropriately.
             </summary>
             
             <param name="thingNavigator">
             The containing XPath navigator in which to find a child named
             "Signature".
             </param>        
             
             <param name="thingXml">
             The XML string of the thing used to create this health record item.
             </param>
             <exception cref="T:Microsoft.Health.HealthRecordItemDeserializationException">
             The signature xml could not be parsed. The inner exception may be:
             <see cref="T:System.Xml.XmlException"/>: There is a load or parse error in the XML.
             <see cref="T:System.ArgumentNullException"/>: The <see cref="T:System.Security.Cryptography.Xml.Signature"/> section of the
             document was not found.
             <see cref="T:System.Security.Cryptography.CryptographicException"/>: The <see cref="T:System.Security.Cryptography.Xml.Signature"/> section of the 
             document does not contain a valid SignatureValue property.
             The <see cref="T:System.Security.Cryptography.Xml.Signature"/> section of the document does not contain a valid 
             <see cref="T:System.Security.Cryptography.Xml.SignedInfo"/> property.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddTagsSectionValues(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds tags to the HealthRecordItem and updates the Sections if tags are present.
            </summary>
            
            <param name="thingNavigator"></param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItem.AddEffectivePermissionsSectionValues(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds the values from the eff-permissions section of the 
            health record item to the specified HealthRecordItem and updates 
            the Sections appropriately.
            </summary>
            
            <param name="thingNavigator">
            The containing XPath navigator in which to find a child named
            "eff-permissions".
            </param>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.Key">
            <summary>
            Gets the key of the health record item.
            </summary>
            
            <value>
            A globally unique identifier for the item issued when the item is 
            created and a globally unique version stamp updated every time 
            the item is changed.
            </value>
            
            <remarks>
            This is the only property that
            is guaranteed to be available regardless of how 
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> is set.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.TypeId">
            <summary>
            Gets the type identifier for the health record item type.
            </summary>
            
            <value>
            A globally unique identifier for the type of the item.
            </value>
            
            <remarks> 
            The types available can be queried using  
            <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)"/>
            .
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.TypeName">
            <summary>
            Gets the health record item type name.
            </summary>
            
            <remarks> 
            The types and names of types available can be queried using 
            <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)"/>
            .
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.EffectiveDate">
            <summary>
            Gets the date and time that the health record item data was taken.
            </summary>
            
            <remarks>
            This might not be the same time that the data was entered
            into the system.
            <br/><br/>
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core"/> bit
            set.       
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.State">
            <summary>
            Gets the state of the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <remarks>
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core"/> bit
            set.       
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.Flags">
            <summary>
            Gets the <see cref="T:Microsoft.Health.HealthRecordItem"/> flags.
            </summary>
            
            <remarks>
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core"/> bit
            set.       
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.IsPersonal">
            <summary>
            Gets or sets the value indicating if the <see cref="T:Microsoft.Health.HealthRecordItem"/> is private.
            </summary>
            
            <remarks>
            Private items are accessible only by custodians.
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Core"/> bit
            set.       
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.IsDownVersioned">
            <summary>
            Gets the value indicating if the <see cref="T:Microsoft.Health.HealthRecordItem"/> is down-versioned.
            </summary>
            
            <remarks>
            If this value is true then an attempt to update the <see cref="T:Microsoft.Health.HealthRecordItem"/>
            will fail.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.IsUpVersioned">
            <summary>
            Gets the value indicating if the <see cref="T:Microsoft.Health.HealthRecordItem"/> is up-versioned.
            </summary>
            
            <remarks>
            If this value is true then an application should get explicit permission to update the
            instance from the user. This will cause the stored instance to be converted to the 
            type version which may cause data loss in some cases.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.LastUpdated">
            <summary>
            Gets the audit information associated with the last update of
            this health record item.
            </summary>
            
            <remarks> 
            It is the responsibility of the application to convert the audit time
            to local time if necessary.
            <br/><br/>
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Audits"/> bit
            set.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.Created">
            <summary>
            Gets the audit information associated with the creation of
            this health record item.
            </summary>
            
            <remarks> 
            It is the responsibility of the application to convert the audit time
            to local time if necessary.
            <br/><br/>
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Audits"/> bit
            set.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.EffectivePermissions">
            <summary>
            Gets the effective permissions on the item granted to the person 
            retrieving the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <value>
            If the permissions are unknown, the value is <b>null</b>; otherwise
            the appropriate permissions are returned.
            </value>
            
            <remarks> 
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.EffectivePermissions"/> 
            bit set.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.IsImmutable">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            is immutable.
            </summary>
            
            <value>
            <b>true</b> if the <see cref="T:Microsoft.Health.HealthRecordItem"/> is immutable; otherwise,
            <b>false</b>.
            </value>
            <remarks> 
            This data value is only available when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.EffectivePermissions"/> 
            bit set.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.TypeSpecificData">
            <summary>
            Gets or sets the XML representation of the type-specific data for the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <remarks> 
            This data might contain data from other applications that also work
            with the same type of data. Take care not to overwrite
            existing data when making updates. Do not remove or manipulate
            elements in the XML that you do not understand.
            <br/><br/>
            If this property is set on a type derived from <see cref="T:Microsoft.Health.HealthRecordItem"/> the data
            is not parsed into the object model so properties of the class may still show old data.
            <br/><br/>
            This data value is only available to get when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Xml"/> bit
            set.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.TransformedXmlData">
            <summary>
            Gets the transformed XML data of the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <remarks> 
            Transformed XML data is provided if you so specify in 
            <see cref="T:Microsoft.Health.HealthRecordSearcher"/>. The dictionary values are 
            indexed by the name of the transform that was specified when the 
            search was performed.
            <br/><br/>
            This data value is only available to get when the
            <see cref="P:Microsoft.Health.HealthRecordItem.Sections"/> show the
            <see cref="F:Microsoft.Health.HealthRecordItemSections.Xml"/> bit
            set though it will not contain data unless a transform was 
            specified when getting the item.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.CommonData">
            <summary>
            Gets the common data for the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.CommonItemData"/> for the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </value>
            
            <remarks>
            The common data includes notes, source, and extensions.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.Tags">
            <summary>
            Gets the list of tags on the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <value>
            A string representing the tag list.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.HealthRecordItemSignatures">
            <summary>
            Gets the signatures for the <see cref="T:Microsoft.Health.HealthRecordItem"/>. 
            </summary>
            
            <value>
            An collection of <see cref="T:Microsoft.Health.HealthRecordItemSignature"/>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItem.Sections">
            <summary>
            Gets the data sections that this HealthRecordItem represents.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.HealthRecordItemSections"/>.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemCollection">
            <summary>
            Defines a group of results that gets returned from the 
            <see cref="T:Microsoft.Health.HealthRecordSearcher"/>.
            </summary>
            
            <remarks>
            This collection is read-only.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.CreateResultGroupFromResponse(Microsoft.Health.HealthRecordAccessor,System.Xml.XmlReader,System.Collections.Generic.IList{Microsoft.Health.HealthRecordFilter})">
            <summary>
            Creates a result group from the response XML.
            </summary>
            
            <param name="record">
            The health record to which all result items are associated.
            </param>
            
            <param name="groupReader">
            An XML reader targeted at the group element of the 
            "GetThings" response.
            </param>
            
            <param name="filters">
            The possible filters that were used to get the group.
            </param>
            
            <returns>
            An instance of a result group containing the health record items 
            in the response.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="record"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Add(Microsoft.Health.HealthRecordItem)">
            <summary>
            This method is not used, because the collection is read-only and
            you cannot add items to it.
            </summary>
            
            <param name="item">
            This parameter is ignored, because items cannot be added.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            This method is not used, because the collection is read-only 
            you cannot add items to it.
            </summary>
            
            <param name="value">
            This parameter is ignored, because items cannot be added.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Clear">
            <summary>
            This method is not used, because the result group is read-only, 
            and you cannot clear items from it.
            </summary>
            
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItem)">
            <summary>
            Gets a value indicating whether the collection contains the 
            specified <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <param name="item">
            The <see cref="T:Microsoft.Health.HealthRecordItem"/> to locate in the collection.
            </param>
            
            <returns>
            <b>true</b> if a matching <see cref="T:Microsoft.Health.HealthRecordItem"/> is found; 
            otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Gets a value indicating whether the collection contains the object
            having the specified value.
            </summary>
            
            <param name="value">
            The health record item to locate in the collection.
            </param>
            
            <returns>
            <b>true</b> if a matching object is found; otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Contains(Microsoft.Health.HealthRecordItemKey)">
            <summary>
            Gets a value indicating whether the collection contains a 
            <see cref="T:Microsoft.Health.HealthRecordItem"/> with the specified 
            <see cref="T:Microsoft.Health.HealthRecordItemKey"/>.
            </summary>
            
            <param name="itemKey">
            The unique <see cref="T:Microsoft.Health.HealthRecordItemKey"/> used to locate the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>item in the collection. The key 
            contains a unique identifier for the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            and a unique version stamp identifying the version of 
            the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </param>
            
            <returns>
            <b>true</b> if a matching object is found; otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.CopyTo(Microsoft.Health.HealthRecordItem[],System.Int32)">
            <summary>
            This method is not used, because copying the result group might 
            cause unexpected network access.
            </summary>
            
            <param name="array">
            This parameter is ignored, since the result group cannot be copied.
            </param>
            
            <param name="arrayIndex">
            This parameter is ignored, since the result group cannot be copied.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            This method is not used, because copying the result group might 
            cause unexpected network access.
            </summary>
            
            <param name="array">
            This parameter is ignored, since the result group cannot be copied.
            </param>
            
            <param name="index">
            This parameter is ignored, since the result group cannot be copied.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Remove(Microsoft.Health.HealthRecordItem)">
            <summary>
            This method is not used, because items cannot be removed from a 
            read-only result group.
            </summary>
            
            <param name="item">
            This parameter is ignored, since items cannot be removed.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            This exception is always thrown.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItem)">
            <summary>
            Determines the index of the specific <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            in the list.
            </summary>
            
            <param name="item">
            The <see cref="T:Microsoft.Health.HealthRecordItem"/> to locate in the list.
            </param>
            
            <returns>
            The index of the <see cref="T:Microsoft.Health.HealthRecordItem"/>, if found; 
            otherwise, -1.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of the specific item in the list.
            </summary>
            
            <param name="value">
            The object to locate in the list.
            </param>
            
            <returns>
            The index of the item, if found in the list; otherwise, -1.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.IndexOf(Microsoft.Health.HealthRecordItemKey)">
            <summary>
            Determines the index of the specific item in the list using the
            unique health record item identifier.
            </summary>
            
            <param name="key">
            The unique health record item key used to locate the 
            item in the list.
            </param>
            
            <returns>
            The index of item, if found in the list; otherwise, -1.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Insert(System.Int32,Microsoft.Health.HealthRecordItem)">
            <summary>
            This method is not used, because items cannot be inserted into a
            read-only collection.
            </summary>
            
            <param name="index">
            This parameter is ignored because the collection is read-only.
            </param>
            
            <param name="item">
            This parameter is ignored because the collection is read-only.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            The collection is read-only and does not support insertion.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            This method is not used, because items cannot be inserted into a
            read-only collection.
            </summary>
            
            <param name="index">
            This parameter is ignored because the collection is read-only.
            </param>
            
            <param name="value">
            This parameter is ignored because the collection is read-only.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            The collection is read-only and does not support insertion.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.RemoveAt(System.Int32)">
            <summary>
            This method is not used, because items cannot be removed from a
            read-only collection.
            </summary>
            
            <param name="index">
            This parameter is ignored because the collection is read-only.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            The collection is read-only and does not support the removal of
            items.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            This method is not used, because items cannot be removed from a
            read-only collection.
            </summary>
            
            <param name="value">
            This parameter is ignored because the collection is read-only.
            </param>
            
            <exception cref="T:System.NotSupportedException">
            The collection is read-only and does not support the removal of
            items.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A IEnumerator that iterates through the collection.
            </returns>
            
            <remarks>
            This enumerator might cause network requests to the HealthVault service
            as it enumerates the results. The HealthVault service limits the
            number of results with each request, therefore, it might be 
            necessary to make multiple requests to fill in the result data as the 
            collection is enumerated.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A IEnumerator that iterates through the collection.
            </returns>
            
            <remarks>
            This enumerator may cause network requests to the HealthVault service
            as it enumerates the results. The HealthVault service limits the
            number of results with each request so it may be necessary to 
            make multiple requests to fill in the result data as the 
            collection is enumerated.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Sort(System.Comparison{Microsoft.Health.HealthRecordItem})">
            <summary>
            Sorts the HealthRecordItems in the collection using the specified comparison
            method.
            </summary>
            
            <param name="comparison">
            The comparison method to use when sorting the collection.
            </param>
            
            <remarks>
            This method will cause all results to be retrieved from HealthVault.<br/>
            When a query results in many matches, HealthVault will return a fixed number
            of "full" results (all data requested is returned) and the remaining matches
            as "partial" (only identifying information is returned). HealthRecordItemCollection
            automatically retrieves the full information for the partial results as the 
            collection gets enumerated. In order to sort the results, HealthRecordItemCollection
            must retrieve the full set of data for all the results. This may cause several
            requests to HealthVault to retrieve all the data.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparison"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparison"/> caused an error during the sort.
            For example, <paramref name="comparison"/> might not return 0 when comparing an item 
            with itself.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.Sort(System.Collections.Generic.IComparer{Microsoft.Health.HealthRecordItem})">
             <summary>
             Sorts the HealthRecordItems in the collection using the specified comparer.
             </summary>
             
             <param name="comparer">
             The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
             or <b>null</b> to use the defalt comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
             </param>
             
             <remarks>
             This method will cause all result to be retrieved from HealthVault.<br/>
             When a query results in many matches, HealthVault will return a fixed number
             of "full" results (all data requested is returned) and the remaining matches
             as "partial" (only identifying information is returned). HealthRecordItemCollection
             automatically pages down the full information for the partial results as the 
             collection gets enumerated. In order to sort the results, HealthRecordItemCollection
             must retrieve the full set of data for all the results. This may cause several
             requests to HealthVault to retrieve all the data.
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
             <paramref name="comparer"/> is <b>null</b>, and the default comparer 
             <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find implementation of the
             <see cref="T:System.IComparable`1"/> generic interface.
             </exception>
             
             <exception cref="T:System.ArgumentException">
             The implementation of <paramref name="comparer"/> caused an error during the sort.
             For example, <paramref name="comparer"/> might not return 0 when 
             comparing an item with itself.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.GetRange(System.Int32,System.Int32)">
            <summary>
            Retrieves the <see cref="T:Microsoft.Health.HealthRecordItem"/> from the result group in the 
            specified range of indexes, including the specified indexes.
            </summary>
            
            <param name="minIndex">
            The starting point for retrieving items.
            </param>
            
            <param name="maxIndex">
            The stopping point for retrieving items.
            </param>
            
            <returns>
            A collection of items in the specified index range.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="minIndex"/> parameter is greater than the
            <paramref name="maxIndex"/> parameter.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            Either the <paramref name="minIndex"/> parameter or the
            <paramref name="maxIndex"/> parameter is less than zero, or the
            <paramref name="maxIndex"/> parameter is greater than
            <see cref="P:Microsoft.Health.HealthRecordItemCollection.Count"/> -1.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.Name">
            <summary>
            Gets the name of the filter group.
            </summary>
            
            <value>
            A string containing the name of the filter to which the results
            in this group apply.
            </value>
            
            <remarks>
            This name is used to distinguish the responses for the filter
            group that was specified in the search.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.WasFiltered">
            <summary>
            Gets a value indicating whether the result set of health record 
            items was filtered.
            </summary>
            
            <value>
            <b>true</b> if the result set of health record items was filtered due 
            to the callers permissions; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.Record">
            <summary>
            Gets the health record that the items were retrieved from.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.MaxResultsPerRequest">
            <summary>
            Gets or sets the maximum number of full items returned in a
            GetThings request.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.Count">
            <summary>
            Gets the number of items in the result group.
            </summary>
            
            <remarks>
            This number can include partial results returned from the server
            if the maximum number of items returned is reached. If accessed,
            the partial items are retrieved automatically from the server.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.IsReadOnly">
             <summary>
             Gets a value indicating that this collection is read-only.
             </summary>
             
             <value>
             This property always returns <b>true</b>.
             </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.IsSynchronized">
            <summary>
            Gets a value indicating that this collection is thread-safe 
            when the <see cref="P:Microsoft.Health.HealthRecordItemCollection.SyncRoot"/> is used.
            </summary>
            
            <value>
            This property always returns <b>true</b>.
            </value>
            
            <remarks>
            <see cref="P:Microsoft.Health.HealthRecordItemCollection.SyncRoot"/> returns an object that can be used to 
            synchronize access to the ICollection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the 
            ICollection. 
            </summary>
            
            <value>
            An object that can be used to synchronize access to the 
            ICollection.
            </value>
            
            <remarks>
            For collections whose underlying store is not publicly available, 
            the expected implementation is to return the current instance. 
            Note that the pointer to the current instance might be 
            insufficient for collections that wrap other collections; those 
            should return the underlying collection's SyncRoot property.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.Item(System.Int32)">
            <summary>
            Retrieves the <see cref="T:Microsoft.Health.HealthRecordItem"/> at the specified index.
            </summary>
            
            <param name="index">
            The zero-based index of the item.
            </param>
            
            <returns>
            The item at the specified index.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            Set is called on a read-only collection.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> parameter is less than zero or 
            greater than the value of <see cref="P:Microsoft.Health.HealthRecordItemCollection.Count"/>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Retrieves the object at the specified index.
            </summary>
            
            <param name="index">
            The zero-based index at which to get the object.
            </param>
            
            <returns>
            The object at the specified index.
            </returns>
            
            <exception cref="T:System.NotSupportedException">
            Set is called on a read-only collection.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.IsFixedSize">
            <summary>
            Gets a value indicating that the IList has a fixed size. 
            </summary>
            
            <value>
            This property always returns <b>true</b>.
            </value>
            
            <remarks>
            A collection with a fixed size does not allow the addition or 
            removal of elements after the collection is created, but it 
            might allow the modification of existing elements.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator">
            <summary>
            This class acts as the enumerator for the result group.
            </summary>
            
            <remarks>
            All synchronization is done in the HealthRecordItemCollection. The
            iterator only keeps track of the current index and uses the 
            Item collection of the HealthRecordItemCollection to retrieve the
            item.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the 
            next element; <b>false</b> if the enumerator has passed the end of 
            the collection.
            </returns>
            
            <remarks>
            After an enumerator is created or after the <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Reset"/> method is 
            called, an enumerator is positioned before the first element 
            of the collection, and the first call to the <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> method 
            moves the enumerator over the first element of the collection.
            <br/><br/>
            If <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> passes the end of the collection, the enumerator 
            is positioned after the last element in the collection and 
            <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> returns <b>false</b>. When the enumerator is at this 
            position, subsequent calls to <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> also return <b>false</b> 
            until <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Reset"/> is called.
            <br/><br/>
            An enumerator remains valid as long as the collection 
            remains unchanged. If changes are made to the collection, 
            such as adding, modifying, or deleting elements, the 
            enumerator is irrecoverably invalidated and the next call 
            to <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> or <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Reset"/> throws an 
            <see cref="T:System.InvalidOperationException"/>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the collection.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Dispose">
            <summary>
            Resets the enumerator.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current">
             <summary>
             Gets the element in the collection at the current position of 
             the enumerator.
             </summary>
             
             <value>
             The element in the collection at the current position of the 
             enumerator. 
             </value>
             
             <remarks>
             The <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/> property is undefined if:
               - The enumerator is positioned before the first element 
                 in the collection, immediately after the enumerator is 
                 created. You must call <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> to advance the 
                 enumerator to the first element of the collection before 
                 reading the value of <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/>.
                 
               - The last call to <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> returned <b>false</b>, 
                 which indicates the end of the collection.
            
               - <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/> returns the same object until 
                 <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> is called. 
                 <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> sets <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/> to the next element.
            
             </remarks>
             
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.System#Collections#IEnumerator#Current">
             <summary>
             Gets the element in the collection at the current position of 
             the enumerator.
             </summary>
             
             <value>
             The element in the collection at the current position of the 
             enumerator. 
             </value>
             
             <remarks>
             The <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/> property is undefined if:
               - The enumerator is positioned before the first element 
                 in the collection, immediately after the enumerator is 
                 created. You must call <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> to advance the 
                 enumerator to the first element of the collection before 
                 reading the value of <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/>.
                 
               - The last call to <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> returned <b>false</b>, 
                 which indicates the end of the collection.
            
               - <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/> returns the same object until 
                 <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> is called. 
                 <see cref="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.MoveNext"/> sets <see cref="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemEnumerator.Current"/> to the next element.
            
             </remarks>
             
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollectionDebugView">
            <summary>
            A class that helps the <see cref="T:Microsoft.Health.HealthRecordItemCollection"/> display better in the debugger.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollectionDebugView.#ctor(Microsoft.Health.HealthRecordItemCollection)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollectionDebugView"/> with the specified
            <see cref="T:Microsoft.Health.HealthRecordItemCollection"/>.
            </summary>
            
            <param name="baseObject">
            The object this class presents a view of for the debugger.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollectionDebugView.FetchedItems">
            <summary>
            Gets the items in the <see cref="T:Microsoft.Health.HealthRecordItemCollection"/> that were fetched.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemCollection.HealthRecordItemCollectionDebugView.Items">
            <summary>
            Gets a collection of all the items.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemDataTable">
            <summary> 
            Represents a data table that populates itself with HealthVault data. 
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDataTable.#ctor(Microsoft.Health.HealthRecordItemDataTableView,Microsoft.Health.HealthRecordFilter)">
            <summary> 
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItemDataTable"/> 
            class with the specified table view and filter.
            </summary>
            
            <param name="view">
            The view that the data table should take on the data.
            </param>
            
            <param name="filter">
            The filter used to gather health record items from the HealthVault 
            service.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="filter"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="view"/> parameter is 
            <see cref="F:Microsoft.Health.HealthRecordItemDataTableView.SingleTypeTable"/> and 
            the <paramref name="filter"/> parameter contains more than one type 
            identifier.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItemDataTable"/> 
            class with the specified serialization information.
            </summary>
            
            <param name="info">
            Serialized information about this data table.
            </param>
            
            <param name="context">
            The stream context of the serialized information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the data table.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The serialization context.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDataTable.GetData(Microsoft.Health.HealthRecordAccessor,System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem},System.Int32,System.Int32)">
            <summary> 
            Fills in the data table with data from a list of HealthRecordItem.
            </summary>
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDataTable.GetData(System.Guid,Microsoft.Health.ApplicationConnection)">
            <summary> 
            Fills in the data table with data from the HealthVault service.
            </summary>
            
            <param name="recordId"> 
            The unique health record identifier to get the data from.
            </param>
            
            <param name="connection"> 
            The connection to the HealthVault service to use.
            </param>
            
            <remarks>
            This method makes a web-method call to the HealthVault service.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred while accessing the HealthVault service.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDataTable.GetData(Microsoft.Health.HealthRecordAccessor)">
            <summary> 
            Fills in the data table with data from the HealthVault service.
            </summary>
            
            <param name="record"> 
            The health record to get the data from.
            </param>
            
            <remarks>
            This method makes a web-method call to the HealthVault service.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred while accessing the HealthVault service.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDataTable.GetData(Microsoft.Health.HealthRecordAccessor,System.Int32,System.Int32)">
            <summary> 
            Fills in the data table with data from the HealthVault service 
            starting at the specific index for the count specified.
            </summary>
            
            <param name="record"> 
            The health record to get the data from.
            </param>
            
            <param name="startIndex">
            The index to start retrieving full data from HealthVault.
            </param>
            
            <param name="count">
            The count of full items to retrieve.
            </param>
            
            <remarks>
            This method makes a web-method call to the HealthVault service.
            
            The default <see cref="M:Microsoft.Health.HealthRecordItemDataTable.GetData(Microsoft.Health.HealthRecordAccessor)"/> implementation
            fills the data with complete information for all items matching
            the filter. If the <see cref="T:Microsoft.Health.HealthRecordItemDataTable"/> is being
            bound to a HealthServiceDataGrid or other such control that supports
            paging, this may not be the desired result as many calls to 
            HealthVault may be required to fetch all the data.  This overload
            of GetData allows the caller to specify the index and the count of
            the full items to retrieve to match the page that is currently visible.
            The <see cref="T:Microsoft.Health.HealthRecordItemDataTable"/> will be filled with
            empty values except for the rows specified.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred while accessing the HealthVault service.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.HasSignedData">
            <summary>
            Gets a value indicating whether there is any signed health data in the table.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.HasPersonalData">
            <summary>
            Gets a value indicating whether there is any personal health data in the table.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.SingleTypeDefinition">
            <summary>
            Gets the definition for the type of items in the data table.
            </summary>
            
            <remarks>
            This value is set only if the single type table view is being
            shown.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.DisplayColumns">
            <summary>
            Gets the display columns for the table.
            </summary>
            
            <remarks>
            This collection will be empty until 
            <see cref="M:Microsoft.Health.HealthRecordItemDataTable.GetData(Microsoft.Health.HealthRecordAccessor)"/> or
            <see cref="M:Microsoft.Health.HealthRecordItemDataTable.GetData(System.Guid,Microsoft.Health.ApplicationConnection)"/> is called.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.View">
            <summary>
            Gets the view of the data that the table will show.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.Filter">
            <summary>
            Gets or sets the filter to use when getting data from the
            health record.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.WasFiltered">
            <summary> 
            Gets a value indicating whether the data was filtered by the 
            HealthVault service.
            </summary>
            
            <remarks> 
            This value is set only after 
            <see cref="M:Microsoft.Health.HealthRecordItemDataTable.GetData(Microsoft.Health.HealthRecordAccessor)"/> 
            or <see cref="M:Microsoft.Health.HealthRecordItemDataTable.GetData(System.Guid,Microsoft.Health.ApplicationConnection)"/> is called.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemDataTable.HasData">
            <summary>
            <b>true</b> if the data has been retrieved from the HealthVault service; 
            otherwise, <b>false</b>.
            </summary>
            
            <remarks>
            This value is set only after 
            <see cref="M:Microsoft.Health.HealthRecordItemDataTable.GetData(Microsoft.Health.HealthRecordAccessor)"/> 
            or <see cref="M:Microsoft.Health.HealthRecordItemDataTable.GetData(System.Guid,Microsoft.Health.ApplicationConnection)"/> is called.
            <br/><br/>
            This property returns <b>false</b> if there was an error contacting 
            the HealthVault service, but returns <b>true</b> if the call was 
            made successfully but the filter produced no results.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemDataTableView">
            <summary>
            Defines the possible views for the <see cref="T:Microsoft.Health.HealthRecordItemDataTable"/>.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemDataTableView.Default">
            <summary>
            The default view uses SingleTypeTable if the filter contains
            only a single type and there is a single type table view defined.
            Otherwise, the MultipleTypeTable view is used.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemDataTableView.SingleTypeTable">
            <summary>
            A view for the <see cref="T:Microsoft.Health.HealthRecordItemDataTable"/> that shows 
            columns that are specific to a single item type. However, if the 
            type does not contain a specific single type table view, the base 
            type is used, which is the same as the multiple type table.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemDataTableView.MultipleTypeTable">
            <summary>
            A view that shows a common set of columns for all item types.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemDeserializationException">
            <summary>
            Represents the exception thrown when the deserialization of a
            type-specific health record item fails.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemDeserializationException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
            <param name="innerException">
            The exception that occurred in the health record item type 
            deserializer.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDeserializationException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemDeserializationException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDeserializationException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemDeserializationException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemDeserializationException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemExtension">
            <summary>
            Represents an extension to a health record item.
            </summary>
            
            <remarks>
            Applications can augment the HealthVault defined data for a 
            health record item type with application or vendor specific data by 
            implementing item extensions.
            <br/><br/>
            Applications that implement a health record item extension should 
            derive from this class and register their extension by calling 
            <see cref="M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type)"/>.
            Whenever the HealthVault SDK reads an extension with the specified
            extension source an instance of the derived HealthRecordItemExtension will be
            created and it's <see cref="M:Microsoft.Health.HealthRecordItemExtension.ParseXml(System.Xml.XPath.IXPathNavigable)"/> 
            method will be called to populate the data of the class from the 
            web-service XML.
            Common portions of the item extension data will be parsed by the base
            class and exposed as properties.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemExtension.#ctor(System.String)">
            <summary>
            Constructs a health record item extension for the specified source.
            </summary>
            
            <param name="source">
            The source identifier for the extension. This is used to uniquely
            identify the extension data.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="source"/> is null or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemExtension.#ctor">
            <summary>
            Constructor used when creating an instance for XML deserialization.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemExtension.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Parses the common portions of the extension data.
            </summary>
            
            <param name="extensionNav">
            The XML to get the extension data from.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemExtension.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates the extension data from the specified XML.
            </summary>
            
            <param name="extensionData">
            The XML to retrieve the extension data from. Note, this may be
            an <see cref="T:System.Xml.XmlDocument"/>.
            </param>
            
            <remarks>
            Derived classes should override this method to parse the extension
            XML and populate class members with the data. The common extension
            attributes are handled by the base class before this method is
            called.
            <br/><br/>
            The default implementation of this method does nothing.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemExtension.WriteExtensionXml(System.Xml.XmlWriter)">
            <summary>
            Writes the extension data to the specified writer.
            </summary>
            
            <param name="writer">
            The writer to write the extension XML to.
            </param>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.HealthRecordItemExtension.Source"/> is null or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemExtension.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the data portion of the extension to the specified XML
            writer.
            </summary>
            
            <param name="writer">
            The XML writer to write the data portion of the extension to.
            </param>
            
            <remarks>
            Derived classes should override this method to add extension 
            specific data to the extension XML for the item. Note, the base
            class handles writing the extension node and it's attributes to
            the writer. The derived class implementation should only write 
            the inner nodes of the extension.
            <br/><br/>
            The base implementation writes the contents of the 
            <see cref="P:Microsoft.Health.HealthRecordItemExtension.ExtensionData"/> to the writer and should not be called
            by the derived class.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemExtension.Source">
            <summary>
            Gets or sets the extension source identifier.
            </summary>
            
            <remarks>
            The source is used to identify the extension. To register a class
            as a handler for a specific extension source see 
            <see cref="M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type)"/>.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is null or empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemExtension.Version">
            <summary>
            Gets or sets the version of the extension.
            </summary>
            
            <remarks>
            The version is optional and will be ignored if set to null.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemExtension.Logo">
            <summary>
            Gets or sets the URL to a logo for display use with the extension.
            </summary>
            
            <remarks>
            The logo is optional and will be ignored if set to null.
            <br/><br/>
            In some applications a generic view of the health record item will be
            shown. If a logo is provided on an extension those applications
            can embed the logo in the user interface to show the user that
            there is additional data. It can also be used along with the
            <see cref="P:Microsoft.Health.HealthRecordItemExtension.Transform"/> to provide a link to the extension data.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemExtension.Transform">
            <summary>
            Gets or sets the URL to an XSL transform which can transform the
            XML of the extension into HTML suitable for display in a small
            form or popup.
            </summary>
            
            <remarks>
            The transform is optional and will be ignored if set to null.
            <br/><br/>
            In some applications a generic view of the health record item will be
            shown. In such applications the extension data can be rendered as 
            HTML using the specified transform.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemExtension.ExtensionData">
            <summary>
            Gets the extension data for the extension.
            </summary>
            
            <remarks>
            To modify the extension attributes use the other properties of this
            class. To modify the extension data manipulate the returned
            XML document unless a derived type is available, in which case
            you should use the properties and method of the derived type to
            manipulate the data.
            <br/><br/>
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemFlags">
            <summary>
            Represents access restrictions for a <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemFlags.None">
            <summary>
            There are no special access restrictions in place for
            the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemFlags.Personal">
            <summary>
            Access to the <see cref="T:Microsoft.Health.HealthRecordItem"/> is
            restricted to custodians only.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemFlags.DownVersioned">
            <summary>
            The <see cref="T:Microsoft.Health.HealthRecordItem"/> is down-versioned.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemFlags.UpVersioned">
            <summary>
            The <see cref="T:Microsoft.Health.HealthRecordItem"/> is up-versioned.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemKey">
            <summary>
            Uniquely identifies a health record item in the system.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemKey.#ctor(System.Guid,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItemKey"/>
            class with the specified globally unique ID for the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/> and globally unique version stamp.
            </summary>
            
            <param name="id">
            A globally unique identifier for the <see cref="T:Microsoft.Health.HealthRecordItem"/>
            in the system.
            </param>
            
            <param name="versionStamp">
            A globally unique identifier for the version of the <see cref="T:Microsoft.Health.HealthRecordItem"/>
            in the system.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="id"/> or <paramref name="versionStamp"/> 
            parameter is <paramref name="System.Guid.Empty"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemKey.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItemKey"/>
            class with the specified globally unique ID for the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <param name="id">
            A globally unique identifier for the <see cref="T:Microsoft.Health.HealthRecordItem"/>
            in the system.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="id"/> is <paramref name="System.Guid.Empty"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemKey.ToString">
            <summary>
            Gets a string representation of the key.
            </summary>
            
            <returns> 
            <see cref="P:Microsoft.Health.HealthRecordItemKey.VersionStamp"/>.ToString().
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemKey.Equals(System.Object)">
            <summary>
            Compares one <see cref="T:Microsoft.Health.HealthRecordItemKey"/> to another.
            </summary>
            
            <param name="obj">
            The <see cref="T:Microsoft.Health.HealthRecordItemKey"/> to compare against this.
            </param>
            
            <returns>
            <b>true</b> if both the health record item keys have
            the same ID and version stamp; otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemKey.GetHashCode">
            <summary>
            Gets the hashcode value for the object.
            </summary>
            
            <returns>
            <see cref="P:Microsoft.Health.HealthRecordItemKey.VersionStamp"/>.GetHashCode().
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemKey.Id">
             <summary>
             Gets the unique identifier of the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
             </summary>
             
             <value>
             A globally unique identifier for the <see cref="T:Microsoft.Health.HealthRecordItem"/>, 
             issued when the item is created.
             </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemKey.VersionStamp">
             <summary>
             Gets the unique version stamp of the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
             </summary>
             
            <value>
             A globally unique identifier that represents the version of the
             <see cref="T:Microsoft.Health.HealthRecordItem"/>. A new version stamp is issued each 
             time the item is changed.
            </value>
             
            <remarks>
             The version stamp of the current version of a <see cref="T:Microsoft.Health.HealthRecordItem"/>
             is always equal to the <see cref="P:Microsoft.Health.HealthRecordItemKey.Id"/> of that item.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemPermissions">
            <summary>
            Provides values that indicate the rights associated with access to a 
            health record item.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemPermissions.None">
            <summary>
            The person or group has no permissions.
            This is not the same as denial of permissions. It means that the 
            rule is not currently granting any permissions.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemPermissions.Read">
            <summary>
            The person or group has read access to the set of health record
            items.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemPermissions.Update">
            <summary>
            The person or group has update access to the set of health record
            items.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemPermissions.Create">
            <summary>
            The person or group can create health record items in the set.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemPermissions.Delete">
            <summary>
            The person or group can delete health record items in the set.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemPermissions.All">
            <summary>
            The person or group has all permissions on the set.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemRelationship">
            <summary>
            Represents a loose relationship between health record item instances.
            </summary>
            
            <remarks>
            The relationship defined is not maintained by HealthVault. It is completely up to the 
            application defining and consuming the relationship to ensure the related item exists
            and is in the same health record.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemRelationship.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItemRelationship"/>
            instance with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemRelationship.#ctor(System.Guid)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItemRelationship"/> instance for a relationship
            to the item with the specified ID.
            </summary>
            
            <param name="itemId">
            The unique identifier of the health record item to related to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="itemId"/> is <see cref="F:System.Guid.Empty"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemRelationship.#ctor(Microsoft.Health.HealthRecordItemKey)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItemRelationship"/> instance for a relationship
            to the item with the specified key.
            </summary>
            
            <param name="itemKey">
            The unique key of the health record item to related to, including the item ID and
            optionally the item version stamp.
            </param>
                
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemKey"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemRelationship.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItemRelationship"/> instance for a relationship
            to the item with the specified key.
            </summary>
            
            <param name="clientId">
            A client assigned ID for the health record item to relate to.
            </param>
                
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="clientId"/> is <b>null</b> or <b>empty</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemRelationship.#ctor(Microsoft.Health.HealthRecordItemKey,System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItemRelationship"/> instance for a relationship
            to the item with the specified key and relationship type.
            </summary>
            
            <param name="itemKey">
            The unique key of the health record item to related to, including the item ID and
            optionally the item version stamp.
            </param>
             
            <param name="relationshipType">
            The application defined type for the relationship. This is usually a descriptive tagging
            for the relationship. For example, a <see cref="T:Microsoft.Health.ItemTypes.Annotation"/> item may have a
            "annotation" relationship with a <see cref="T:Microsoft.Health.ItemTypes.Problem"/> item.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemKey"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemRelationship.#ctor(System.String,System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItemRelationship"/> instance for a relationship
            to the item with the specified client ID and relationship type.
            </summary>
            
            <param name="clientId">
            A client assigned ID of the health record item to be related to.
            </param>
             
            <param name="relationshipType">
            The application defined type for the relationship. This is usually a descriptive tagging
            for the relationship. For example, a <see cref="T:Microsoft.Health.ItemTypes.Annotation"/> item may have a
            "annotation" relationship with a <see cref="T:Microsoft.Health.ItemTypes.Problem"/> item.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="itemKey"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemRelationship.ItemKey">
            <summary>
            Gets or sets the key for the related <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <value>
            An instance of the <see cref="T:Microsoft.Health.HealthRecordItemKey"/> class with the item ID specified
            and optionally the item version stamp.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemRelationship.ClientId">
            <summary>
            Gets and sets a client assigned identifier for the related <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemRelationship.RelationshipType">
            <summary>
            Gets or sets the type of relationship between the items.
            </summary>
            
            <remarks>
            This property is optional.
            A relationship type is application defined and should be somewhat descriptive about the
            relationship. For example, an <see cref="T:Microsoft.Health.ItemTypes.Annotation"/> item may have an
            "annotation" relationship to a <see cref="T:Microsoft.Health.ItemTypes.Problem"/> item.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemSections">
            <summary>
            The section that will be or were retrieved when accessing 
            a <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <remarks>
            To enable efficient use of the network, the HealthVault service  
            retrieves only those portions of a <see cref="T:Microsoft.Health.HealthRecordItem"/> that 
            the application needs.
            These sections are identified in the <see cref="T:Microsoft.Health.HealthRecordView"/> 
            when performing a search, and are specified on a <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            when the item is retrieved.
            When <see cref="M:Microsoft.Health.HealthRecordAccessor.UpdateItems(System.Collections.Generic.IList{Microsoft.Health.HealthRecordItem})"/> is called, 
            only specified sections are updated.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.None">
            <summary>
            No sections are retrieved or represented in the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/> object.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.Core">
            <summary>
            The Core section of the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            is retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.Audits">
            <summary>
            The Audits section of the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            is retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.EffectivePermissions">
            <summary>
            The EffectivePermissions section is retrieved, showing the 
            permission granted to the caller of the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.BlobPayload">
            <summary>
            The BlobPayload section of the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            is retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.Signature">
            <summary>
            The Signature section of the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            is retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.Tags">
            <summary>
            The Tags section of the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            is retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.Xml">
            <summary>
            Gets the base XML section.
            </summary>
            
            <private>
            This is here even though it is not exposed by HealthVault
            to make it easier for SDK developers to use.
            </private>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.All">
            <summary>
            All sections of the <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            are retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSections.Default">
            <summary>
            Default sections <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            are retrieved. 
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemSerializationException">
            <summary>
            Represents the exception thrown when the serialization of a 
            type-specific health record item fails or if a mandatory element in 
            the health record item is missing.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSerializationException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemSerializationException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemSerializationException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
            <param name="innerException">
            The exception that occurred in the health record item type 
            serializer.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSerializationException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemSerializationException"/> 
            class  with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordItemSerializationException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemSignature">
            <summary>
            Represents a digital signature of the HealthRecordItem. 
            </summary>
            
            <remarks>
            A digital signature contains key information, which may be an X509 certificate,
            and a cryptographic hash. These may be used to verify the identity of the signer
            and the contents of the HealthRecordItem.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName">
            <summary>
            Represents the signature algorithm defined by:
            "http://www.w3.org/2000/09/xmldsig#rsa-sha1".
            </summary>
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordItemSignature"/> class 
            using default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.GetCertificate``1">
            <summary>
            Get's the X509Certificate2 used for the signature.
            </summary>
            
            <remarks>
            This method is deprecated. Please use <see cref="P:Microsoft.Health.HealthRecordItemSignature.X509Certificate2"/> to 
            access the signing certificate information.
            </remarks>                
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.Sign(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Xml.XmlDocument)">
            <summary>
            Signs the XML document.
            </summary>
            
            <param name="signingCertificate">
            The X509 certificate.
            </param>
            
            <param name="thingDoc">
            The XML document to sign.
            </param>
                    
            <remarks>
            This method uses the .Net SignedXml class to sign the thing. It passes in
            an XSLT transform to select the data-xml section the value of the data-other
            section.
            </remarks>
            
            <returns>
            An XmlElement containing the signature xml in the http://www.w3.org/2000/09/xmldsig
            namespace.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The specified argument is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The HealthRecordItem is already signed and may only have one signature.
            </exception>
            
            <exception cref="T:Microsoft.Health.SignatureFailureException">
            Signing failed. See the inner exception.
            The inner exception may be one of the following:
            A <see cref="T:System.Xml.XmlException"/> is thrown because there is a load or parse error loading 
            the xsl.
            A <see cref="T:System.Security.Cryptography.CryptographicException"/> is thrown because the nodelist from the xsl does 
            not contain an XmlDsigXsltTransform object.
            A <see cref="T:System.Security.Cryptography.CryptographicException"/> is thrown because signingCertificate.PrivateKey 
            is not an RSA or DSA key, or is unreadable.
            A <see cref="T:System.Security.Cryptography.CryptographicException"/> is thrown because signingCertificate.PrivateKey 
            is not a DSA or RSA object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.CheckCertificate">
             <summary>
             Checks the certificate in the signature of the XML document.
             </summary>
            
             <remarks>
             Calls 
             <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Verify"/>.
             </remarks>
            
             <exception cref="T:Microsoft.Health.CertificateValidationException">
             Certificate validation failed.
             The InnerException will contain a <see cref="T:System.Security.Cryptography.CryptographicException"/> if the
             certificate is unreadable.
             If the InnerException is <b>null</b> then the Message will contain information about
             the certificate and the error.
             </exception>
            
             <exception cref="T:System.InvalidOperationException">
             The certificate could not be validated because the <see cref="T:Microsoft.Health.HealthRecordItem"/> is
             not signed.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.GetCertificateFailureInfo(System.Security.Cryptography.X509Certificates.X509Certificate2)">
             <summary>
             Creates and returns a string with info about why a certificate failed to validate.
             </summary>
            
             <remarks>
             Calls <see cref="M:System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)"/> to create and validate a certificate chain.
             </remarks>
            
             <exception ref="CryptographicException">
             The certificate is unreadable.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.CheckSignature(System.Xml.XmlDocument)">
             <summary>
             Checks the signature of the XML document.
             </summary>
                    
             <param name="thingDoc">
             The signed XML document.
             This is passed in so that the signature validation can take updates into account.
             </param>
            
             <remarks>
             Calls the <see cref="M:Microsoft.Health.HealthRecordItemSignature.CheckSignature(System.Xml.XmlDocument)"/> method of <see cref="T:System.Security.Cryptography.Xml.SignedXml"/>.
             </remarks>
             
             <exception cref="T:Microsoft.Health.SignatureFailureException">
             Signature validation failed. See the inner exception.
             The inner exception is <see cref="T:System.Security.Cryptography.CryptographicException"/>, thrown because of one of:
             The SignatureAlgorithm property of the public key in the signature does 
             not match the SignatureMethod property.
             The signature description could not be created.
             The hash algorithm could not be created. 
             </exception>
            
             <exception cref="T:System.InvalidOperationException">
             The signature could not be validated because the <see cref="T:Microsoft.Health.HealthRecordItem"/> is not
             signed.
             </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.ParseSignatureXml(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Parse the Signature xml from the thingReader.
            </summary>
            
            <remarks>
            Creates an instance <see cref="T:System.Security.Cryptography.Xml.SignedXml"/> using a document created from thingReader 
            and the signature section of that document.
            </remarks>
            
            <exception cref="T:System.Xml.XmlException">
            There is a load or parse error in the XML.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.Security.Cryptography.Xml.Signature"/> section of the document was not found.
            </exception>
            
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            The <see cref="T:System.Security.Cryptography.Xml.Signature"/> section of the document does not contain a valid 
            SignatureValue property.
            The <see cref="T:System.Security.Cryptography.Xml.Signature"/>  section of the document does not contain a valid 
            SignedInfo property.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemSignature.CreateXsltTransform(System.String)">
             <summary>
             Create the XML that represents the transform.
             Copied from the sample in the docs.
             </summary>
             
             <exception cref="T:System.Xml.XmlException">
             There is a load or parse error loading the xsl parameter.
             </exception>
             
             <exception cref="T:System.Security.Cryptography.CryptographicException">
             The nodelist from the xsl parameter does not contain an XmlDsigXsltTransform object.
             </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemSignature.CertType">
            <summary>
            The type of the certificate used to sign the signature.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemSignature.X509Certificate2">
            <summary>
            Get's the X509Certificate2 used for the signature.
            </summary>
                    
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemSignature.Method">
            <summary>
            Gets the HealthVault signature method for this signature.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemSignature.BlobSignatureItems">
            <summary>
            Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> objects describing 
            the blobs that are part of this signature.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemSignature.AlgorithmName">
            <summary>
            Gets a string identifying the signature algorithm for this signature.         
            </summary>
            <remarks>
            This value is currently <see cref="F:Microsoft.Health.HealthRecordItemSignature.RsaSha1W3cAlgorithmName"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemState">
            <summary>
            Represents the state of the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemState.Unknown">
            <summary>
            The record item state returned from the server is not understood
            by this client.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemState.Active">
            <summary>
            The health record item is active.
            </summary>
            
            <remarks>
            Active health record items are retrieved by default and can be
            updated.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemState.Deleted">
            <summary>
            The health record item is deleted.
            </summary>
            
            <remarks>
            Deleted health record items are retrieved when specified in  
            <see cref="P:Microsoft.Health.HealthRecordFilter.States"/>. 
            Deleted health record items are useful to view for auditing 
            purposes and cannot be updated.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemStates">
            <summary>
            The states of the health record item to search for.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemStates.Active">
            <summary>
            Health record items with state 
            <see cref="F:Microsoft.Health.HealthRecordItemState.Active"/> 
            are retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemStates.Deleted">
            <summary>
            Health record items with state 
            <see cref="F:Microsoft.Health.HealthRecordItemState.Deleted"/> 
            are retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemStates.Default">
            <summary>
            Health record items with state 
            <see cref="F:Microsoft.Health.HealthRecordItemState.Active"/> are
            retrieved by default.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemStates.Any">
            <summary>
            Health record items with any state will be retrieved.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemTypeDefinition">
            <summary>
            Describes the schema and structure of a health record item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemTypeDefinition.CreateFromXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Health.HealthRecordItemTypeDefinition"/> from the specified
            XML.
            </summary>
            
            <param name="typeNavigator">
            XML navigator containing the information needed to construct the instance. This XML
            must adhere to the schema for a ThingType as defined by response-getthingtype.xsd.
            </param>
            
            <returns>
            An instance of <see cref="T:Microsoft.Health.HealthRecordItemTypeDefinition"/> constructed from the 
            specified XML.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String,Microsoft.Health.HealthRecordItem)">
            <summary>
            Transforms the XML of the specified health record item using the specified transform.
            </summary>
            
            <param name="transformName">
            The name of the transform to use. Supported transforms for the type can be found in the
            <see cref="P:Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames"/> collection.
            </param>
            
            <param name="item">
            The health record item to be transformed.
            </param>
            
            <returns>
            A string containing the results of the transform.
            </returns>
            
            <remarks>
            If the transform has been used before a cached instance of the compiled transform will
            be used. Compiled transforms are not thread safe. It is up to the caller to ensure
            that multiple threads do not attempt to use the same transform at the same time.
            </remarks>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            If <paramref name="transformName"/> could not be found in the <see cref="P:Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource"/>
            collection.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemTypeDefinition.GetTransform(System.String)">
            <summary>
            Gets a compiled version of the specified transform.
            </summary>
            
            <param name="transformName">
            The name of the transform to get.
            </param>
            
            <returns>
            A compiled version of the specified transform.
            </returns>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            If <paramref name="transformName"/> is not found as a transform for the item type.
            </exception>
            
            <exception cref="T:System.Xml.XmlException">
            There is a load or parse error in the specified transform.
            </exception>
            
            <exception cref="T:System.Xml.Xsl.XsltException">
            The specified style sheet contains an error.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.Name">
            <summary>
            Gets the type name.
            </summary>
            
            <value>
            A string representing the type name.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.TypeId">
            <summary>
            Gets the type unique identifier.
            </summary>
            
            <value>
            A GUID representing the type identifier.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.XmlSchemaDefinition">
            <summary>
            Gets the XML schema definition.
            </summary>
            
            <value>
            A string representing the definition.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.IsCreatable">
            <summary>
            Gets a value indicating whether instances of the type are creatable.
            </summary>
            
            <value>
            <b>true</b> if the instances are creatable; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.IsImmutable">
            <summary>
            Gets a value indicating whether instances of the type are immutable.
            </summary>
            
            <value>
            <b>true</b> if the instances are immutable; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.IsSingletonType">
            <summary>
            Gets a value indicating whether only a single instance of the type 
            can exist for each health record.
            </summary>
            
            <value>
            <b>true</b> if only a single instance of the type can exist for each
            health record; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.ColumnDefinitions">
            <summary>
            Gets the column definitions when dealing with the type as a
            single type table.
            </summary>
            
            <value>
            A read-only collection containing the defintions.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.SupportedTransformNames">
            <summary>
            Gets the HealthVault transform names supported by the type.
            </summary>
            
            <value>
            A read-only collection containing the transforms.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.TransformSource">
            <summary>
            Gets the HealthVault transforms supported by the type.
            </summary>
            
            <value>
            A dictionary containing each of the transforms supported by the type. The key is the
            transform name and the value is the source of the transform.
            </value>
            
            <remarks>
            The transform can be run by calling one of the <see cref="M:Microsoft.Health.HealthRecordItemTypeDefinition.TransformItem(System.String,Microsoft.Health.HealthRecordItem)"/> overloads.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.Versions">
            <summary>
            Gets a collection of the version information for the type.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeDefinition.EffectiveDateXPath">
            <summary>
            Gets the XPath to the effective date element in the <see cref="P:Microsoft.Health.HealthRecordItem.TypeSpecificData"/>.
            </summary>
            
            <value>
            The String representation of the XPath.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemTypePermission">
            <summary>
            Provides online and offline access permissions to persons for a health 
            record item type (<see cref="T:Microsoft.Health.HealthRecordItemTypeDefinition"/>) in a 
            health record in the context of an application.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordItemTypePermission.CreateFromXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates an instance of 
            <see cref="T:Microsoft.Health.HealthRecordItemTypePermission"/> from XML.
            </summary>
            
            <param name="navigator">
            The XML containing the <see cref="T:Microsoft.Health.HealthRecordItemTypePermission"/>
            information.
            </param>
            
            <returns>
            A new instance of <see cref="T:Microsoft.Health.HealthRecordItemTypePermission"/> 
            populated with the information in the XML.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The XPathNavigator intended to contain the XML information is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypePermission.TypeId">
            <summary>
            Gets the unique identifier of the health record item 
            type associated with the permissions.
            </summary>
            
            <returns>
            The GUID of the health record item type.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypePermission.OnlineAccessPermissions">
            <summary>
            Gets the permissions for online access for the person, for the  
            health record item type in the health record in the context of 
            the application.
            </summary>
            
            <returns>
            The <see cref="T:Microsoft.Health.HealthRecordItemPermissions"/> for online access.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypePermission.OfflineAccessPermissions">
            <summary>
            Gets the permissions for offline access for the person, for the  
            health record item type in the health record in the context of 
            the application.
            </summary>
            
            <returns>
            The <see cref="T:Microsoft.Health.HealthRecordItemPermissions"/> for offline access.
            </returns> 
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemTypeSections">
             <summary>
             Enumeration used to specify the sections of health record item type definition that should be returned.
             </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.None">
            <summary>
            Indicates no information about the health record item type definition should be
            returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.Core">
            <summary>
            Indicates the core information about the health record item type definition
            should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.Xsd">
            <summary>
            Indicates the schema of the health record item type definition should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.Columns">
            <summary>
            Indicates the columns used by the health record item type definition should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.Transforms">
            <summary>
            Indicates the transforms supported by the health record item type definition 
            should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.TransformSource">
            <summary>
            Indicates the transforms and their XSL source supported by the health record
            item type definition should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.Versions">
            <summary>
            Indicates the versions of the health record item type definition should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.EffectiveDateXPath">
            <summary>
            Indicates the effective date XPath of the health record item type definition
            should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthRecordItemTypeSections.All">
            <summary>
            Indicates all information for the health record item type definition
            should be returned. 
            </summary>
        </member>
        <member name="T:Microsoft.Health.HealthRecordItemTypeVersionInfo">
            <summary>
            Represents the version information for a health record item type.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeVersionInfo.VersionTypeId">
            <summary>
            Gets the unique identifier for the versioned health record item type.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeVersionInfo.Name">
            <summary>
            Gets the name for this version of the health record item type.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordItemTypeVersionInfo.VersionSequence">
            <summary>
            Gets the sequence number for the health record item type version.
            </summary>
            <remarks>
            The sequence number starts at one and is incremented for each new version
            of the type that gets added.
            </remarks>
        </member>
        <member name="T:Microsoft.Health.HealthRecordReauthorizationRequired">
            <summary>
            The exception representing an error while trying to log a user on to an application that
            has an authorized record which no longer meets the minimum requirements for that application
            or the application has changed its minimum authorization requirements.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordReauthorizationRequired.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordReauthorizationRequired"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordReauthorizationRequired.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordReauthorizationRequired"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordReauthorizationRequired.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordReauthorizationRequired"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordReauthorizationRequired.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthRecordReauthorizationRequired"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordReauthorizationRequired.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordSearcher">
            <summary>
            Searches for health record items in HealthVault records.
            </summary>
            
            <remarks>
            This class wraps up the logic for constructing a "GetThings" query
            against the HealthVault service.  It generates the necessary XML to 
            call the "GetThings" and retrieve health record items that match the specified
            criteria.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.#ctor(Microsoft.Health.HealthRecordAccessor)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordSearcher"/> 
            class with the default parameters.
            </summary>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="record"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.GetMatchingItems">
            <summary>
            Gets the health record items that match the filters as specified by 
            the properties of this class.
            </summary>
            
            <returns>
            A collection of health record items that match the applied filters.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The response from the server was anything but 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.Ok"/>.
            -or-
            <see cref="P:Microsoft.Health.HealthRecordSearcher.Filters"/> is empty
            or contains invalid filters.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.GetMatchingItemsReader">
            <summary>
            Gets the health record items that match the filters as specified by 
            the properties of this class.
            </summary>
            
            <returns>
            An XmlReader representing the raw results of the search.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            <br/><br/>
            This method is typically used when the calling application wants to
            handle the raw health record item XML directly instead of using the 
            object model.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.GetMatchingItemsRaw">
            <summary>
            Gets the health record items that match the filters as specified by 
            the properties of this class.
            </summary>
            
            <returns>
            An XPathNavigator representing the raw results of the search.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            <br/><br/>
            This method is typically used when the calling application wants to
            handle the raw health record item XML directly instead of using the 
            object model.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.ValidateFilters">
            <summary>
            Checks whether at least one filter was specified
            and that all specified filters are valid.
            </summary>
            
            <exception cref="T:Microsoft.Health.HealthServiceResponseError">
            If no filter was specified or if any specified filter was invalid.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.GetSingleItem(System.Guid,Microsoft.Health.HealthRecordItemSections)">
            <summary>
            Gets a single health record item from the associated record by 
            using the item identifier.
            </summary>
            
            <param name="itemId">
            The unique identifier for the health record item.
            </param>
            
            <param name="sections">
            The data sections of the health record item that should be retrieved.
            </param>
            
            <returns>
            An instance of a <see cref="T:Microsoft.Health.HealthRecordItem"/> 
            representing the health record item with the specified identifier.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            <br/><br/>
            All filters are cleared and replaced with a single filter
            for the specified item.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The server returned something other than a code of 
            HealthServiceStatusCode.OK, or the result count did not equal one (1).
            -or-
            <see cref="P:Microsoft.Health.HealthRecordSearcher.Filters"/> is empty
            or contains invalid filters.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.GetTransformedItems(System.String)">
            <summary>
            Gets the health record items specified by the 
            <see cref="P:Microsoft.Health.HealthRecordSearcher.Filters"/> and runs them through the specified 
            transform.
            </summary>
            
            <param name="transform">
            A URL to a transform to run on the resulting XML. This can be
            a fully-qualified URL or the name of one of the standard XSLs
            provided by the HealthVault system.
            </param>
            
            <returns>
            The string resulting from performing the specified transform on
            the XML representation of the items.
            </returns>
            
            <remarks>
            This method accesses the HealthVault service across the network.
            <br/><br/>
            Any call to HealthVault may specify a transform to be run on the
            response XML. The transform can be specified as a XSL fragment or
            a well-known transform tag provided by the HealthVault service. If a
            XSL fragment is specified, it gets compiled and cached on the server.
            <br/>
            <br/>
            A final-xsl is useful when you want to convert the result from XML to
            HTML so that you can display the result directly in a web page.
            You may also use it to generate other data formats like CCR, CCD, CSV,
            RSS, etc.
            <br/>
            <br/>
            Transform fragments cannot contain embedded script. The following set
            of parameters are passed to all final-xsl transforms:<br/>
            <ul>
                <li>currentDateTimeUtc - the date and time just before the transform 
                started executing</li>
                <li>requestingApplicationName - the name of the application that
                made the request to HealthVault.</li>
                <li>countryCode - the ISO 3166 country code from the request.</li>
                <li>languageCode - the ISO 639-1 language code from the request.</li>
                <li>personName - the name of the person making the request.</li>
                <li>recordName - if the request identified a HealthVault record to 
                be used, this parameter contains the name of that record.</li>
            </ul>
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="transform"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            <see cref="P:Microsoft.Health.HealthRecordView.Sections"/> does not
            contain the XML section in the view.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            There is a failure retrieving the items.
            -or-
            No filters have been specified.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.PrepareRequest">
            <summary>
            Gets the request object including the necessary parameters for
            the "GetThings" request.
            </summary>
            
            <returns>
            The request object for the thing search with the parameters filled
            in.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            No filters have been specified.
            </exception>
                    
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.Execute">
            <summary>
            Executes the search using the filters supplied.
            </summary>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The response from the server was anything but 
            HealthServiceStatusCode.OK, or no filters have been specified.
            </exception>
                    
        </member>
        <member name="M:Microsoft.Health.HealthRecordSearcher.GetParametersXml">
            <summary>
            Generates the XML for the parameters for the "GetThings" request.
            </summary>
            
            <returns>
            An XML string defining the parameters for the "GetThings" call.
            </returns>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            No filters have been specified.
            </exception>
                    
        </member>
        <member name="P:Microsoft.Health.HealthRecordSearcher.Record">
            <summary>
            Gets the health record that is being searched for health record items.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthRecordAccessor"/> representing the record.
            </value>
            
            <remarks>
            The authenticated person must have 
            <see cref="F:Microsoft.Health.HealthRecordItemPermissions.Read"/> access rights to the
            health record to get results from the query.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordSearcher.Filters">
            <summary>
            Gets the filters associated with the search.
            </summary>
            
            <remarks>
            To add a search filter, call the Add method of the
            returned collection.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordState">
             <summary>
             The state of a record.
             </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordState.Unknown">
            <summary>
            An unknown state was returned from the server.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordState.Active">
             <summary>
             Active. All is well.
             </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordState.ReadOnly">
             <summary>
             The record can be viewed, but not modified.
             </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordState.Suspended">
             <summary>
             The record is inaccessible and was disabled by the system.
             </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthRecordState.Deleted">
             <summary>
             The record is inaccessible and was deleted by the user.
             </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthRecordUpdateInfo">
            <summary>
            Encapsulates information about when changes occur to the collection of 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>s occur in a <see cref="T:Microsoft.Health.HealthRecordAccessor"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordUpdateInfo.RecordId">
            <summary>
            Gets the ID of the <see cref="T:Microsoft.Health.HealthRecordAccessor"/> updated.
            </summary>
        </member>
        <member name="P:Microsoft.Health.HealthRecordUpdateInfo.LastUpdateDate">
            <summary>
            Gets the timestamp when an addition, deletion or update occured to the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>s in the <see cref="T:Microsoft.Health.HealthRecordAccessor"/> 
            </summary>
        </member>
        <member name="T:Microsoft.Health.HealthRecordView">
            <summary>
            Defines a result view for use with 
            <see cref="T:Microsoft.Health.HealthRecordSearcher"/> searches.
            </summary>
            
            <remarks>
            This class wraps up the logic for constructing the format tag for 
            querying health record items with the "GetThings" method.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordView.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthRecordView"/> class 
            using default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordView.ToString">
            <summary>
            Gets a string representation of the instance.
            </summary>
            
            <returns>
            A string representing the XML used as the group portion of the
            XML request for a "GetThings" method call.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthRecordView.AddViewXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML for the format tag used in the
            "GetThings" request.
            </summary>
            
            <param name="writer">
            The XMLWriter that receives the format tag.
            </param>
            
            <exception cref="T:System.ArgumentException">
            No sections or transforms were specified for the search.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordView.Sections">
            <summary>
            Gets or sets the sections that will be retrieved when the
            query is made.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.HealthRecordItemSections"/>. The default
            values are Core and XML.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordView.TransformsToApply">
            <summary>
            Gets the names of the transforms to apply to the resulting 
            XML data section.
            </summary>
            
            <remarks>
            The name of the transform refers to the format of the data to
            which the transform converts the XML data. For example, "rss"
            converts the XML data into RSS format. Note, all formats to
            which the data can be converted are legal XML documents 
            (RSS, XHTML, and so on).  A list of the valid transform names is 
            available in the HealthVault Developer's Guide.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordView.TypeVersionFormat">
            <summary>
            Gets a collection of the version IDs for the types in which the results should be 
            formatted.
            </summary>
            
            <remarks>
            When a type gets versioned, HealthVault will retrieve instances of 
            multiple versions even when only one type is specified in the request
            filter.  By default HealthVault will map the XML of the instance to
            the version supported by the application based on the base 
            authorization XML specified in the configuration of the application in
            HealthVault. However, if multiple versions are supported by the 
            application, it can use this property to state the version format to
            use when writing out the instance XML.
            For example, when querying for medications, HealthVault will retrieve
            medications of both version one and two schemas. If an application
            only supports version one of the medication schema, then HealthVault
            will automatically map version two instances down to the version one
            schema. However, if the application supports both version one and two
            by declaring both type IDs in the applications configuration, then
            version one instances will be returned using the version one schema, and
            version two instances will be returned using the version two schema.
            If this application wants to retrieve all instances using a common 
            schema (say version two), then it would specify the version two type
            ID in this parameter and all instances will be mapped to version two
            of the medication schema before being returned.
            Be careful when adding to this collection. If you are not specifying any 
            <see cref="P:Microsoft.Health.HealthRecordView.TransformsToApply"/> and the Microsoft.Health.ItemTypes namespace doesn't
            contain a class for parsing the type version you specify, you will get a
            <see cref="T:Microsoft.Health.HealthRecordItem"/> instance rather than the type specific class instance.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordView.BlobNames">
            <summary>
            Gets a collection representing the names of the BLOBs to return for the item(s).
            </summary>
            
            <remarks>
            If no BLOB names are specified, all BLOBs will be returned.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthRecordView.BlobFormat">
            <summary>
            Gets the format of the BLOB that should be returned.
            </summary>
            
            <remarks>
            Defaults to <see cref="P:Microsoft.Health.HealthRecordView.BlobFormat"/>.Unknown.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceAccessDeniedException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.AccessDenied"/>
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAccessDeniedException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.AccessDenied"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type. 
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAccessDeniedException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAccessDeniedException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAccessDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.DuplicateCredentialFound"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.DuplicateCredentialFound"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceApplicationDuplicateCredentialException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceAssemblyInfo">
            <summary>
            Provides information about the HealthVault assemblies.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAssemblyInfo.Url">
            <summary>
            Gets the HealthVault URL.
            </summary>
            
            <value>
            An instance of Uri representing the HealthVault URL.
            </value>
            
            <remarks>
            This is the URL to the HealthVault.ashx, which is used to call the
            HealthVault XML methods.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAssemblyInfo.Version">
            <summary>
            Gets the version of the HealthVault assembly.
            </summary>
            
            <value>
            A string representing the version.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAssemblyInfo.DocumentationUrl">
            <summary>
            Gets the URL of the documentation for the assembly.
            </summary>
            <value>
            An instance of Uri representing the documentation URL.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceAudit">
            <summary>
            Represents an audit trail of creations or updates to
            information in the HealthVault service.
            </summary>
            
            <remarks>
            The audit records when the operation
            happened, by which application, and by which person.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAudit.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthServiceAudit"/>
            class using default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAudit.ToString">
             <summary>
             Gets a string representation of the object.
             </summary>
             
             <returns>
             A string in the following format:
            
                 "&lt;timestamp&gt;, &lt;app-id&gt;, &lt;person-id&gt;"
             </returns>
             
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.Timestamp">
            <summary>
            Gets the time stamp of the audit.
            </summary>
            
            <value>
            A DateTime in UTC representing when the operation happened.
            </value>
            
            <remarks>
            The application must convert the value to local time
            if needed.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.ApplicationId">
            <summary>
            Gets the unique identifier of the application.
            </summary>
            
            <value>
            A Guid representing the unique identifier of the application.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.ApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            
            <value>
            A string representing the name of the application.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.PersonId">
            <summary>
            Gets the unique identifier of the person.
            </summary>
            
            <value>
            A Guid representing the unique identifier of the person.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.PersonName">
            <summary>
            Gets the name of the person.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.ImpersonatorId">
            <summary>
            Gets the unique identifier of the impersonator. 
            </summary>
            
            <value>
            A Guid representing the identifier of the impersonator.
            </value>
            
            <remarks>
            The value is <b>null</b> if impersonation was not used to create, 
            change, or delete the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.ImpersonatorName">
            <summary>
            Gets the name of the impersonator. 
            </summary>
            
            <value>
            A string representing the name of the impersonator.
            </value>
            
            <remarks>
            The value is <b>null</b> if impersonation was not used to create, 
            change, or delete the <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.AccessAvenue">
            <summary>
            Gets the access avenue used to create, change, or delete the 
            <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthServiceAuditAccessAvenue"/>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.AuditAction">
            <summary>
            Gets the action performed.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceAudit.MasterApplicationId">
            <summary>
            The unique application identifier for the code base of the
            application that created the audit.
            </summary>
            
            <remarks>
            When an application performs a write action on an item the audit
            is stamped with the applications unique identifier. In the case of
            master/child applications, or SODA applications, the <see cref="P:Microsoft.Health.HealthServiceAudit.ApplicationId"/>
            is the identifier of the child or installation of the application.
            The <see cref="P:Microsoft.Health.HealthServiceAudit.MasterApplicationId"/> is the application identifier for the root of 
            the configuration for that application. In the case of master/child
            applications, this is the application identifier of the master. For
            SODA applications, this is the application identifier for the root
            configuration of the application.        
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceAuditAction">
            <summary>
            Indicates the operation that was performed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceAuditAction.Unknown">
            <summary>
            The action returned from the server is not understood by this
            client.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceAuditAction.Created">
            <summary>
            A creation occurred.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceAuditAction.Updated">
            <summary>
            An update occurred.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceAuditAction.Deleted">
            <summary>
            A deletion occurred.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceAuditAccessAvenue">
            <summary>
            The avenue used to perform the operation. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceAuditAccessAvenue.Unknown">
            <summary>
            The access avenue returned from the server is not understood by
            this client.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceAuditAccessAvenue.Online">
            <summary>
            Online access avenue was used to perform the operation.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceAuditAccessAvenue.Offline">
            <summary>
            Offline access avenue was used to perform the operation.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.AuthenticatedSessionTokenExpired"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException"/> 
            class with the specified error information representing a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.AuthenticatedSessionTokenExpired"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type. This error indicates that the 
            authorization token supplied to HealthVault is malformed or 
            otherwise faulty.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            A string representing the error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException"/> 
            class with the specified serialization information.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceCredentialTokenExpiredException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.CredentialTokenExpired"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceCredentialTokenExpiredException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceAuthenticatedSessionTokenExpiredException"/> 
            class with the specified error information representing a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.CredentialTokenExpired"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type. This error indicates that the 
            authorization token supplied to HealthVault is malformed or 
            otherwise faulty.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceCredentialTokenExpiredException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceCredentialTokenExpiredException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceCredentialTokenExpiredException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceCredentialTokenExpiredException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            A string representing the error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceCredentialTokenExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceCredentialTokenExpiredException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceCredentialTokenExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the 
            <see cref="T:Microsoft.Health.HealthServiceCredentialTokenExpiredException"/> 
            class with the specified serialization information.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceCredentialTokenExpiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceEmailNotValidatedException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.EmailNotValidated"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceEmailNotValidatedException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceEmailNotValidatedException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.EmailNotValidated"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceEmailNotValidatedException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceEmailNotValidatedException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceEmailNotValidatedException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceEmailNotValidatedException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceEmailNotValidatedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceEmailNotValidatedException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceEmailNotValidatedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceEmailNotValidatedException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceEmailNotValidatedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceErrorContext">
            <summary>
            Contains the error context of the service when the error occurred.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceErrorContext.ToString">
            <summary>
            Retrieves the string representation of the <see cref="T:Microsoft.Health.HealthServiceErrorContext"/> 
            object.
            </summary>
            
            <returns> 
            A string representing the contents of the <see cref="T:Microsoft.Health.HealthServiceErrorContext"/>
            object.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceErrorContext.ServerName">
            <summary>
            Gets the name of the server that was handling the request when
            the error occurred.
            </summary>
            
            <value>
            A string representing the server name.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceErrorContext.ServerIPAddresses">
            <summary>
            Gets the IP addresses of the server that was handling the request
            when the error occurred.
            </summary>
            
            <value>
            A read-only collection of IP addresses.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceErrorContext.InnerException">
            <summary>
            Gets the exception message and stack trace of the exception
            from the server.
            </summary>
            
            <value>
            A string representing the exception message and stack trace.
            </value>
            
            <remarks>
            This is the ToString() of the exception that occurred while 
            handling the request.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceExceptionHelper">
            <summary>
            Helper class that allows the SDK to throw the appropriate
            HealthServiceException based on the status code returned by 
            HealthVault.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceExceptionHelper.GetHealthServiceException(System.Int32,Microsoft.Health.HealthServiceResponseError)">
             <summary>
             Helper method that allows the SDK to throw the appropriate
             HealthServiceException based on the status code returned by 
             HealthVault.
             </summary>
             
             <param name="errorCodeId">
             The integer status code returned by HealthVault representing the 
             error which occurred.
            </param>
             <param name="error">
             Information about an error that occurred while processing
             the request.
             </param>
             
        </member>
        <member name="M:Microsoft.Health.HealthServiceExceptionHelper.GetHealthServiceException(Microsoft.Health.HealthServiceStatusCode,Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Helper method that allows the SDK to throw the appropriate
            HealthServiceException based on the status code indicating the error
            type.
            </summary>
            
            <param name="errorCode">
            The status code representing the error which occurred.
            </param>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.InvalidApplicationAuthorization"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.InvalidApplicationAuthorization"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type. The error indicates that the 
            application does not have an entry in the authorized application 
            information and as such is not authorized to perform the task.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidApplicationAuthorizationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceInvalidPersonException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.InvalidPerson"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidPersonException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidPersonException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.InvalidPerson"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type. The error indicates that 
            the person specified in the request is either nonexistent or inactive.
            </remarks>
            
            <param name="error">
            information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidPersonException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidPersonException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidPersonException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidPersonException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidPersonException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidPersonException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidPersonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidPersonException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidPersonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceInvalidRecordException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.InvalidRecord"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidRecordException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidRecordException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.InvalidRecord"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type. The error indicates that the 
            specified record is nonexistent.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidRecordException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidRecordException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidRecordException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidRecordException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidRecordException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidRecordException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidRecordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceInvalidRecordException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceInvalidRecordException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceLocation">
            <summary>
            Provides methods that retrieve URLs of important locations for the 
            HealthVault service.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String)">
            <summary>
            Constructs a URL to be redirected to via the HealthVault service Shell
            URL redirector, given the specified location.
            </summary>
            
            <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            
            Locations and their parameters include:
            <ul>
                <li><b>APPAUTH</b> - allows the user to select and authorize a health record for use 
                        with the specified application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>APPREDIRECT</b> - Redirect user to a HealthVault application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the destination application.</li>
                        <li>refappid - A GUID that uniquely identifies the referring application.</li>
                        <li>target - string used as the "target" parameter when user browser is 
                                 redirected to the destination application's action-url.</li>
                        <li>targetqs - string used as the "targetqs" parameter when user browser is 
                                 redirected to the destination application's action-url</li>
                    </ul>
                </li>
                <li><b>APPSIGNOUT</b> - Signs the user out of HealthVault.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                    </ul>
                </li>
                <li><b>AUTH</b> - the sign-in page
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at one time.</li>
                        <li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>CREATEACCOUNT</b> - Allows the user to create a new HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>nsi - no sign in page. The sign in page (where the user enters an email address) is bypassed if set to 1.</li>
                    </ul>
                </li>
                <li><b>CREATEAPPLICATION</b> - Allows a SODA master application to create a new client application instance.
                    <ul>
                        <li>publickey - the public key of the new client application instance.  The key
                                 must be an X509 certificate that is base64 encoded.</li>
                        <li>appid - the GUID that uniquely identifies the SODA master application.  The new application instance will
                                 be a child of this master application.</li>
                        <li>instanceid - the GUID that will be assigned to the client application.  This ID must be unique
                                 for every application instance.</li>
                        <li>instancename - A string that identifies the device the new application instance will run on, such
                                 as the computer name.</li>
                    </ul>
                </li>
                <li><b>CREATERECORD</b> - Allows the user to create a new HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>HELP</b> - The HealthVault help page.
                    <ul>
                        <li>topicid - optional. If not specified the table of contents will be shown.
                            <ul>
                                <li>faq - HealthVault Frequently Asked Questions</li>
                                <li>HelpDirectory - Main HealthVault help page</li>
                                <li>PrivacyPolicy - HealthVault privacy policy</li>
                                <li>Service Agreement - HealthVault Service Agreement</li>
                                <li>CodeofConduct - HealthVault Code of Conduct</li>
                            </ul>
                        </li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>MANAGEACCOUNT</b> - Takes the user to a page to manage their account profile.
                <br/>The shell does not provide a mechanism to return to the application from the
                account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>RECONCILE</b> - A page that allows a HealthVault user to review the individual 
                                       data elements within a CCR or CCD item and transform/merge them into individual HealthVault items in their record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>thingid - CCR/CCD item identifier.</li>
                    </ul>
                </li>
                <li><b>RECORDLIST</b> - A page that lists all records of a HealthVault user.
                    <ul>
                        <li>appid - optional, the page displays only records which the specified application is authorized to access.</li>
                    </ul>
                </li>
                <li><b>SHAREDAPPDETAILS</b> - Allows the user to manage application authorization for a HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>SHARERECORD</b> - Allows the user to share a record that they are a custodian of to another HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
                <li><b>VIEWITEMS</b> - Allows a HealthVault user to view all of the items of the specified data type in the their record.
                    <ul>
                        <li>typeid - data type identifier.</li>
                        <li>additem - flag to show the new item dialog for the data type.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
            </ul>
            </param>
            
            <remarks>
            The <paramref name="targetLocation"/> is passed as the target 
            parameter value to the redirector URL.
            </remarks>
            
            <returns>
            The constructed URL.
            </returns>
            
            <exception cref="T:System.UriFormatException">
            The specific target location constructs an improper URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String)">
            <summary>
            Constructs a URL to be redirected to via the HealthVault service Shell
            URL redirector, given the specified location.
            </summary>
            
            <param name="shellUrl">
            The HealthVault Shell redirector URL.
            </param>
            
            <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            
            Locations and their parameters include:
            <ul>
                <li><b>APPAUTH</b> - allows the user to select and authorize a health record for use 
                        with the specified application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>APPREDIRECT</b> - Redirect user to a HealthVault application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the destination application.</li>
                        <li>refappid - A GUID that uniquely identifies the referring application.</li>
                        <li>target - string used as the "target" parameter when user browser is 
                                 redirected to the destination application's action-url.</li>
                        <li>targetqs - string used as the "targetqs" parameter when user browser is 
                                 redirected to the destination application's action-url</li>
                    </ul>
                </li>
                <li><b>APPSIGNOUT</b> - Signs the user out of HealthVault.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                    </ul>
                </li>
                <li><b>AUTH</b> - the sign-in page
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at one time.</li>
                        <li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>CREATEACCOUNT</b> - Allows the user to create a new HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>nsi - no sign in page. The sign in page (where the user enters an email address) is bypassed if set to 1.</li>
                    </ul>
                </li>
                <li><b>CREATEAPPLICATION</b> - Allows a SODA master application to create a new client application instance.
                    <ul>
                        <li>publickey - the public key of the new client application instance.  The key
                                 must be an X509 certificate that is base64 encoded.</li>
                        <li>appid - the GUID that uniquely identifies the SODA master application.  The new application instance will
                                 be a child of this master application.</li>
                        <li>instanceid - the GUID that will be assigned to the client application.  This ID must be unique
                                 for every application instance.</li>
                        <li>instancename - A string that identifies the device the new application instance will run on, such
                                 as the computer name.</li>
                    </ul>
                </li>
                <li><b>CREATERECORD</b> - Allows the user to create a new HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>HELP</b> - The HealthVault help page.
                    <ul>
                        <li>topicid - optional. If not specified the table of contents will be shown.
                            <ul>
                                <li>faq - HealthVault Frequently Asked Questions</li>
                                <li>HelpDirectory - Main HealthVault help page</li>
                                <li>PrivacyPolicy - HealthVault privacy policy</li>
                                <li>Service Agreement - HealthVault Service Agreement</li>
                                <li>CodeofConduct - HealthVault Code of Conduct</li>
                            </ul>
                        </li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>MANAGEACCOUNT</b> - Takes the user to a page to manage their account profile.
                <br/>The shell does not provide a mechanism to return to the application from the
                account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>RECONCILE</b> - A page that allows a HealthVault user to review the individual 
                                       data elements within a CCR or CCD item and transform/merge them into individual HealthVault items in their record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>thingid - CCR/CCD item identifier.</li>
                    </ul>
                </li>
                <li><b>RECORDLIST</b> - A page that lists all records of a HealthVault user.
                    <ul>
                        <li>appid - optional, the page displays only records which the specified application is authorized to access.</li>
                    </ul>
                </li>
                <li><b>SHAREDAPPDETAILS</b> - Allows the user to manage application authorization for a HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>SHARERECORD</b> - Allows the user to share a record that they are a custodian of to another HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
                <li><b>VIEWITEMS</b> - Allows a HealthVault user to view all of the items of the specified data type in the their record.
                    <ul>
                        <li>typeid - data type identifier.</li>
                        <li>additem - flag to show the new item dialog for the data type.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
            </ul>
            </param>
            
            <remarks>
            The <paramref name="targetLocation"/> is passed as the target 
            parameter value to the redirector URL.
            </remarks>
            
            <returns>
            The constructed URL.
            </returns>
            
            <exception cref="T:System.UriFormatException">
            The specific target location constructs an improper URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.String,System.String)">
            <summary>
            Constructs a URL to be redirected to via the HealthVault service
            Shell URL redirector, given the specified location and query.
            </summary>
            
            <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            
            Locations and their parameters include:
            <ul>
                <li><b>APPAUTH</b> - allows the user to select and authorize a health record for use 
                        with the specified application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>APPREDIRECT</b> - Redirect user to a HealthVault application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the destination application.</li>
                        <li>refappid - A GUID that uniquely identifies the referring application.</li>
                        <li>target - string used as the "target" parameter when user browser is 
                                 redirected to the destination application's action-url.</li>
                        <li>targetqs - string used as the "targetqs" parameter when user browser is 
                                 redirected to the destination application's action-url</li>
                    </ul>
                </li>
                <li><b>APPSIGNOUT</b> - Signs the user out of HealthVault.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                    </ul>
                </li>
                <li><b>AUTH</b> - the sign-in page
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at one time.</li>
                        <li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>CREATEACCOUNT</b> - Allows the user to create a new HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>nsi - no sign in page. The sign in page (where the user enters an email address) is bypassed if set to 1.</li>
                    </ul>
                </li>
                <li><b>CREATEAPPLICATION</b> - Allows a SODA master application to create a new client application instance.
                    <ul>
                        <li>publickey - the public key of the new client application instance.  The key
                                 must be an X509 certificate that is base64 encoded.</li>
                        <li>appid - the GUID that uniquely identifies the SODA master application.  The new application instance will
                                 be a child of this master application.</li>
                        <li>instanceid - the GUID that will be assigned to the client application.  This ID must be unique
                                 for every application instance.</li>
                        <li>instancename - A string that identifies the device the new application instance will run on, such
                                 as the computer name.</li>
                    </ul>
                </li>
                <li><b>CREATERECORD</b> - Allows the user to create a new HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>HELP</b> - The HealthVault help page.
                    <ul>
                        <li>topicid - optional. If not specified the table of contents will be shown.
                            <ul>
                                <li>faq - HealthVault Frequently Asked Questions</li>
                                <li>HelpDirectory - Main HealthVault help page</li>
                                <li>PrivacyPolicy - HealthVault privacy policy</li>
                                <li>Service Agreement - HealthVault Service Agreement</li>
                                <li>CodeofConduct - HealthVault Code of Conduct</li>
                            </ul>
                        </li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>MANAGEACCOUNT</b> - Takes the user to a page to manage their account profile.
                <br/>The shell does not provide a mechanism to return to the application from the
                account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>RECONCILE</b> - A page that allows a HealthVault user to review the individual 
                                       data elements within a CCR or CCD item and transform/merge them into individual HealthVault items in their record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>thingid - CCR/CCD item identifier.</li>
                    </ul>
                </li>
                <li><b>RECORDLIST</b> - A page that lists all records of a HealthVault user.
                    <ul>
                        <li>appid - optional, the page displays only records which the specified application is authorized to access.</li>
                    </ul>
                </li>
                <li><b>SHAREDAPPDETAILS</b> - Allows the user to manage application authorization for a HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>SHARERECORD</b> - Allows the user to share a record that they are a custodian of to another HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
                <li><b>VIEWITEMS</b> - Allows a HealthVault user to view all of the items of the specified data type in the their record.
                    <ul>
                        <li>typeid - data type identifier.</li>
                        <li>additem - flag to show the new item dialog for the data type.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
            </ul>
            </param>
            
            <param name="targetQuery">
            The query string value to pass to the URL to which redirection is 
            taking place.
            </param>
            
            <remarks>
            The <paramref name="targetLocation"/> is passed as the target 
            parameter value to the redirector URL.
            The <paramref name="targetQueryString"/> is URL-encoded and 
            passed to the redirector URL as the target query string parameter 
            value.
            </remarks>
            
            <returns>
            The constructed URL.
            </returns>
            
            <exception cref="T:System.UriFormatException">
            The specific target location constructs an improper URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceLocation.GetHealthServiceShellUrl(System.Uri,System.String,System.String)">
            <summary>
            Constructs a URL to be redirected to via the HealthVault service
            Shell URL redirector, given the specified location and query.
            </summary>
            
            <param name="shellUrl">
            The HealthVault Shell redirector URL.
            </param>
            
            <param name="targetLocation">
            A known constant indicating the internal HealthVault 
            service Shell location to redirect to.
            
            Locations and their parameters include:
            <ul>
                <li><b>APPAUTH</b> - allows the user to select and authorize a health record for use 
                        with the specified application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>APPREDIRECT</b> - Redirect user to a HealthVault application.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the destination application.</li>
                        <li>refappid - A GUID that uniquely identifies the referring application.</li>
                        <li>target - string used as the "target" parameter when user browser is 
                                 redirected to the destination application's action-url.</li>
                        <li>targetqs - string used as the "targetqs" parameter when user browser is 
                                 redirected to the destination application's action-url</li>
                    </ul>
                </li>
                <li><b>APPSIGNOUT</b> - Signs the user out of HealthVault.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                    </ul>
                </li>
                <li><b>AUTH</b> - the sign-in page
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at one time.</li>
                        <li>forceappauth - force redirect to APPAUTH target once user is authenticated.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>CREATEACCOUNT</b> - Allows the user to create a new HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>nsi - no sign in page. The sign in page (where the user enters an email address) is bypassed if set to 1.</li>
                    </ul>
                </li>
                <li><b>CREATEAPPLICATION</b> - Allows a SODA master application to create a new client application instance.
                    <ul>
                        <li>publickey - the public key of the new client application instance.  The key
                                 must be an X509 certificate that is base64 encoded.</li>
                        <li>appid - the GUID that uniquely identifies the SODA master application.  The new application instance will
                                 be a child of this master application.</li>
                        <li>instanceid - the GUID that will be assigned to the client application.  This ID must be unique
                                 for every application instance.</li>
                        <li>instancename - A string that identifies the device the new application instance will run on, such
                                 as the computer name.</li>
                    </ul>
                </li>
                <li><b>CREATERECORD</b> - Allows the user to create a new HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>ismra - the application can use multiple records for the same user at 
                                 one time.</li>
                        <li>onopt# - A sequence of online optional authorization rule names
                                 identifying which rules to present.  The sequence begins with 1.</li>
                        <li>offopt# - A sequence of offline optional authorization rule names  
                                 identifying which rules to present.  The sequence begins with 1.</li>
                    </ul>
                </li>
                <li><b>HELP</b> - The HealthVault help page.
                    <ul>
                        <li>topicid - optional. If not specified the table of contents will be shown.
                            <ul>
                                <li>faq - HealthVault Frequently Asked Questions</li>
                                <li>HelpDirectory - Main HealthVault help page</li>
                                <li>PrivacyPolicy - HealthVault privacy policy</li>
                                <li>Service Agreement - HealthVault Service Agreement</li>
                                <li>CodeofConduct - HealthVault Code of Conduct</li>
                            </ul>
                        </li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>MANAGEACCOUNT</b> - Takes the user to a page to manage their account profile.
                <br/>The shell does not provide a mechanism to return to the application from the
                account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>RECONCILE</b> - A page that allows a HealthVault user to review the individual 
                                       data elements within a CCR or CCD item and transform/merge them into individual HealthVault items in their record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                        <li>thingid - CCR/CCD item identifier.</li>
                    </ul>
                </li>
                <li><b>RECORDLIST</b> - A page that lists all records of a HealthVault user.
                    <ul>
                        <li>appid - optional, the page displays only records which the specified application is authorized to access.</li>
                    </ul>
                </li>
                <li><b>SHAREDAPPDETAILS</b> - Allows the user to manage application authorization for a HealthVault record.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                    The shell does not provide a mechanism to return to the application from the
                    account management page, so it is good practice to open the page in a new browser window.
                </li>
                <li><b>SHARERECORD</b> - Allows the user to share a record that they are a custodian of to another HealthVault account.
                    <ul>
                        <li>appid - A GUID that uniquely identifies the application.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
                <li><b>VIEWITEMS</b> - Allows a HealthVault user to view all of the items of the specified data type in the their record.
                    <ul>
                        <li>typeid - data type identifier.</li>
                        <li>additem - flag to show the new item dialog for the data type.</li>
                        <li>extrecordid - record identifier.</li>
                    </ul>
                </li>
            </ul>
            </param>
            
            <param name="targetQuery">
            The query string value to pass to the URL to which redirection is 
            taking place.
            </param>
            
            <remarks>
            The <paramref name="targetLocation"/> is passed as the target 
            parameter value to the redirector URL.
            The <paramref name="targetQueryString"/> is URL-encoded and 
            passed to the redirector URL as the target query string parameter 
            value.
            </remarks>
            
            <returns>
            The constructed URL.
            </returns>
            
            <exception cref="T:System.UriFormatException">
            The specific target location constructs an improper URL.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceLocation.GetShellAuthenticationUrl(System.Uri,System.Guid)">
            <summary>
            Shell auth page location including the application id.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceMailAddressMalformedException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.MailAddressMalformed"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceMailAddressMalformedException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceMailAddressMalformedException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.MailAddressMalformed"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceMailAddressMalformedException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceMailAddressMalformedException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceMailAddressMalformedException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceMailAddressMalformedException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceMailAddressMalformedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceMailAddressMalformedException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceMailAddressMalformedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceMailAddressMalformedException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceMailAddressMalformedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceMethodInfo">
            <summary>
            Provides information about the HealthVault methods.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodInfo.Name">
            <summary>
            Gets the name of the method.
            </summary>
            
            <value>
            A string representing the method name.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodInfo.Versions">
            <summary>
            Gets the information about the supported versions of the method.
            </summary>
            
            <value>
            A read-only collection containing version information.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceMethodVersionInfo">
            <summary>
            Provides information about the supported versions of a HealthVault 
            service web method.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodVersionInfo.Name">
            <summary>
            Gets the name of the method.
            </summary>
            
            <value>
            A string representing the method name.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodVersionInfo.Version">
             <summary>
             Gets the method version number.
             </summary>
            
             <value>
             An integer representing the method version number.
             </value>
             
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodVersionInfo.RequestSchemaUrl">
            <summary>
            Gets the URL of the request schema for the method.
            </summary>
            
            <value>
            A Uri representing the request schema.
            </value>
            
            <remarks>
            This property returns <b>null</b> if the method takes no parameters.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodVersionInfo.RequestFileName">
            <summary>
            Gets the file name of the request schema.
            </summary>
            
            <value>
            A string representing the file name.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodVersionInfo.ResponseSchemaUrl">
            <summary>
            Gets the URL of the response schema for the method.
            </summary>
             
        </member>
        <member name="P:Microsoft.Health.HealthServiceMethodVersionInfo.ResponseFileName">
             <summary>
             Gets the file name of the response schema.
             </summary>
            
             <value>
             A string representing the file name.
             </value>
             
        </member>
        <member name="T:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.OtherDataItemSizeLimitExceeded"/>
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.OtherDataItemSizeLimitExceeded"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type. 
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceOtherDataSizeLimitExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServicePasswordNotStrongException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.PasswordNotStrong"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServicePasswordNotStrongException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServicePasswordNotStrongException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.PasswordNotStrong"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServicePasswordNotStrongException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServicePasswordNotStrongException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServicePasswordNotStrongException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServicePasswordNotStrongException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServicePasswordNotStrongException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServicePasswordNotStrongException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServicePasswordNotStrongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServicePasswordNotStrongException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServicePasswordNotStrongException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceRecordQuotaExceededException">
            <summary>
            The exception representing a HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.RecordQuotaExceeded"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRecordQuotaExceededException.#ctor(Microsoft.Health.HealthServiceResponseError)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRecordQuotaExceededException"/> 
            class with the specified error information to represent a 
            HealthVault error code of 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.RecordQuotaExceeded"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
            <param name="error">
            Information about an error that occurred while processing
            the request.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRecordQuotaExceededException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRecordQuotaExceededException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRecordQuotaExceededException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRecordQuotaExceededException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRecordQuotaExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRecordQuotaExceededException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRecordQuotaExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRecordQuotaExceededException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRecordQuotaExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceRequest">
            <summary>
            Represents an individual request to a HealthVault service.
            The class wraps up the XML generation and web request/response.
            </summary>
            
            <remarks>
            An instance of this class can be retrieved by calling the 
            <see cref="M:Microsoft.Health.HealthServiceConnection.CreateRequest(System.String,System.Int32)"/> 
            method.
            This class is not thread safe. A new instance should be created when multiple requests 
            must execute concurrently.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.#ctor(Microsoft.Health.HealthServiceConnection,System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.HealthServiceRequest"/> 
            class for the specified method.
            </summary>
            
            <param name="connection">
            The client-side representation of the HealthVault service.
            </param>
            
            <param name="methodName">
            The name of the method to invoke on the service.
            </param>
            
            <param name="methodVersion">
            The version of the method to invoke on the service.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="methodName"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.Execute">
            <summary>
            Builds up the XML, makes the request and reads the response.
            Connectivity failures will except out of the http client
            </summary>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The HealthVault returns an exception in the form of an 
            exception section in the response XML.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.CancelRequest">
            <summary>
            Cancels any pending request to HealthVault that was initiated with the same connection
            as this request.
            </summary>
            
            <remarks>
            Calling this method will cancel any requests that was started using the connection.
            It is up to the caller to start the request on another thread. Cancelling will cause
            a HealthServiceRequestCancelledException to be thrown on the thread the request was
            executed on.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.ExecuteForTransform(System.String)">
            <summary>
            Same as Execute, but takes a transform url (or tag) that is
            used to transform the result (on the server). Since the
            response is no longer necessarily xml, it is returned as
            a string
            </summary>
            
            <param name="transform">
            The public URL of the transform to apply to the results. If <b>null</b>,
            no transform is applied and the results are returned
            as a string.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.BuildWebRequest(System.String)">
            <summary>
            Creates a Web request that can be sent to HealthVault.
            </summary>
            
            <param name="transform">
            The optional XSL to apply.
            </param>
            
            <returns>
            An instance of <see cref="T:Microsoft.Health.EasyWebRequest"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.BuildRequestXml">
             <summary>
             Connects the XML using default values. 
             </summary>
            
             <exception cref="T:System.Xml.XmlException">
             There is a failure building up the XML.
             </exception>
             
             <private>
             This is protected so that the derived testing class can call it
             to create the request XML and then verify it is correct.
             </private>
             
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.BuildRequestXml(System.String)">
             <summary>
             Connects the XML using the specified optional XSL. 
             </summary>
             <param name="transform">The optional XSL to apply.</param> 
            
             <exception cref="T:System.Xml.XmlException">
             There is a failure building up the XML.
             </exception>
             
             <private>
             This is protected so that the derived testing class can call it
             to create the request XML and then verify it is correct.
             </private>
             
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.HandleResponseStream(System.IO.Stream)">
            <summary> 
            Represents the <see cref="T:Microsoft.Health.IEasyWebResponseHandler"/> callback.
            </summary>
            
            <param name="stream">
            The response stream.
            </param>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            HealthVault returns an exception in the form of an 
            exception section in the response XML.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequest.HandleResponseStreamResult(System.IO.Stream)">
            <summary>
            Handles the data retrieved by making the web request.
            </summary>
            
            <param name="stream">
            The response stream from the web request.
            </param>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            HealthVault returns an exception in the form of an 
            exception section in the response XML.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.RequestCompressionMethod">
            <summary>
            Gets or sets the request compression method used by the connection.
            </summary>
            
            <returns>
            A string representing the request compression method.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.ResponseStreamHandler">
            <summary>
            Defines a delegate that gets or sets all responses for requests to the 
            HealthVault Service.
            </summary>
            
            <remarks>
            If this property is set, the specified method is called once
            the response stream is retrieved for handling the result of the
            request to the HealthVault Service. If the property is not
            set, the response is processed and the results can be 
            retrieved using the <see cref="P:Microsoft.Health.HealthServiceRequest.Response"/> property.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.MethodName">
            <summary>
            Gets or sets the method name to call.
            </summary>
            
            <returns>
            A string representing the method name.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.MethodVersion">
            <summary>
            Gets or sets the version of the method to call.
            </summary>
            
            <returns>
            An integer representing the version.
            </returns>
            
            <remarks>
            If <b>null</b>, the current version is called.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.ImpersonatedPersonId">
            <summary>
            Gets or sets the identifier of the person being impersonated.
            </summary>
            
            <returns>
            A GUID representing the identifier.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.RecordId">
            <summary>
            Gets or sets the record identifier.
            </summary>
            
            <returns>
            A GUID representing the identifier.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.Language">
            <summary>
            Gets or sets the language for the request.
            </summary>
            
            <returns>
            A string representing the language.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.Country">
            <summary>
            Gets or sets the country for the request.
            </summary>
            
            <returns>
            A string representing the country.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.Version">
            <summary>
            Gets the HealthVault version for which this SDK was built.
            </summary>
            
            <returns>
            A string representing the version.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.Parameters">
            <summary>
            Gets or sets the parameters for the method invocation.
            The parameters are specified via XML for the particular method.
            </summary>
            
            <returns>
            A string representing the parameters.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.TimeoutSeconds">
            <summary>
            Gets or sets the timeout for the request, in seconds.
            </summary>
            
            <returns>
            An integer representing the timeout, in seconds.
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The timeout value is set to less than 0.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.Response">
            <summary>
            Gets the response after Execute is called.
            </summary>
            
            <returns>
            An instance of <see cref="T:Microsoft.Health.HealthServiceResponseData"/>.
            </returns>
            
            <private>
            The setter is internal as a test hook so that the response can 
            be set by test code in derived classes.
            </private>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.TimeToLiveSeconds">
            <summary>
            This is a test hook so that testing class can set different time 
            to live to verify if HealthVault checks for it.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceRequest.XmlRequest">
            <summary>
            This is a test hook so that the derived testing class can
            verify the XML request.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceRequest.WebResponseStreamHandler">
            <summary>
            Defines a delegate for handling the response stream for a request.
            </summary>
            
            <param name="stream">
            The response stream of the request.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceRequestCancelledException">
            <summary>
            The exception indicating that the application requested the HealthVault request be cancelled.
            </summary>
            
            <remarks>
            This exception is raised on the thread in which a <see cref="M:Microsoft.Health.HealthServiceRequest.Execute"/>
            was called and was subsequently cancelled using <see cref="M:Microsoft.Health.HealthServiceRequest.CancelRequest"/>
            from another thread.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequestCancelledException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException"/>.
            </summary>
            
            <remarks>
            This constructor is internal to the SDK. Application developers 
            using the SDK should catch instances of this exception instead of 
            throwing new exceptions of this type.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequestCancelledException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequestCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequestCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceRequestCancelledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceResponseData">
            <summary>
            Contains the response information from the HealthVault service after
            processing a request.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseData.Code">
            <summary>
            Gets the status code of the response.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthServiceStatusCode"/> value.
            </value>
            
            <remarks>
            Any code other than <see cref="F:Microsoft.Health.HealthServiceStatusCode.Ok"/> indicates
            an error. Use the <see cref="P:Microsoft.Health.HealthServiceResponseData.Error"/> property
            to get more information about the error.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseData.CodeId">
            <summary>
            Gets the integer identifier of the status code in the HealthVault
            response.
            </summary>
            
            <value>
            An integer representing the status code ID.
            </value>
            
            <remarks>
            Use this property when the SDK is out of sync with the HealthVault 
            status code set. You can look up the actual integer value of the 
            status code for further investigation.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseData.Error">
            <summary>
            Gets the information about an error that occurred while processing
            the request.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthServiceResponseError"/>.
            </value>
            <remarks>
            This property is <b>null</b> if 
            <see cref="P:Microsoft.Health.HealthServiceResponseData.Code"/> returns 
            <see cref="F:Microsoft.Health.HealthServiceStatusCode.Ok"/>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseData.InfoNavigator">
            <summary>
            Gets the info section of the response XML.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseData.InfoReader">
            <summary>
            Gets the info section of the response XML.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseData.ResponseText">
            <summary>
            Gets or sets the cached response results text (UTF8 encoded).
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceResponseError">
            <summary>
            Contains error information for a response that has a code other
            than <see cref="F:Microsoft.Health.HealthServiceStatusCode.Ok"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceResponseError.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Microsoft.Health.HealthServiceErrorContext"/> 
            object.
            </summary>
            
            <returns> 
            A string representing the contents of the <see cref="T:Microsoft.Health.HealthServiceErrorContext"/> 
            object.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseError.Message">
            <summary>
            Gets the error message. 
            </summary>
            
            <value>
            A string representing the error message.
            </value>
            
            <remarks>
            The message contains localized text of why the request failed. 
            This text should be added to application context information
            and suggestions of what to do before displaying it to the user.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseError.Context">
            <summary>
            Gets the context of the server in which the error occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthServiceErrorContext"/> representing the server context.
            </value>
            
            <remarks>
            This information is available only when the service is configured
            in debugging mode. In all other cases, this property returns 
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceResponseError.ErrorInfo">
            <summary>
            Gets the additional information specific to the method failure.
            </summary>
            
            <value>
            A string representing the additional error information.
            </value>
            
            <remarks>
            The text contains specific actionable information related to the failed request.
            It may be used in determining possible actions to circumvent the error condition
            before displaying an error to the user.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceShellRedirectToken">
            <summary>
            Represents the redirect information that can be supplied along with the Shell redirect 
            URL to access specific functionalities in the Shell.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceShellRedirectToken.Token">
            <summary>
            Gets a string token used to redirect to specific parts within the 
            Shell, accessing specific functions. 
            </summary>
            
            <returns>
            A string representing the redirect token.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceShellRedirectToken.Description">
            <summary>
            Gets a localized text description of the Shell functionality  
            accessible by using the token. 
            </summary>
            
            <returns>
            A string representing the Shell functionality description.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceShellRedirectToken.QueryStringParameters">
            <summary>
            Gets a collection of parameters that must be supplied in the query 
            string in addition to the redirect token.
            </summary>
            
            <returns>
            A read-only collection containing the parameters.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceShellInfo">
            <summary>
            Provides information about the HealthVault Shell.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceShellInfo.CreateShellInfo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthServiceShellInfo"/> object from the  
            supplied XML.
            </summary>
            
            <param name="nav">
            An XPathNavigator to access the XML from which the 
            <see cref="T:Microsoft.Health.HealthServiceShellInfo"/> object will be constructed.
            </param>
            
            <returns>
            A <see cref="T:Microsoft.Health.HealthServiceShellInfo"/> object.
            </returns>
            
            <exception cref="T:System.UriFormatException">
            A URL string returned by HealthVault is
            invalid.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceShellInfo.BaseUrl">
            <summary>
            Gets the Shell base URL.
            </summary>
            
            <returns>
            A Uri representing the Shell base URL.
            </returns>
            
            <remarks>
            The URL used to access the HealthVault Shell.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceShellInfo.RedirectUrl">
            <summary>
            Gets the Shell redirect URL.
            </summary>
            
            <returns>
            A Uri representing the Shell redirect URL.
            </returns>
            
            <remarks>
            The URL used to redirect to specific functions within the 
            HealthVault Shell.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.HealthServiceShellInfo.RedirectTokens">
            <summary>
            Gets a collection of the possible redirect information that can be 
            supplied along with the shell redirect URL to access specific
            functionalities in the Shell.
            </summary>
            
            <returns>
            A read-only collection containing the redirect information.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceStatusCode">
            <summary>
            Status codes for various conditions occurring in the SDK. Contains 
            status codes returned by HealthVault methods as Response.Code
            and codes to represent errors in the SDK itself.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.OtherDataItemSizeLimitExceeded">
            <summary>
            The other data item cannot be larger than the largest size allowed by the 
            HealthVault platform.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RecordAuthorizationFailure">
            <summary>
            A record was not authorized for the application.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ConfigValueMissingOrMalformed">
            <summary>
            A required configuration value is missing or malformed for the key 
            supplied.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CannotGetDataNotSet">
            <summary>
            The data element was not set, so it could not be retrieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.NoRecordAuthDataForUpdate">
            <summary>
            The record authorization data wasn't supplied to allow the update
            to occur.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.NotRecordCustodian">
            <summary>
            A person other than a record custodian tried to perform a 
            privileged action.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.NoApplicationInfoReturned">
            <summary>
            The application information could not be returned for the 
            specified application identifier.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.MoreThanOnePersonReturned">
            <summary>
            Information about multiple persons was returned when only a single
            result was expected.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RecordNotFound">
            <summary>
            The record specified in the request could not be found. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.MoreThanOneThingReturned">
            <summary>
            Information about multiple record items was returned when only a
            single result was expected.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.UnmappedError">
            <summary>
            The error condition is not recognized by the client.
            </summary>
            
            <remarks> 
            Any integer error code returned by HealthVault without a mapping
            in the enum is mapped to this value. This could indicate new 
            error values that HealthVault returns. A newer version of the SDK
            might provide an appropriate mapping.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.Ok">
            <summary>
            The request was successful.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.Failed">
            <summary>
            Generic failure, due to unknown causes or internal error.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.BadHttp">
            <summary> 
            Http protocol problem.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidXml">
            <summary> 
            Request xml cannot be parsed or nonconformant.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidRequestIntegrity">
            <summary> 
            The signature is invalid. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.BadMethod">
            <summary>
            No such method. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidApp">
            <summary>
            App does not exist, app is invalid, app is not active, 
            or calling IP is invalid.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CredentialTokenExpired">
            <summary> 
            credntial token has expired, need a new one.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidToken">
            <summary>
            Auth token malformed or otherwise busted. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidPerson">
            <summary> 
            Person does not exist or is not active.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidRecord">
            <summary> 
            Given record id does not exist. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.AccessDenied">
            <summary> 
            Person or app does not have sufficient rights.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.NotYetImplemented">
            <summary>
            The functionality being accessed is not yet implemented.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidThing">
            <summary> 
            Invalid thing identifier. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CantConvertUnits">
            <summary>
            Data table already exists with incompatible units.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidFilter">
            <summary> 
            Missing or invalid GetThingsFilter.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidFormat">
            <summary> 
            Missing or invalid GetThings format specifier.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.MissingSharedSecret">
            <summary>
            A credential was supplied without a shared secret.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidApplicationAuthorization">
            <summary> 
            authorized_applications entry missing.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidThingType">
            <summary> 
            thing type doesn't exist. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ThingTypeImmutable">
            <summary>
            can't update things of this type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ThingTypeNotCreatable">
            <summary> 
            can't create things of this type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DuplicateCredentialFound">
            <summary>
            Duplicate Credential found.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidRecordName">
            <summary> 
            Invalid Record name.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DrugNotFound">
            <summary> 
            Cannot find the drug specified.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidPersonState">
            <summary> 
            Invalid person state. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidCodeSet">
            <summary> 
            Requested code set was not found. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidGroup">
            <summary>
            Group does not exist, group is invalid, or group is not active.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidValidationToken">
            <summary>
            Invalid validation token for contact email validation.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidAccountName">
            <summary>
            Invalid group/person name to create a group.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidContactEmail">
            <summary> 
            Invalid contact email to create a group. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidLogOnName">
            <summary> 
            Invalid logon name.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidPassword">
            <summary> 
            Invalid password.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidOpenQuery">
            <summary>
            Open query id not found. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidTransform">
            <summary>
            Transform cannot be loaded. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidRelationshipType">
            <summary> 
            Invalid relationship type. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidCredentialType">
            <summary> 
            Invalid credential type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidRecordState">
            <summary> 
            Invalid record state.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ApplicationAuthorizationNotRequired">
            <summary>
            Application authorization is not required for this app.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RequestTooLong">
            <summary>
             The request provided has exceeded maximum allowed request length.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DuplicateAuthorizedRecordFound">
            <summary> 
            Duplicate authorized record found. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.EmailNotValidated">
            <summary> 
            Person email must be validated but it's not
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DuplicateGroupFound">
            <summary>
            A group already exists with the specified name.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.GroupAlreadyHasParent">
            <summary>
            The group already is a member of a group.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.GroupMembershipCycleDetected">
            <summary>
            Adding the group as a member of the specified group would cause
            a cycle in the group membership.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.MailAddressMalformed">
            <summary>
            The email address specified to SendInsecureMessage is malformed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.PasswordNotStrong">
            <summary>
            The password does not meet the complexity requirements.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CannotRemoveLastCustodian">
            <summary>
            The last custodian for a record cannot be removed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidEmailAddress">
            <summary>
            The email address is invalid.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RequestTimedOut">
            <summary>
            The request sent to HealthVault reached its time to live and
            is now too old to be processed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidSponsorEmail">
            <summary>
            The sponsor email address is invalid.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidPromotionToken">
            <summary>
            Promotion token is invalid.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidRecordAuthorizationToken">
            <summary>
            Record authorization token is invalid.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.TooManyRequestGroupsInQuery">
            <summary>
            GetThings Query has too many request groups.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.GrantAuthorizationExceedsDefault">
            <summary>
            The permissions to be granted exceed the default permissions
            available to be granted. e.g. attempt to grant all access when only
            read access is available.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidVocabulary">
            <summary> 
            Requested code set was not found.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.VocabularyLoadError">
            <summary> 
            An error occurred loading the vocabulary.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RecordAuthorizationTokenExpired">
            <summary> 
            Record authorization token has expired. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RecordAuthorizationDoesNotExist">
            <summary> 
            Record authorization does not exist. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ThingTypeNotDeletable">
            <summary> 
            can't delete things of this type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.VersionStampMissing">
            <summary>
            Version stamp is missing.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.VersionStampMismatch">
            <summary> 
            Version stamp does not match.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ExpiredOpenQuery">
            <summary> 
            Requested open query has expired. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidPublicKey">
            <summary>
            Public key specified is not valid.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DomainNameNotSet">
            <summary>
            The application's domain name is not set.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.AuthenticatedSessionTokenExpired">
            <summary> 
            authenticated session token has expired, need a new one.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidCredentialKey">
            <summary>
            Indicates that the credential key could not be found.
            </summary>
            
            <remarks>
            The credential key is different depending on the authentication mechanism being use.
            For username/password login the credential key is the username. For Windows Live ID
            login the credential key is the Windows Live ID PUID.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidPersonOrGroupId">
            <summary> 
            Pseudo id for person or group not valid
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RecordQuotaExceeded">
            <summary>
            The size occupied by the <see cref="T:Microsoft.Health.HealthRecordItem"/>s in the request will cause the 
            <see cref="T:Microsoft.Health.HealthRecordInfo"/> to exceed the size quota allotted to it. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidDateTime">
            <summary> 
            the datetime exceeds the maximum or minimum values allowed by System.DateTime
            or System.Data.SqlTypes.SqlDateTime
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidCertificate">
            <summary> 
            The certificate is not valid. It may be expired or have been revoked. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ResponseTooLong">
            <summary>
             The response has exceeded maximum size allowed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidVerificationQuestion">
            <summary> 
            The verification question for the connect request is invalid. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidVerificationAnswer">
            <summary> 
            The verification answer for the connect request is invalid. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidIdentityCode">
            <summary> 
            There is no connect request corresponding to the given code.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.RetryLimitExceeded">
            <summary>
            Number of retries has been exceeded.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CultureNotSupported">
            <summary> 
            The culture specified in the request header is not supported for the attempted operation.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidFileExtension">
            <summary>
             The file extension is not supported.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidVocabularyItem">
            <summary>
             The vocabulary item does not exist.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DuplicateConnectRequestFound">
            <summary>
             Duplicate connect request found.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidSpecialAccountType">
            <summary>
            The account type being requested is not valid.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DuplicateTypeFound">
            <summary>
            An attempt was made to add a new type with an identifier that already exists.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CredentialNotFound">
            <summary>
            The requested credential could not be found.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CannotRemoveLastCredential">
            <summary>
            Cannot remove the last credential associated with an account.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ConnectRequestAlreadyAuthorized">
            <summary>
            The connect request has already been authorized.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidThingTypeVersion">
            <summary>
            The type specified to update an instance of a thing is an older version of the type
            than the existing instance.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CredentialsLimitExceeded">
            <summary>
            The maximum number of allowed credentials has been exceeded.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidMethod">
            <summary>
            One or more invalid methods were specified in the method mask.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidOtherDataToken">
            <summary>
            The authentication token supplied for the other data streaming API is invalid. 
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidBlobRefUrl">
            <summary>
            The reference url supplied for the blob streaming API is invalid. 
            </summary>
            
            <remarks>
            This value replaces InvalidOtherDataToken which remains in the enum for binary
            compatibility.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CannotGetStreamedOtherData">
            <summary>
            Other data put in to Healthvault via the streaming API cannot be requested as an 
            other data string.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.UpdateThingTypeVersionNoDataXml">
            <summary>
            The type version of the thing cannot be changed without a data xml supplied for validation.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.UnsupportedContentEncoding">
            <summary>
            The content encoding specified for the blob is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ContentEncodingDataMismatch">
            <summary>
            The content encoding specified for the blob does not match the blob data.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ApplicationLimitExceeded">
            <summary>
            The number of applications for the person has been exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidBinaryContentId">
            <summary>
            The unique identifier for the binary content could not be found.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.IncompleteConnectRequest">
            <summary>
            The connect request retrieved is not yet fully created.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.CreatePackageExists">
            <summary>
            The connect package was previously fully populated and a new package
            cannot be attached.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidFileName">
            <summary>
            The file name extension is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidSignupCode">
            <summary>
            The signup code is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.BlobSizeTooLargeForInline">
            <summary>
            The blob is too large and cannot be returned inline.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.DuplicateBlob">
            <summary>
            A blob of this name is already present in the request.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.BlobTokenCommitted">
            <summary>
            The blob token corresponds to a blob that is already committed.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.BlobTokenNotCompleted">
            <summary>
            The blob token corresponds to a blob that was not marked completed 
            through the streaming interface.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ThingPotentiallyIncomplete">
            <summary>
            The thing being updated has data items that cannot be seen in this version, e.g.
            signatures with new signature methods or multiple blobs.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidSignatureAlgorithm">
            <summary>
            The signature algorithm is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidBlobHashAlgorithm">
            <summary>
            The blob hash algorithm is invalid or not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.UnsupportedBlobHashBlockSize">
            <summary>
            The blob hash block size is unsupported.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.BlobHashAlgorithmMismatch">
            <summary>
            The specified blob hash algorithm does not match the blob's hash algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.BlobHashBlockSizeMismatch">
            <summary>
            The specified blob hash block size does not match the blob's hash block size.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.UnsupportedSignatureMethod">
            <summary>
            The signature method is not supported in the context it is being used.
            </summary>        
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidBlobHash">
            <summary>
            The specified blob hash is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.PackageBlobNotCommitted">
            <summary>
            The blob is associated with a connect package that is not yet created.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ApplicationStateTransitionNotSupported">
            <summary>
            Changing the application state from deleted is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.AppManagerAuthInviteDuplicate">
            <summary>
            Application Manager authorization invite already exists.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ExistingAppManagerAuthInviteNotFound">
            <summary>
            Application Manager invite is not found for re-send
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidAppManagerAuthToken">
            <summary>
            Application Manager invite token is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ResendAppManagerInviteFailed">
            <summary>
            Cannot resend application manager invite
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.AppManagerAuthAlreadyExist">
            <summary>
            Application Manager authorization already exists
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.AppManagerAuthDoesNotExist">
            <summary>
            Application Manager authorization specified does not exist.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidPackageContents">
            <summary>
            The contents of the connect package are not valid xml. 
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.InvalidContentType">
            <summary>
             The content type of the file is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.ConnectPackageValidationRequired">
            <summary>
            The contents of the connect package must be validated before they are put into 
            a health record.
            </summary>
        </member>
        <member name="F:Microsoft.Health.HealthServiceStatusCode.Max">
            <summary>
            The maximum value of the status code that the SDK knows about.
            This is not a valid status code.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.HealthServiceStatusCodeManager">
            <summary>
            Helper factory class to help cast any integer status code 
            to an appropriate HealthServiceStatusCode enum value.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.HealthServiceStatusCodeManager.GetStatusCode(System.Int32)">
            <summary>
            Helper factory method to help cast any integer status code 
            to an appropriate HealthServiceStatusCode enum value.
            </summary>
            
            <param name="statusCodeId"> 
            the integer status code id 
            to be converted  to a HealthServiceStatusCode enum value.
            </param>
            
            <returns> 
            HealthVaultStatus code enum object appropriately initialized.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.HealthVaultMethods">
            <summary>
            The public HealthVault methods that are available for applications to call.
            </summary>
            
            Note, the numeric value is not important. These values don't map directly to the
            platform method enum values.
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.CreateAuthenticatedSessionToken">
            <summary>
            Creates an application session token for use with the HealthVault service.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.DeleteOpenQuery">
            <summary>
            Removes a saved open query.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetApplicationInfo">
            <summary>
            Gets information about the registered application including name, description,
            authorization rules, and callback url.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetApplicationSettings">
            <summary>
            Saves application specific information for the logged in user.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetAuthorizedRecords">
            <summary>
            Gets all the records that the user has authorized the application use.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetOpenQueryInfo">
            <summary>
            Gets existing saved open queries.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetPersonInfo">
            <summary>
            Gets information about the logged in user.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetServiceDefinition">
            <summary>
            Gets generic service information about the HealthVault service.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetThings">
            <summary>
            Gets data from a HealthVault record.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetThingType">
            <summary>
            Gets information, including schemas, about the data types that can be stored in a
            health record.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.GetVocabulary">
            <summary>
            Gets information about clinical and other vocabularies that HealthVault supports.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.PutThings">
            <summary>
            Adds or updates data in a health record.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.QueryPermissions">
            <summary>
            Gets the permissions that the application and user have to a health record.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.RemoveThings">
            <summary>
            Removes data from a health record.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.SaveOpenQuery">
            <summary>
            Creates a saved open query.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.SendInsecureMessage">
            <summary>
            Sends an SMTP message on behalf of the logged in user.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.SendInsecureMessageFromApplication">
            <summary>
            Sends an SMTP message on behalf of the application.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.HealthVaultMethods.SetApplicationSettings">
            <summary>
            Sets application specific data for the user.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.InactiveRecordAuthorization">
            <summary>
            Provides information about a person who has not yet accepted an invitation to share a
            HealthVault record.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.InactiveRecordAuthorization.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Health.InactiveRecordAuthorization"/> with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.InactiveRecordAuthorization.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the class members with data from the specified 
            active person information XML.
            </summary>
            
            <param name="navigator">
            The XML to get the person information from.
            </param>
            
        </member>
        <member name="P:Microsoft.Health.InactiveRecordAuthorization.GrantorName">
            <summary>
            Gets the name of the person that sent the invitation to share their HealthVault record.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.InactiveRecordAuthorization.GranteeName">
            <summary>
            Gets the name of the person that was invited to share the HealthVault record.
            </summary>
        </member>
        <member name="T:Microsoft.Health.IncompatibleVersionException">
            <summary>
            Indicates version incompatibility.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/>
            class.
            </summary>
            
            <param name="compatibleVersions">
            The compatible versions supported.
            </param>
            
            <param name="incompatibleVersion">
            The incompatible version encountered.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/> 
            class with an error message.
            </summary>
            
            <param name="compatibleVersions">
            The compatible versions supported.
            </param>
            
            <param name="incompatibleVersion">The incompatible version 
            encountered.</param>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/> 
            class with an error message and a nested exception.
            </summary>
            
            <param name="compatibleVersions">
            The compatible versions supported.
            </param>
            
            <param name="incompatibleVersion">
            The incompatible version encountered.
            </param>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The nested exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/> 
            class with the specified serialization information.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The stream context of the serialized information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The serialization context.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.IncompatibleVersionException.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Microsoft.Health.IncompatibleVersionException"/> 
            object.
            </summary>
            
            <returns> 
            A string representing the contents of the 
            <see cref="T:Microsoft.Health.IncompatibleVersionException"/> object.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.IncompatibleVersionException.CompatibleVersions">
            <summary>
            Gets the compatible versions.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.IncompatibleVersionException.IncompatibleVersion">
            <summary>
            Gets the incompatible version.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.InvalidConfigurationException">
             <summary>
             Represents the exception thrown when a configuration file has invalid 
             values.
             </summary>
            
        </member>
        <member name="M:Microsoft.Health.InvalidConfigurationException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.InvalidConfigurationException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.InvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.InvalidConfigurationException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
            <param name="innerException">
            The exception that occurred when reading configuration.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.InvalidConfigurationException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.InvalidConfigurationException"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.InvalidConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.InvalidConfigurationException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.InvalidConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypeDataColumn">
            <summary>
            Describes the schema of a column of health record item data when 
            transformed by the single-type item transform or multi-type item 
            transform.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeDataColumn.#ctor(System.String,System.String,System.Type,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypeDataColumn"/> 
            class with the specified tag, label, data type, and column width.
            </summary>
            
            <param name="tag">
            The name of the column. The name should match the name of the
            data, such as summary, wc-thingid.
            </param>
            
            <param name="label">
            The caption for the column, such as Date Created.
            </param>
            
            <param name="type">
            The type of the data, such as DateTime, string. If <b>null</b>, 
            System.Object is used.
            </param>
            
            <param name="width">
            The width of the column.
            </param>
            
            <param name="visible">
            True if the column should be shown by default or false otherwise.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="type"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeDataColumn.Clone">
            <summary>
            Clones the column instance so that it can be added to another
            DataTable.
            </summary>
            
            <returns>
            A new instance of the column with the same definition.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeDataColumn.ToString">
            <summary>
            Gets a string representation of the column definition.
            </summary>
            
            <returns>
            A colon separated list of the fields that make up the column definition.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypeDataColumn.ColumnTypeName">
            <summary>
            Gets the column type name.
            </summary>
            
            <value>
            A string representing the column type name.
            </value>
            
            <remarks>
            The current types supported are:<br/><br/>
            Boolean<br/>
            String<br/>
            DateTime<br/>
            Double<br/>
            Int64<br/>
            TimeSpan<br/>
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypeDataColumn.ColumnWidth">
            <summary>
            Gets the column display width.
            </summary>
            
            <value>
            An integer representing the column display width.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypeDataColumn.VisibleByDefault">
            <summary>
            Gets whether or not the columns should be shown by default.
            </summary>
            
            <value>
            True indicates the column should be shown by default.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.MailRecipient">
            <summary>
            Represents an email address that can be used when calling
            SendInsecureMessageFromApplication.
            </summary>
            
            <remarks>
            The <see cref="T:Microsoft.Health.MailRecipient"/> class contains the email address and 
            the display name of the person to whom the mail is being sent. It 
            provides the methods to get the XML representation that adheres to the 
            schema for the SendInsecureMessageFromApplication method.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.MailRecipient.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.MailRecipient"/> class 
            with the specified email address and display name.
            </summary>
            
            <param name="emailAddress">
            The email address of the person who is to receive the email.
            </param>
            
            <param name="displayName">
            The display name of the person who is to receive the email.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="emailAddress"/> or 
            <paramref name="displayName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <remarks>
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.MailRecipient.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the email recipient into the
            specified XML writer.
            </summary>
            
            <param name="writer">
            The XML writer that receives the XML representation of the email
            recipient.
            </param>
            
            <remarks>
            The XML written by this method adheres to the schema for the
            SendInsecureMessageFromApplication method.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.MailRecipient.ToString">
            <summary>
            Gets the XML representation of the email recipient as a string.
            </summary>
            
            <returns>
            A string containing the XML representation of the email recipient.
            </returns>
            
            <remarks>
            The XML written by this method adheres to the schema for the
            SendInsecureMessageFromApplication method.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.MailRecipient.EmailAddress">
            <summary>
            Gets or sets the email address of the person who receives the email.
            </summary>
            
            <value>
            A string representing the email address who receives the email.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The value is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.MailRecipient.DisplayName">
            <summary>
            Gets or sets the display name of the person to which the email 
            will be sent.
            </summary>
            
            <value>
            The display name of the person to which the message will be sent.
            This gets displayed in the To field of the message.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The value is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.MailMessage">
            <summary>
            Class representing common methods/data for SDK mail messages
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.OpenQuery">
            <summary>
            Represents a saved HealthVault service method invocation that 
            can be invoked any time by anyone through a query-specific URL.
            </summary>
            
            <remarks>
            <see cref="T:Microsoft.Health.OpenQuery"/> instances are inherently insecure. Therefore, 
            store the URL to the instance securely and do not share it.
            
            An <see cref="T:Microsoft.Health.OpenQuery"/> is created using the static 
            <see cref="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.AuthenticatedConnection,Microsoft.Health.HealthRecordSearcher)"/>
            or 
            <see cref="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.AuthenticatedConnection,Microsoft.Health.HealthRecordSearcher,System.String)"/>
            method, which returns an <see cref="T:Microsoft.Health.OpenQuery"/> instance that contains the query ID and
            URL to the <see cref="T:Microsoft.Health.OpenQuery"/>. Reference an existing <see cref="T:Microsoft.Health.OpenQuery"/> 
            using one of the class constructors. The query ID can either be
            explicitly specified or parsed from the URL, depending on which
            constructor is used.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.OpenQuery"/> class for the 
            specified URL, represented by a string.
            </summary>
            
            <param name="url">
            A string representing the URL of an existing <see cref="T:Microsoft.Health.OpenQuery"/>.
            </param>
            
            <remarks>
            Constructing an instance of the class does not create an open
            query. Instead, it attaches the instance to an existing open query
            specified by the <paramref name="url"/>.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="url"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="url"/> parameter is a relative path.
            -or-
            The path is not a URL.
            -or-
            The host name specified is not valid.
            -or-
            The file name specified is not valid.
            -or-
            The port number specified is not valid or cannot be parsed.
            -or-
            The length exceeds 65534 characters.
            -or-
            There is an invalid character sequence.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.#ctor(System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.OpenQuery"/> class for the 
            specified URL.
            </summary>
            
            <param name="url">
            A URI representing the URL of an existing <see cref="T:Microsoft.Health.OpenQuery"/>.
            </param>
            
            <remarks>
            Constructing an instance of the class does not create an open
            query. Instead, it attaches the instance to an existing open query
            specified by the <paramref name="url"/>.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="url"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The <paramref name="url"/> parameter is a relative path.
            -or-
            The path is not a URL.
            -or-
            The host name specified is not valid.
            -or-
            The file name specified is not valid.
            -or-
            The port number specified is not valid or cannot be parsed.
            -or-
            The length exceeds 65534 characters.
            -or-
            There is an invalid character sequence.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.OpenQuery"/> class for the 
            specified query ID.
            </summary>
            
            <param name="queryId">
            The ID of an existing <see cref="T:Microsoft.Health.OpenQuery"/>.
            </param>
            
            <remarks>
            Constructing an instance of the class does not create an open
            query. Instead, it attaches the instance to an existing open query
            specified by the <paramref name="queryId"/>.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="queryId"/> parameter is empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.Invoke(System.Int32)">
            <summary>
            Invokes the open query with the specified timeout and returns the results.
            </summary>
            
            <param name="defaultTimeout">
            The time in milliseconds before the invocation of the query will 
            timeout.
            </param>
            
            <returns>
            A string representing the invocation results.
            </returns>
            
            <remarks>
            The invocation results are returned as a string because
            any method can be called.
            An open query can be constructed as a call to any of the 
            HealthVault methods. You can also apply any transforms to the 
            method results as part of the open query. The returned string 
            contains the HTTP response. This could be the XML produced by the 
            HealthVault service method, or it can be a transformed version 
            of that XML data.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            <cref name="PinRequired"/> is <b>true</b>, in which case you should  
            use the <cref name="Invoke(int,string)"/> method instead.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.Invoke(System.Int32,System.String)">
            <summary>
            Invokes the open query with the specified timeout and personal 
            identification number (PIN) and returns the results.
            </summary>
            
            <param name="defaultTimeout">
            The time in seconds before the invocation of the query will 
            timeout.
            </param>
            
            <param name="pinCode">
            The  code required to access the query.
            </param>
            
            <returns>
            A string representing the invocation results.
            </returns>
            
            <remarks>
            The invocation results are returned as a string because
            any method can be called.
            An open query can be constructed as a call to any of the 
            HealthVault methods. You can also apply any transforms to the 
            method results as part of the open query. The returned string 
            contains the HTTP response. This could be the XML produced by the 
            HealthVault service method, or it can be a transformed version 
            of that XML data.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="pinCode"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.Remove(Microsoft.Health.AuthenticatedConnection)">
            <summary>
            Removes the saved open query from the server.
            </summary>
            
            <param name="connection">
            The connection instance to use to remove the <see cref="T:Microsoft.Health.OpenQuery"/>.
            </param>
            
            <remarks>
            The person authenticated with the <paramref name="connection"/> 
            must have permission to remove the open query.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.GetInfoFromOpenQuery(Microsoft.Health.AuthenticatedConnection)">
            <summary>
            Gets information about an open query.
            </summary>
            
            <param name="connection">
            The <see cref="T:Microsoft.Health.AuthenticatedConnection"/> instance to use for 
            getting information about the open query.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.ToString">
            <summary>
            Gets a string representation of the open query URL.
            </summary>
            
            <returns>
            The open query URL as a string;
            </returns>
            
            <remarks>
            The open query URL is a URL to a HealthVault service page that 
            also has the query string parameter to identify which open query to 
            run.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.AuthenticatedConnection,Microsoft.Health.HealthRecordSearcher)">
            <summary>
            Creates a new open query using the specified 
            <see cref="T:Microsoft.Health.AuthenticatedConnection"/> and definition.
            </summary>
            
            <param name="connection">
            An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> instance that creates the new open query.
            </param>
            
            <param name="searcher">
            A <see cref="T:Microsoft.Health.HealthRecordSearcher"/> instance that defines the open query.
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.OpenQuery"/> instance that represents the newly created query.
            
            </returns>
            
            <remarks>
            The creation of an open query makes the data returned by that 
            query public. The only obscurity to the data is that the query
            URL must be known to retrieve it.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="service"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="searcher"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="searcher"/> parameter contains no valid
            search filters.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.HealthRecordSearcher)">
            <summary>
            Creates a new open query using the specified 
            <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> and definition.
            </summary>
            
            <param name="connection">
            An <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> instance that 
            creates the new open query.
            </param>
            
            <param name="searcher">
            A <see cref="T:Microsoft.Health.HealthRecordSearcher"/> instance that defines the open query.
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.OpenQuery"/> instance that represents the newly created query.
            </returns>
            
            <remarks>
            The creation of an open query makes public the data returned by that 
            query. However, the query URL must be known to retrieve the data.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="service"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="searcher"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="searcher"/> parameter contains no valid
            search filters.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.AuthenticatedConnection,Microsoft.Health.HealthRecordSearcher,System.String)">
            <summary>
            Creates a new open query using the specified 
            <see cref="T:Microsoft.Health.AuthenticatedConnection"/>, definition, and personal
            identification number (PIN).
            </summary>
            
            <param name="connection">
            An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> instance that creates the 
            new open query.
            </param>
            
            <param name="searcher">
            A <see cref="T:Microsoft.Health.HealthRecordSearcher"/> instance that defines the open query.
            </param>
            
            <param name="pinCode">
            The PIN that protects the query.  
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.OpenQuery"/> instance that represents the newly created query.
            </returns>
            
            <remarks>
            The creation of an open query makes public the data returned by that 
            query. However, the query URL must be known to retrieve the data.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> or <paramref name="searcher"/> 
            parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="searcher"/> parameter contains no valid search
            filters or the <paramref name="pinCode"/> parameter is <b>null</b> 
            or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.HealthRecordSearcher,System.String)">
            <summary>
            Creates a new open query using the specified 
            <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/>, definition, and personal
            identification number (PIN).
            </summary>
            
            <param name="connection">
            A connection instance that creates the new open query.
            </param>
            
            <param name="searcher">
            A <see cref="T:Microsoft.Health.HealthRecordSearcher"/> instance that defines the open query.
            </param>
            
            <param name="pinCode">
            The PIN that protects the query.  
            </param>
            
            <returns>
            An <see cref="T:Microsoft.Health.OpenQuery"/> instance that represents the newly created query.
            </returns>
            
            <remarks>
            The creation of an open query makes public the data returned by that 
            query. However, the query URL must be known to retrieve the data.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> or <paramref name="searcher"/> 
            parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="searcher"/> parameter contains no valid search
            filters or the <paramref name="pinCode"/> parameter is <b>null</b> 
            or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.AuthenticatedConnection,Microsoft.Health.HealthRecordSearcher,System.Int32,System.String,System.String,System.String)">
             <summary>
             Creates a new open query using the specified 
             <see cref="T:Microsoft.Health.AuthenticatedConnection"/>, definition, expiration time,
             personal identification number (PIN), description, and XSL.
             </summary>
             
             <param name="connection">
             An <see cref="T:Microsoft.Health.AuthenticatedConnection"/> instance that creates the 
             new open query.
             </param>
             
             <param name="searcher">
             A <see cref="T:Microsoft.Health.HealthRecordSearcher"/> instance that defines the open query.
             </param>
            
             <param name="expires">
             The number of minutes the query will expire from the creation time.
             A value of Int32.MaxValue denotes that the query does not expire.
             </param>
            
             <param name="pinCode">
             The PIN that protects the query.  
             </param>
            
             <param name="note">
             The note describing the query.
             </param>
             
             <param name="finalXsl">
             The XSL that transforms the results of the query when the 
             <see cref="T:Microsoft.Health.OpenQuery"/> is invoked.
             </param>
             
             <returns>
             An <see cref="T:Microsoft.Health.OpenQuery"/> instance that represents the newly created query.
             </returns>
             
             <remarks>
             The creation of an open query makes public the data returned by that 
             query. However, the query URL must be known to retrieve the data.
             </remarks>
             
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="connection"/> or <paramref name="searcher"/> 
             parameter is <b>null</b>.
             </exception>
             
             
             <exception cref="T:System.ArgumentException">
             The <paramref name="searcher"/> parameter contains no valid search
             filters or the <paramref name="pinCode"/> parameter is <b>null</b> 
             or empty.
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             An error occurred when HealthVault processed the request.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.OpenQuery.NewQuery(Microsoft.Health.Web.OfflineWebApplicationConnection,Microsoft.Health.HealthRecordSearcher,System.Int32,System.String,System.String,System.String)">
             <summary>
             Creates a new open query using the specified 
             <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/>, definition, 
             expiration time, personal identification number (PIN), description, 
             and XSL.
             </summary>
             
             <param name="connection">
             An <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/> instance that 
             creates the new open query.
             </param>
             
             <param name="searcher">
             A <see cref="T:Microsoft.Health.HealthRecordSearcher"/> instance that defines the open query.
             </param>
            
             <param name="expires">
             The number of minutes the query will expire from the creation time.
             A value of Int32.MaxValue denotes that the query does not expire.
             </param>
            
             <param name="pinCode">
             The PIN that protects the query.  
             </param>
            
             <param name="note">
             The note describing the query.
             </param>
             
             <param name="finalXsl">
             The XSL that transforms the results of the query when the 
             <see cref="T:Microsoft.Health.OpenQuery"/> is invoked.
             </param>
             
             <returns>
             An <see cref="T:Microsoft.Health.OpenQuery"/> instance that represents the newly created query.
             </returns>
             
             <remarks>
             The creation of an open query makes public the data returned by that 
             query. However, the query URL must be known to retrieve the data.
             </remarks>
             
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="connection"/> or <paramref name="searcher"/> 
             parameter is <b>null</b>.
             </exception>
             
             <exception cref="T:System.ArgumentException">
             The <paramref name="searcher"/> parameter contains no valid search
             filters or the <paramref name="pinCode"/> parameter is <b>null</b> 
             or empty.
             </exception>
             
             <exception cref="T:Microsoft.Health.HealthServiceException">
             An error occurred when HealthVault processed the request.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.OpenQuery.Invoke(System.Int32,System.Uri)">
            <summary>
            Invokes the open query given the specified timeout and URL and 
            returns the results.
            </summary>
            
            <param name="defaultTimeout">
            The time in seconds before the invocation of the query will 
            timeout.
            </param>
            
            <param name="requestUrl">
            A URI representing the complete URL of an existing <see cref="T:Microsoft.Health.OpenQuery"/>.
            The URL must include the query ID and personal identification number
            (PIN) if required.
            </param>
            
            <returns>
            A string representing the invocation results.
            </returns>
            
            <remarks>
            The invocation results are returned as a string because
            any method can be called.
            An open query can be constructed as a call to any of the 
            HealthVault methods. You can also apply any transforms to the 
            method results as part of the open query. The returned string 
            contains the HTTP response. This could be the XML produced by the 
            HealthVault service method, or it can be a transformed version 
            of that XML data.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.Invoke(System.Int32,System.Guid)">
            <summary>
            Invokes the open query given the specified timeout and query ID 
            and returns the results.
            </summary>
            
            <param name="defaultTimeout">
            The time in seconds before the invocation of the query will 
            timeout.
            </param>
            
            <param name="queryId">
            The ID of an existing OpenQuery.
            </param>
            
            <returns>
            A string representing the invocation results.
            </returns>
            
            <remarks>
            The invocation results are returned as a string because
            any method can be called.
            An open query can be constructed as a call to any of the 
            HealthVault methods. You can also apply any transforms to the 
            method results as part of the open query. The returned string 
            contains the HTTP response. This could be the XML produced by the 
            HealthVault service method, or it can be a transformed version 
            of that XML data.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="queryId"/> parameter is empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.Invoke(System.Int32,System.Guid,System.String)">
            <summary>
            Invokes the open query given the specified timeout, query ID, and 
            personal identification number (PIN).
            </summary>
            
            <param name="defaultTimeout">
            The time in seconds before the invocation of the query will 
            timeout.
            </param>
            
            <param name="queryId">
            The ID of an existing <see cref="T:Microsoft.Health.OpenQuery"/>.
            </param>
            
            <param name="pinCode">
            The PIN that is required to access the query.
            </param>
            
            <returns>
            A string representing the invocation results.
            </returns>
            
            <remarks>
            The invocation results are returned as a string because
            any method can be called.
            An open query can be constructed as a call to any of the 
            HealthVault methods. You can also apply any transforms to the 
            method results as part of the open query. The returned string 
            contains the HTTP response. This could be the XML produced by the 
            HealthVault service method, or it can be a transformed version 
            of that XML data.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="queryId"/> parameter is empty.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="pinCode"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.Remove(Microsoft.Health.AuthenticatedConnection,System.Guid)">
            <summary>
            Removes the saved open query from the server.
            </summary>
            
            <param name="connection">
            The <see cref="T:Microsoft.Health.AuthenticatedConnection"/> instance used to remove 
            the <see cref="T:Microsoft.Health.OpenQuery"/>.
            </param>
            
            <param name="queryId">
            The unique identifier of the open query that will be removed.
            </param>
            
            <remarks>
            The person authenticated with the <paramref name="connection"/> 
            must have permission to remove the open query.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="queryId"/> parameter is empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.OpenQuery.GetInfoFromOpenQuery(Microsoft.Health.AuthenticatedConnection,System.Guid)">
            <summary>
            Gets information about an open query.
            </summary>
            
            <param name="connection">
            The <see cref="T:Microsoft.Health.AuthenticatedConnection"/> instance used to
            get information about the open query.
            </param>
            
            <param name="queryId">
            The unique identifier of the open query for which the information 
            will be retrieved.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="queryId"/> parameter is empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error occurred when HealthVault processed the request.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.OpenQuery.Url">
            <summary>
            Gets the URL of the <see cref="T:Microsoft.Health.OpenQuery"/> instance.
            </summary>
            
            <value>
            A Uri representing the URL to the open query including the query
            string parameters containing the ID of the open query.  
            This URL will not contain the pin code if one is required, 
            so it cannot be used to directly invoke pin protected queries.  
            </value>
            
            <remarks>
            The URL for the open query is issued by the HealthVault 
            service when the open query is created.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.OpenQuery.Id">
            <summary>
            Gets the unique identifier for the <see cref="T:Microsoft.Health.OpenQuery"/> instance.
            </summary>
            
            <value>
            A GUID representing the unique identifier for the open query.
            </value>
            
            <remarks>
            The unique identifier for the open query is issued when the open
            query is created by the HealthVault service. This ID 
            is used as a query string parameter to the URL to access the open query.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.OpenQuery.Note">
            <summary>
            Gets the note attached to the open query.
            </summary>
            
            <value>
            A string representing the note for the open query.
            This property returns <b>null</b> if no note was attached.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.OpenQuery.PinRequired">
            <summary>
            Gets a value indicating whether a PIN (personal identification 
            number) is required.
            </summary>
            
            <returns>
            <b>true</b> if a PIN is required; otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.OpenQuery.ExpiresDate">
            <summary>
            Gets the expiration date for the open query.
            </summary>
            
            <returns>
            A DateTime representing the expiration date.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.OpenQuery.CreateDate">
            <summary>
            Gets the creation date of the open query.
            </summary>
            
            <returns>
            A DateTime representing the creation date.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.OpenQuery.ApplicationName">
            <summary>
            Gets the name of the application that created this open query.
            </summary>
            
            <returns>
            A string representing the application name.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.OtherItemData">
            <summary>
            Represents data, typically binary data, that extends the XML of the 
            health record item.
            </summary>
            
            <remarks>
            Other data for a health record item is usually auxiliary to the 
            health record item. This data might either be large or not 
            easily or efficiently stored as XML. Examples include 
            binary data such as images, videos, or binary files.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.OtherItemData.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.OtherItemData"/> class 
            using default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.OtherItemData.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.OtherItemData"/> class 
            with the specified data, encoding, and content type.
            </summary>
            
            <param name="data">
            The data to store in the other data section of the health record
            item.
            </param>
            
            <param name="contentEncoding">
            The type of encoding that was done on the data. Usually this will
            be "base64" but other encodings are acceptable.
            </param>
            
            <param name="contentType">
            The MIME-content type of the data.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.OtherItemData.ParseXml(System.Xml.XPath.XPathNavigator)">
             <summary>
             Populate the <see cref="T:Microsoft.Health.OtherItemData"/> instance from the supplied <see cref="T:System.Xml.XPath.XPathNavigator"/>.
             </summary>
            
             <param name="otherDataNav">
             The <see cref="T:System.Xml.XPath.XPathNavigator"/> to read the data from.
             </param>
        </member>
        <member name="M:Microsoft.Health.OtherItemData.WriteXml(System.Xml.XmlWriter)">
             <summary>
             Writes the other data section to the passed-in XmlWriter.
             </summary>
            
             <remarks>
             Classes that override this method must call the base method to do the actual conversion. 
             </remarks>
             <param name="writer">
             The XmlWriter to write the data to.
             </param>
             
        </member>
        <member name="P:Microsoft.Health.OtherItemData.Data">
            <summary>
            Gets or sets the data.
            </summary>
            
            <returns>
            A string representing the data.
            </returns>
            
            <remarks>
            Binary data can be base64 encoded to be stored as a string.
            <br/><br/>
            The <see cref="P:Microsoft.Health.OtherItemData.ContentType"/> and <see cref="P:Microsoft.Health.OtherItemData.ContentEncoding"/>
            properties should be set to appropriate values for the data.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.OtherItemData.ContentType">
            <summary>
            Gets or sets the MIME content type of other data for the health
            record item.
            </summary>
            
            <returns>
            A string representing the content type.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.OtherItemData.ContentEncoding">
            <summary>
            Gets or sets the content encoding of other data for the health
            record item.
            </summary>
            
            <returns>
            A string representing the encoding.
            </returns>
            
            <remarks>
            In most cases, this should be set to base64, but other 
            encodings are acceptable, such as XML.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv">
            <summary>
            The OtherItemDataCSV class is used to store and retrieve data stored in the HealthVault
            comma-separated format.
            </summary>
            
            <remarks>
            It is not used directly but through a derived class that is specific to a health record item type -
            for example, the ExerciseSamplesData class. 
            </remarks>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv"/> class 
            </summary>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv"/> class 
            with the specified data, encoding, and content type.
            </summary>
            
            <param name="data">
            The data to store in the other data section of the health record
            item.
            </param>
            
            <param name="contentEncoding">
            The type of encoding that was done on the data. Usually this will
            be "base64" but other encodings are acceptable.
            </param>
            
            <param name="contentType">
            The MIME-content type of the data.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.BreakStringAtCharacter(System.String,System.Char)">
            <summary>
            Walk the other data string, keeping track of escapes, and break it at any point where 
            there is an unescaped specified character. 
            </summary>
            <param name="dataString">The string to search.</param>
            <param name="characterToBreakAt">The character to break apart at.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsString">
            <summary>
            Parse the comma-separated representation into an array of strings.
            </summary>
            <remarks>
            When this method returns, the Escapes collection will contain any 
            escapes encountered during the parsing. 
            </remarks>
            <returns>A collection of the strings.</returns>
            <exception cref="T:System.ArgumentException">
            If the content type is not "text/csv".
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the Data section is null.
            </exception>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.GetAsDouble">
            <summary>
            Parses the comma-delimited data into a series of double values. 
            </summary>
            <remarks>
            The collection contains two kinds of values.
            OtherItemDataCsvDouble items contain double values
            OtherItemDataCsvEscape items contain escapes
            </remarks>
            <returns>A collection of OtherItemDataCsvItem</returns>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsv.SetOtherData(System.Collections.Generic.IList{Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem})">
            <summary>
            Create the comma-delimited representation of a set of data and escapes. 
            </summary>
            <remarks>
            The escapes are inserted into the comma-delimited list in the appropriate places. 
            Any escape that occurs after the last element is ignored.
            </remarks>
            <param name="values">The collection of values to store.</param>
            <exception cref="T:System.ArgumentNullException">
            If the parameter <paramref name="values"/> is null.
            </exception>
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvDouble">
            <summary>
            Represents a floating-point number entry in the CSV list
            </summary>
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvItem">
            <summary>
            Base class for CSV items
            </summary>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvDouble.#ctor(System.Double)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvDouble"/> type with a double value.
            </summary>
            <param name="value">The value to store in the instance.</param>
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvDouble.Value">
            <summary>
            Gets or sets the value of the double entry.
            </summary>
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvEscape">
            <summary>
            Information about a single escape entity from an OtherDataHelper object.
            </summary>
            <remarks>
            Escapes are stored using a "name=value" format in the other data text string.
            </remarks>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvEscape.#ctor(System.String,System.String)">
            <summary>
            Create an OtherDataEscape instance.
            </summary>
            <param name="name">The name of the escape value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvEscape.Name">
            <summary>
            Gets or sets the name of the escape.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the name is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the name contains the "=" character.
            </exception>
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvEscape.Value">
            <summary>
            Gets or sets the value of the escape.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If the value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the value contains the "=" character.
            </exception>
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvEscape.NameEqualsValue">
            <summary>
            Gets the escape in "Name=value" format. 
            </summary>
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvString">
            <summary>
            Represents a string entry in the CSV list
            </summary>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvString.#ctor(System.String)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvString"/> instance with a string value.
            </summary>
            <param name="value">The string value of this entry.</param>
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Csv.OtherItemDataCsvString.Value">
            <summary>
            Gets or sets the value of the string entry.
            </summary>
        </member>
        <member name="T:Microsoft.Health.PersonInfo">
            <summary>
            Provides information about a person's HealthVault account.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.CreateFromXml(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a new instance of the PersonInfo class using
            the specified XML.
            </summary>
            
            <param name="connection">
            An <see cref="P:Microsoft.Health.PersonInfo.ApplicationConnection"/> for the current user. The 
            connection can be optionally supplied, but it is overwritten if 
            the connection information is in the XML.
            </param>
            
            <param name="navigator">
            The XML containing the person information.
            </param>
            
            <returns>
            A new instance of <see cref="T:Microsoft.Health.PersonInfo"/> populated with the
            person information.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="nav"/> parameter is <b>null</b> or 
            <paramref name="connection"/> is <b>null</b> and the XML does not 
            contain the connection information.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.CreateFromXmlExcludeUrl(Microsoft.Health.ApplicationConnection,System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a new instance of the PersonInfo class using
            the specified XML.
            </summary>
            
            <param name="connection">
            An <see cref="P:Microsoft.Health.PersonInfo.ApplicationConnection"/> for the current user. The 
            connection can be optionally supplied, but it is overwritten if 
            the connection information is in the XML.
            </param>
            
            <param name="navigator">
            The XML containing the person information.
            </param>
            
            <returns>
            A new instance of <see cref="T:Microsoft.Health.PersonInfo"/> populated with the
            person information.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="nav"/> parameter is <b>null</b> or 
            <paramref name="connection"/> is <b>null</b> and the XML does not 
            contain the connection information.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.#ctor(Microsoft.Health.PersonInfo)">
            <summary>
            Allows derived classes to construct an instance of themselves given
            an instance of the base class.
            </summary>
            
            <param name="personInfo">
            Information about the person for constructing the instance.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.#ctor(Microsoft.Health.ApplicationConnection)">
            <summary>
            Constructs an empty <see cref="T:Microsoft.Health.PersonInfo"/> object which can be used to 
            deserialize person info XML.
            </summary>
            
            <param name="connection">
            The connection the <see cref="T:Microsoft.Health.PersonInfo"/> object should use for operations
            once it has been deserialized.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the class members with data from the specified 
            person information XML.
            </summary>
            
            <param name="navigator">
            The XML to get the person information from.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:Microsoft.Health.PersonInfo.Connection"/> is <b>null</b> and the XML does not contain
            connection information.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.ParseXmlExcludeUrl(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the class members with data from the specified 
            person information XML excluding the embedded platform url.
            </summary>
            
            <param name="navigator">
            The XML to get the person information from.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:Microsoft.Health.PersonInfo.Connection"/> is <b>null</b> and the XML does not contain
            connection information.
            </exception>
        </member>
        <member name="M:Microsoft.Health.PersonInfo.Unmarshal(System.Xml.XmlReader)">
            <summary>
            Populates the data of the class from the XML in
            the specified reader.
            </summary>
            
            <param name="reader">
            The reader to get the data for the class instance
            from.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="reader"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.GetXml">
            <summary>
            Gets the XML representation of the <see cref="T:Microsoft.Health.PersonInfo"/>.
            </summary>
            
            <returns>
            A XML string containing the person information.
            </returns>
            
            <remarks>
            This method can be used to get a serialized version of the 
            <see cref="T:Microsoft.Health.PersonInfo"/>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.GetXmlExcludeUrl">
            <summary>
            Gets the XML representation of the <see cref="T:Microsoft.Health.PersonInfo"/>
            excluding the embedded url.
            </summary>
            
            <returns>
            A XML string containing the person information.
            </returns>
            
            <remarks>
            Embedded url will be overridden with the configuration value.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.Marshal(System.Xml.XmlWriter)">
            <summary>
            Writes the person information into the specified writer as XML.
            </summary>
            
            <param name="writer">
            The XMLWriter receiving the XML.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Sets the application settings in the web service for this person.
            </summary>
            
            <param name="applicationSettings">
            The application specific settings for this person.
            </param>
            
            <remarks>
            This method makes a network call to the web service.
            <br/><br/>
            The XML provided by <paramref name="applicationSettings"/> must
            have the outer node "&lt;app-settings&gt;" or the request will
            fail.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            An error is returned from the server when making the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.PersonInfo.GetSelfRecord">
            <summary>
            Gets the <see cref="T:Microsoft.Health.HealthRecordInfo"/> for the first health record 
            that has a relationship of <see cref="F:Microsoft.Health.RelationshipType.Self"/> with the 
            person.
            </summary>
            
            <returns>
            The first <see cref="T:Microsoft.Health.HealthRecordInfo"/> having the 
            <see cref="F:Microsoft.Health.RelationshipType.Self"/> relationship with the person.
            </returns>
            
            <remarks>
            Since a person may have more than one or no 
            <see cref="F:Microsoft.Health.RelationshipType.Self"/> records, this method returns an 
            error if the person does not have a self record, but it returns 
            the first self record if they have multiple records. There is no 
            guarantee that the first record will always be the same one.
            </remarks>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The person does not have an authorized record with the 
            <see cref="F:Microsoft.Health.RelationshipType.Self"/> relationship that is in the
            Active state with the authorization expiration
            date anytime in the future.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.PersonId">
            <summary>
            Gets the HealthVault unique identifier for the person.
            </summary>
            
            <value>
            A GUID that is assigned to the account when it was created.
            </value>
            
            <remarks>
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.Name">
            <summary>
            Gets the person's name.
            </summary>
            
            <value>
            The person's full name as it was entered into HealthVault.
            </value>
            
            <remarks>
            The person's full name can  be changed only by going to the 
            HealthVault Shell.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.ApplicationSettings">
            <summary>
            Gets the application settings for the current application and
            person.
            </summary>
            
            <remarks>
            This can be <b>null</b> if no application settings have been stored
            for the application or user.
            </remarks>
            
        </member>
        <member name="E:Microsoft.Health.PersonInfo.ApplicationSettingsChanged">
            <summary>
            Occurs when <see cref="M:Microsoft.Health.PersonInfo.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)"/> changes the application settings in
            HealthVault.
            </summary>
            
            <remarks>
            This event is not triggered if another instance of the PersonInfo gets updated or
            if the value changes in HealthVault.
            The sender is the PersonInfo instance that was updated.
            The event args are empty.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.SelectedRecord">
            <summary>
            Gets or sets the record the person has chosen to use as the default 
            record for the current application.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.HealthRecordInfo"/> representing the record the person has
            chosen to use as the default record for the current application.
            </value>
            
            <remarks>
            Note that this property is only applicable to single-record
            applications (SRAs). <br/>
            A value of <b>null</b> indicates that no record has been selected or that
            the person does not have sufficient rights to the record to use
            it with the current application.
            <br/>
            Setting the selected record through will only change the 
            selected record for this instance. Other instances of the 
            <see cref="T:Microsoft.Health.PersonInfo"/> for the same person will have the original 
            selected record. The user can set their selected record through the 
            HealthVault Shell.
            </remarks>
            
        </member>
        <member name="E:Microsoft.Health.PersonInfo.SelectedRecordChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.Health.PersonInfo.SelectedRecord"/> setter is called.
            </summary>
            
            <remarks>
            This event is not triggered if another instance of the PersonInfo gets updated or
            if the value changes in HealthVault.
            The sender is the PersonInfo instance that was updated.
            The event args are empty.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.AuthorizedRecords">
            <summary>
            Gets the authorized record for the person.
            </summary>
            
            <value>
            The records that the person is authorized to access.
            </value>
            
            <remarks>
            A person can access their own health record, 
            health records that they have created for other people, or 
            health records that other people have shared with them. The
            contents of this collection will be all the health records, 
            including those that have been deleted or suspended. A person can
            interact only with active records.
            <br/><br/>
            Shortcuts are provided to get access to the person's own
            health record using <see cref="M:Microsoft.Health.PersonInfo.GetSelfRecord"/> and specific records
            using <see cref="M:Microsoft.Health.ApplicationConnection.GetAuthorizedRecords(System.Collections.Generic.IList{System.Guid})"/> by
            ID.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.PreferredCulture">
            <summary>
            Gets the user's preferred culture.
            </summary>
            
            <remarks>
            The preferred culture should be used when formatting date/time, numbers, collating, etc.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.PreferredUICulture">
            <summary>
            Gets the user's preferred UI culture.
            </summary>
            
            <remarks>
            The preferred UI culture should be used when retrieving text from resources for display
            to the user.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.Connection">
            <summary>
            Gets a reference to the HealthVault service that
            created this <see cref="T:Microsoft.Health.PersonInfo"/> or null if the connection used was an
            <see cref="T:Microsoft.Health.Web.OfflineWebApplicationConnection"/>.
            </summary>
            
            <remarks>
            This may return null if the <see cref="T:Microsoft.Health.PersonInfo"/> was retrieved using an
            <see cref="T:Microsoft.Health.ApplicationConnection"/>.
            It is preferred that <see cref="P:Microsoft.Health.PersonInfo.ApplicationConnection"/> is used instead.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.PersonInfo.ApplicationConnection">
            <summary>
            Gets a reference to the HealthVault connection instance that was used to create this
            <see cref="T:Microsoft.Health.PersonInfo"/>.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.RelationshipType">
            <summary>
            Defines the interpersonal relationship between the authorized
            person and the person to whom the record belongs.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Unknown">
            <summary>
            The relationship is unknown.
            </summary>
            
            <remarks>
            This value is only used to mark the unknown state in the
            <see cref="T:Microsoft.Health.HealthRecordInfo"/> class when data has not been retrieved
            from the HealthVault service. Once data has been retrieved, 
            this state is never used.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Self">
            <summary>
            The record is for the logged-in person.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Other">
            <summary>
            The record is for a person other than the logged-in person.
            </summary>
            
            <remarks>
            This is generally used only for cases in which the other 
            relationships in the enumeration do not apply.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Spouse">
            <summary>
            The record is for the spouse of the logged-in person.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Child">
            <summary>
            The record is for a child of the logged-in person.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Guardian">
            <summary>
            The record is for a guardian of the logged-in person.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Patient">
            <summary>
            The record is for a patient of the logged-in person.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Parent">
            <summary>
            The record is for a parent of the logged-in person.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Application">
            <summary>
            The record is for an application.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Relative">
            <summary>
             The record is for a relative of the logged-in person.
             </summary>
             
        </member>
        <member name="F:Microsoft.Health.RelationshipType.DomesticPartner">
            <summary>
             The record is for a domestic partner of the logged-in person.
             </summary>
             
        </member>
        <member name="F:Microsoft.Health.RelationshipType.Pet">
            <summary>
             The record is for a pet of the logged-in person.
             </summary>
        </member>
        <member name="T:Microsoft.Health.ResourceRetriever">
            <summary>
            Helps manage ResourceManager instances. 
            </summary>
            
            <remarks>
            Due to the heavy-weight nature of ResourceManager it is a good idea
            to cache instances whenever possible. This class uses a static member
            to cache all ResourceManager instances that have been retrieved using
            the assembly and base name.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ResourceRetriever._resourceRetriever">
            <summary>
            Maintains a cache of ResourceManager objects. This is a dictionary
            that is keyed based on the full name of the default resource assembly. 
            The value is another dictionary that is keyed based on the base 
            name for the resource that is being retrieved. The value for this 
            dictionary is the ResourceManager.
            </summary>
        </member>
        <member name="F:Microsoft.Health.ResourceRetriever.syncRoot">
            <summary>
            Used to synchronize access to the ResourceRetriever
            </summary>
        </member>
        <member name="M:Microsoft.Health.ResourceRetriever.GetResourceManager(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the ResourceManager from the cache or gets an instance of 
            the ResourceManager and returns it if it isn't already present 
            in the cache.
            </summary>
            
            <param name="assembly">
            The assembly to be used as the base for resource lookup.
            </param>
            
            <param name="baseName">
            The base name of the resources to get the ResourceManager for.
            </param>
            
            <returns>
            A ResourceManager instance for the assembly and base name that 
            were specified.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ResourceRetriever.GetResourceString(System.String,System.String)">
            <summary>
            Gets the string from the resource manager based on the base name,
            and resource ID specified
            </summary>
            
            <param name="baseName">
            The base name of the resource to retrieve the string from.
            </param>
            
            <param name="resourceId">
            Resource ID for which the localized string needs to be retrieved
            </param>
            
            <returns>
            Localized string, or null if the string does not exist
            </returns>
            
            <remarks>
            The current thread's UI culture is used.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            ArgumentException if <paramref name="baseName"/> or 
            <paramref name="resourceId"/> are null or empty.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            If the value of the specified resource is not a string.
            </exception>
            
            <exception cref="T:System.Resources.MissingManifestResourceException">
            If no usable set of resources have been found, and there are no 
            neutral culture resources.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ResourceRetriever.GetResourceString(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets the string from the resource manager based on the assembly,
            base name, resource ID, and culture specified
            </summary>
            
            <param name="assembly">
            The base assembly from which to get the resources from.
            </param>
            
            <param name="baseName">
            The base name of the resource to retrieve the string from.
            </param>
            
            <param name="resourceId">
            Resource ID for which the localized string needs to be retrieved
            </param>
            
            <returns>
            Localized String, or null if the string does not exist
            </returns>
            
            <remarks>
            The current thread's UI culture is used.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            ArgumentException if <paramref name="baseName"/> or 
            <paramref name="resourceId"/> are null or empty.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            If the value of the specified resource is not a string.
            </exception>
            
            <exception cref="T:System.Resources.MissingManifestResourceException">
            If no usable set of resources have been found, and there are no 
            neutral culture resources.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ResourceRetriever.FormatResourceString(System.String,System.String,System.Object[])">
            <summary>
            Gets a template string from the resource manager using the
            calling assembly, and the current thread's UI culture, then 
            inserts parameters using String.Format.
            </summary>
            
            <param name="baseName">
            The base name of the resource to retrieve the string from.
            </param>
            
            <param name="resourceId">
            Resource ID for which the localized string needs to be retrieved
            </param>
            
            <param name="args">
            String.Format insertion parameters
            </param>
            
            <returns>
            Localized string, or null if the string does not exist
            </returns>
            
            <exception cref="T:System.ArgumentException">
            ArgumentException if <paramref name="baseName"/> or 
            <paramref name="resourceId"/> are null or empty.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            If the value of the specified resource is not a string.
            </exception>
            
            <exception cref="T:System.Resources.MissingManifestResourceException">
            If no usable set of resources have been found, and there are no 
            neutral culture resources.
            </exception>
            
            <exception cref="T:System.FormatException">
            If <paramref name="args"/> could not be formatted into the 
            resource string.
            </exception> 
            
        </member>
        <member name="M:Microsoft.Health.ResourceRetriever.InitRMWithAssembly(System.String,System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a Resource manager instance based on the assembly 
            specified.
            </summary>
            
            <param name="baseName">
            The root name of the resources. 
            For example, the root name for the resource file 
            named "MyResource.en-US.resources" is "MyResource". 
            </param>
            
            <param name="assemblyToUse">
            The main Assembly for the resources
            </param>
            
            <param name="usingResourceSet">
            The Type of the custom ResourceSet to use. 
            If a null reference, the default runtime ResourceSet is used
            </param>
            
            <returns>
            Resource Manager instance
            </returns>
            
            <exception cref="T:System.ArgumentException">
            Thrown if the resource manager instance could not be created
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.SDKHelper">
            <summary>
            HealthVault XML Helper Class
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.SDKHelper.DateUnspecified">
            <summary>
            invalid date marker
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.SDKHelper.XmlFromNow">
            <summary>
            XML-formatted date time value
            </summary>
            
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Health.SDKHelper.XmlFromLocalDateTime(System.DateTime)">
            <summary>
            XML-formatted date time value
            </summary>
            
            <param name="dateTime"></param>
            
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Health.SDKHelper.XmlFromUtcDateTime(System.DateTime)">
            <summary>
            XML Formatted date time value
            </summary>
            
            <param name="dateTime"></param>
            
            <returns></returns>
            
            <exception cref="T:System.ArgumentException">
            If the date time value provided is not in UTC format.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.SDKHelper.XmlFromDateTime(System.DateTime)">
            <summary>
            XML-formatted date time value
            </summary>
            
            <param name="dateTime"></param>
            
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Health.SDKHelper.ReadUntil(System.Xml.XmlReader,System.String)">
            <summary>
            Read until we find a node with the name
            </summary>
            
            <param name="xmlReader"></param>
            
            <param name="elementName"></param>
            
        </member>
        <member name="M:Microsoft.Health.SDKHelper.SkipToElement(System.Xml.XmlReader)">
            <summary>
            Read until we get to the next element
            </summary>
            
            <param name="xmlReader"></param>
            
        </member>
        <member name="T:Microsoft.Health.ServiceInfo">
            <summary>
            Provides information about the HealthVault service to which you are 
            connected.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ServiceInfo.HealthServiceUrl">
            <summary>
            Gets the HealthVault URL.
            </summary>
            
            <value>
            A Uri representing a URL to the HealthVault service.
            </value>
            
            <remarks>
            This is the URL to the wildcat.ashx which is used to call the
            HealthVault XML methods.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ServiceInfo.Version">
            <summary>
            Gets the version of the HealthVault service.
            </summary>
            
            <value>
            A string indicating the version of the HealthVault Service.
            </value>
            
            <remarks>
            This value is generally in the format of a 
            <see cref="T:System.Version"/>, but can be changed by the
            HealthVault service provider.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ServiceInfo.HealthServiceShellInfo">
            <summary>
            Gets the latest information about the HealthVault Shell.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ServiceInfo.Assemblies">
            <summary>
            Gets the latest information about the assemblies that represent 
            the HealthVault SDK.
            </summary>
            
            <value>
            A read-only collection of information about the .NET assemblies
            that can be used as helpers for accessing the HealthVault service.
            </value>
            
            <remarks>
            This property is no longer supported and will always return an empty 
            collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ServiceInfo.Methods">
            <summary>
            Gets information about the methods that the HealthVault service
            exposes.
            </summary>
            
            <value>
            A read-only collection of the HealthVault method definitions.
            </value>
            
            <remarks>
            A HealthVault method is a named service point provided by the HealthVault
            service that answers HTTP requests that contain XML adhering to 
            the HealthVault request schema. The elements of this collection
            define the method name, and request and response schemas for the 
            method.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ServiceInfo.IncludedSchemaUrls">
            <summary>
            Gets the URLs of the common schemas that are included in the
            method XSDs.
            </summary>
            
            <value>
            A read-only collection containing the URLs of the schemas that
            are included in the <see cref="P:Microsoft.Health.ServiceInfo.Methods"/> request and response
            schemas.
            </value>
            
            <remarks>
            Many of the <see cref="P:Microsoft.Health.ServiceInfo.Methods"/> contain types that are common
            across different method requests and responses. These types are
            defined in the included schema URLs so that they can be referenced
            by each of the methods as needed.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ServiceInfo.ConfigurationValues">
            <summary>
            Gets the public configuration values for the HealthVault service.
            </summary>
            
            <value>
            The dictionary returned uses the configuration value name as the key. All entries are
            public configuration values that the HealthVault service exposes as information to 
            HealthVault applications. Values can be used to throttle health record item queries, etc.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.SignatureFailureException">
             <summary>
             Represents the exception thrown when a failure occurs during a 
             signature operation.
             </summary>
            
        </member>
        <member name="M:Microsoft.Health.SignatureFailureException.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.SignatureFailureException"/> 
            class with the specified message.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.SignatureFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.SignatureFailureException"/> 
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The exception message.
            </param>
            
            <param name="innerException">
            The exception that occurred during the signature operation.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.SignatureFailureException.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.SignatureFailureException"/> 
            class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Health.SignatureFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.SignatureFailureException"/> 
            class with the specified serialization information and context.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.SignatureFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The source and destination of the serialized information.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypeManager">
            <summary>
            Manages the mapping of a health record item type ID to a class 
            representing the type-specific data for an item and the method used 
            to deserialize it.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterDefaultTypeHandlers">
            <summary>
            Registers the default type handlers.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type)">
            <summary>
            Registers a deserializer for item type-specific data.
            </summary>
            
            <param name="typeId">
            The unique identifier for the item type-specific data as defined
            by the HealthVault service.
            </param>
            
            <param name="itemTypeClass">
            The class that implements the item type-specific data. It must
            be public, derive from <see cref="T:Microsoft.Health.HealthRecordItem"/>, and 
            have a default constructor.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterTypeHandler(System.Guid,System.Type,System.Boolean)">
             <summary>
             Registers a deserializer for item type-specific data.
             </summary>
             
             <param name="typeId">
             The unique identifier for the item type-specific data as defined
             by the HealthVault service.
             </param>
             
             <param name="itemTypeClass">
             The class that implements the item type-specific data. It must
             be public, derive from <see cref="T:Microsoft.Health.HealthRecordItem"/>, and 
             have a default constructor.
             </param>
             
             <param name="overwriteExisting">
             <b>true</b> to register the new deserializer even if the type
             already has a deserializer registered; <b>false</b> to throw an 
             exception because a deserializer is already registered.
             </param>
            
             <exception cref="T:System.ArgumentException">
             The <paramref name="typeId"/> parameter is <see cref="F:System.Guid.Empty"/> or
             the <paramref name="itemTypeClass"/> parameter does not derive from
             <see cref="T:Microsoft.Health.HealthRecordItem"/>.
             </exception>
             
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="itemTypeClass"/> parameter is <b>null</b>.
             </exception>
             
             <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
             The <paramref name="typeId"/> parameter already has a handler 
             registered and <paramref name="overwriteExisting"/> is <b>false</b>.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type)">
            <summary>
            Registers a deserializer for item extension data.
            </summary>
            
            <param name="extensionSource">
            The unique identifier for the source of the item extension.
            </param>
            
            <param name="itemExtensionClass">
            The class that implements the item extension. It must
            be public, derive from <see cref="T:Microsoft.Health.HealthRecordItemExtension"/>, 
            and have a default constructor.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterExtensionHandler(System.String,System.Type,System.Boolean)">
             <summary>
             Registers a deserializer for item extension data.
             </summary>
             
             <param name="extensionSource">
             The unique identifier for the source of the item extension.
             </param>
             
             <param name="itemExtensionClass">
             The class that implements the item extension. It must
             be public, derive from <see cref="T:Microsoft.Health.HealthRecordItemExtension"/>, 
             and have a default constructor.
             </param>
             
             <param name="overwriteExisting">
             <b>true</b> to register the new deserializer even if the type
             already has a deserializer registered; <b>false</b> to throw an 
             exception because a deserializer is already registered.
             </param>
            
             <exception cref="T:System.ArgumentException">
             The <paramref name="extensionSource"/> parameter is <b>null</b> or empty or
             the <paramref name="itemExtensionClass"/> parameter does not derive from
             <see cref="T:Microsoft.Health.HealthRecordItemExtension"/>.
             </exception>
             
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="itemExtensionClass"/> parameter is <b>null</b>.
             </exception>
             
             <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
             The <paramref name="extensionSource"/> already has a handler 
             registered and <paramref name="overwriteExisting"/> is <b>false</b>.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.Guid,System.String,System.Type)">
            <summary>
            Registers a class as the handler for the application specific health record
            item type with the specific application ID and subtype tag.
            </summary>
            
            <param name="applicationId">
            The application identifier for the application specific data that the
            specified type will handle.
            </param>
            
            <param name="subtypeTag">
            The subtype tag for the application specific data that the specified type
            will handle.
            </param>
            
            <param name="applicationSpecificHandlerClass">
            The .NET type that handles parsing of the application specific data for
            the specified application ID and subtype tag.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId"/> is <see cref="F:System.Guid.Empty"/>,
            or <paramref name="subtypeTag"/> is 
            <b>null</b> or empty, or if <paramref name="applicationSpecificHandlerClass"/> 
            does not derive from <see cref="T:Microsoft.Health.ItemTypes.ApplicationSpecific"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="applicationSpecificHandlerClass"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
            If a type is already registered to handle the application specific data
            for the specified <paramref name="applicationId"/> and
            <paramref name="subtypeTag"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type)">
            <summary>
            Registers a class as the handler for the application specific health record
            item type with the specific application ID and subtype tag.
            </summary>
            
            <param name="applicationId">
            The application identifier for the application specific data that the
            specified type will handle.
            </param>
            
            <param name="subtypeTag">
            The subtype tag for the application specific data that the specified type
            will handle.
            </param>
            
            <param name="applicationSpecificHandlerClass">
            The .NET type that handles parsing of the application specific data for
            the specified application ID and subtype tag.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId"/> or <paramref name="subtypeTag"/> is 
            <b>null</b> or empty, or if <paramref name="applicationSpecificHandlerClass"/> 
            does not derive from <see cref="T:Microsoft.Health.ItemTypes.ApplicationSpecific"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="applicationSpecificHandlerClass"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
            If a type is already registered to handle the application specific data
            for the specified <paramref name="applicationId"/> and
            <paramref name="subtypeTag"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Registers a class as the handler for the application specific health record
            item type with the specific application ID and subtype tag.
            </summary>
            
            <param name="applicationId">
            The application identifier for the application specific data that the
            specified type will handle.
            </param>
            
            <param name="subtypeTag">
            The subtype tag for the application specific data that the specified type
            will handle.
            </param>
            
            <param name="applicationSpecificHandlerClass">
            The .NET type that handles parsing of the application specific data for
            the specified application ID and subtype tag.
            </param>
            
            <param name="overwriteExisting">
            If true and an entry exist for the specified <paramref name="applicationId"/>
            and <paramref name="subtypeTag"/> it will be replaced.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId"/> or <paramref name="subtypeTag"/> is 
            <b>null</b> or empty, or if <paramref name="applicationSpecificHandlerClass"/> 
            does not derive from <see cref="T:Microsoft.Health.ItemTypes.ApplicationSpecific"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="applicationSpecificHandlerClass"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
            If a type is already registered to handle the application specific data
            for the specified <paramref name="applicationId"/> and
            <paramref name="subtypeTag"/> and <paramref name="overwriteExisting"/> is false.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.DeserializeItem(System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Health.HealthRecordItem"/> or an appropriate derived type for the
            specified item XML.
            </summary>
            
            <param name="itemXml">
            The item XML, including the health record item tag as the root, to be
            deserialized into a <see cref="T:Microsoft.Health.HealthRecordItem"/>.
            </param>
            
            <returns>
            A <see cref="T:Microsoft.Health.HealthRecordItem"/> or derived type based on the specified item XML.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.DeserializeItem(System.Xml.XmlReader)">
            <summary>
            Deserializes the response XML into a <see cref="T:Microsoft.Health.HealthRecordItem"/> or derived type
            based on the registered health record item handler.
            </summary>
            
            <param name="thingReader">
            The XML representation of the item.
            </param>
            
            <returns>
            The <see cref="T:Microsoft.Health.HealthRecordItem"/> or derived class instance representing the data
            in the XML.
            </returns>
            
            <exception cref="T:System.Reflection.TargetInvocationException">
            The constructor of the type being created throws an 
            exception. The inner exception is the exception thrown by the
            constructor.
            </exception>
            
            <exception cref="T:System.MissingMethodException">
            The default constructor of the type being created is not public.
            If you registered the type handler, be sure that the type you
            registered for the item type class has a public default 
            constructor.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.DeserializeExtension(System.Xml.XPath.XPathNavigator)">
            <summary>
            Deserializes the response XML for extensions into a 
            <see cref="T:Microsoft.Health.HealthRecordItemExtension"/> or derived type based on the registered 
            extension handler.
            </summary>
            
            <param name="extensionNav">
            The XML representation of the extension data.
            </param>
            
            <returns>
            The <see cref="T:Microsoft.Health.HealthRecordItemExtension"/> or derived class instance 
            representing the data in the XML.
            </returns>
            
            <exception cref="T:System.Reflection.TargetInvocationException">
            If the constructor of the type being created throws an 
            exception. The inner exception is the exception thrown by the
            constructor.
            </exception>
            
            <exception cref="T:System.MissingMethodException">
            The default constructor of the type being created is not public.
            If you registered the extension handler, be sure that the type you
            registered for the extension type class has a public default 
            constructor.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the definitions for all health record item type definitions
            supported by HealthVault.
            </summary>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds"/> is <b>null</b> and empty, or 
            <paramref name="typeIds"/> is <b>null</b> and member in <paramref name="typeIds"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the definitions for all health record item type definitions
            supported by HealthVault only if they have been updated since the 
            specified last client refresh date.
            </summary>
            
            <param name="typeIds">
            A collection of health record items whose details are being requested. Null indicates 
            that all health item records should be returned.
            </param>
            
            <param name="lastClientRefreshDate">
            A <see cref="T:System.DateTime"/> instance that specifies the time of the last refresh
            made by the client.
            </param>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds"/> is <b>null</b> and empty, or 
            <paramref name="typeIds"/> is <b>null</b> and member in <paramref name="typeIds"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the requested definitions for the specified health record item type definitions
            supported by HealthVault.
            </summary>
            
            <param name="typeIds">
            A collection of health item record type Ids whose details are being requested. Null 
            indicates that all health item record types should be returned.
            </param>
            
            <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type of
            details to be returned for the specified health item record(s).
            </param>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds"/> is <b>null</b> and empty, or 
            <paramref name="typeIds"/> is <b>null</b> and member in <paramref name="typeIds"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the requested health record item type definitions supported by HealthVault 
            only if they have been updated since the specified last client refresh date.
            </summary>
            
            <param name="typeIds">
            A collection of health item type IDs whose details are being requested. Null 
            indicates that all health item types should be returned.
            </param>
            
            <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type of
            details to be returned for the specified health item record(s).
            </param>
            
            <param name="lastClientRefreshDate">
            A <see cref="T:System.DateTime"/> instance that specifies the time of the last refresh
            made by the client.
            </param>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds"/> is <b>null</b> and empty, or 
            <paramref name="typeIds"/> is <b>null</b> and member in <paramref name="typeIds"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(Microsoft.Health.HealthRecordItemTypeSections,Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the definitions for all health record item type definitions
            supported by HealthVault.
            </summary>
            
            <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type of
            details to be returned for the specified health item record(s).
            </param>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds"/> is <b>null</b> and empty, or 
            <paramref name="typeIds"/> is <b>null</b> and member in <paramref name="typeIds"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthRecordItemTypeSections,System.Collections.Generic.IList{System.String},System.Nullable{System.DateTime},Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the definitions for one or more health record item type definitions
            supported by HealthVault.
            </summary>
            
            <param name="typeIds">
            A collection of health item type IDs whose details are being requested. Null 
            indicates that all health item types should be returned.
            </param>
            
            <param name="sections">
            A collection of HealthRecordItemTypeSections enumeration values that indicate the type 
            of details to be returned for the specified health item records(s).
            </param>
            
            <param name="imageTypes">
            A collection of strings that identify which health item record images should be 
            retrieved.
            
            This requests an image of the specified mime type should be returned. For example, 
            to request a GIF image, "image/gif" should be specified. For icons, "image/vnd.microsoft.icon" 
            should be specified. Note, not all health item records will have all image types and 
            some may not have any images at all.
                           
            If '*' is specified, all image types will be returned.
            </param>
            
            <param name="lastClientRefreshDate">
            A <see cref="T:System.DateTime"/> instance that specifies the time of the last refresh
            made by the client.
            </param>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds"/> is <b>null</b> and empty, or 
            <paramref name="typeIds"/> is <b>null</b> and member in <paramref name="typeIds"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the definition for a health record item type.
            </summary>
            
            <param name="typeId"> 
            The unique identifier for the type to get the definition of.
            </param>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definition for the specified type, or <b>null</b> if the
            <paramref name="typeId"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the type is not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="typeId"/> parameter is Guid.Empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Collections.Generic.IList{System.Guid},Microsoft.Health.HealthServiceConnection)">
            <summary>
            Gets the definition of one or more health record item type definitions
            supported by HealthVault.
            </summary>
            
            <param name="typeIds"> 
            The unique identifiers for the type to get the definition of.
            </param>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <returns>
            The type definitions for the specified types, or empty if the
            <paramref name="typeIds"/> parameter does not represent a known unique
            type identifier.
            </returns>
            
            <remarks>
            This method calls the HealthVault service if the types are not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="typeIds"/> is <b>null</b> and empty, or 
            <paramref name="typeIds"/> is <b>null</b> and member in <paramref name="typeIds"/> is 
            <see cref="F:System.Guid.Empty"/>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.GetBaseHealthRecordItemTypeDefinition(Microsoft.Health.HealthServiceConnection)">
            <summary> 
            Gets the health record item type definition for the base item type.
            </summary>
            
            <param name="connection"> 
            A connection to the HealthVault service.
            </param>
            
            <remarks> 
            The base item type is a constructed item type that contains
            definitions of the standard item transforms that will work 
            for any item type. If a specific item type does not define a 
            standard transformation, the base item type transformation can
            be used instead.
            <br/><br/>
            This method calls the HealthVault service if the type is not
            already in the client-side cache.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="connection"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypeManager.ClearItemTypeCache">
            <summary> 
            Removes all item type definitions from the client-side cache.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException">
            <summary>
            Indicates that a health record item type handler has already been registered for 
            the specified item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.TypeHandlerAlreadyRegisteredException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException"/>
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.TypeHandlerAlreadyRegisteredException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException"/>
            class with the specified message.
            </summary>
            
            <param name="message">
            The message describing the exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.TypeHandlerAlreadyRegisteredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException"/>
            class with the specified message and inner exception.
            </summary>
            
            <param name="message">
            The error message.
            </param>
            
            <param name="innerException">
            The inner exception.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.TypeHandlerAlreadyRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.TypeHandlerAlreadyRegisteredException"/>
            class with the specified serialization information.
            </summary>
            
            <param name="info">
            Serialized information about this exception.
            </param>
            
            <param name="context">
            The stream context of the serialized information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.TypeHandlerAlreadyRegisteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            
            <param name="info">
            The serialization information.
            </param>
            
            <param name="context">
            The serialization context.
            </param>
            
        </member>
        <member name="T:Microsoft.Health.TypeIdSetDefinition">
            <summary>
            Defines a set of health record items of the specified type 
            for authorization purposes.
            </summary>
            
            <remarks>
            Permissions on data in a person's health records are always included
            in an authorization set (whether implicitly via their type or 
            effective date, or explicitly by setting the system set.) This class
            serves as a set of health record items that have a specified type ID. 
            Other types of authorization sets include:
            <see cref="T:Microsoft.Health.DateRangeSetDefinition"/>.
            </remarks>
            
            <seealso cref="T:Microsoft.Health.AuthorizationSetDefinition"/>
            <seealso cref="T:Microsoft.Health.DateRangeSetDefinition"/>
            
        </member>
        <member name="M:Microsoft.Health.TypeIdSetDefinition.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.TypeIdSetDefinition"/> class 
            with the specified type identifier.
            </summary>
            
            <param name="typeId">
            The identifier of the type for the set.
            </param>
            
            <remarks>
            The <paramref name="typeId"/> must be the identifier for a health
            record item type. See 
            <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)"/>
            for information on getting the value health record item types.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="typeId"/> parameter is Guid.Empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.TypeIdSetDefinition.GetXml">
            <summary>
            Gets the XML representation of the set.
            </summary>
            
            <returns>
            The XML representation of the set as a string.
            </returns>
            
            <remarks>
            The XML representation adheres to the schema required by the
            HealthVault methods.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.TypeIdSetDefinition.TypeId">
            <summary>
            Gets the type identifier for the set.
            </summary>
            
            <value>
            A Guid representing the unique identifier for a health record item
            type.
            </value>
            
            <remarks>
            The value must be the identifier for a health record item
            type. 
            <see cref="M:Microsoft.Health.ItemTypeManager.GetHealthRecordItemTypeDefinition(System.Guid,Microsoft.Health.HealthServiceConnection)"/>
            for information on getting the value health record item types.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.UserTagSetDefinition">
            <summary>
            Defines a set of health record items for authorization 
            purposes whose user tags are within a specified set.
            </summary>
            
            <remarks>
            Permissions on data in a person's health records are always included
            in an authorization set (whether implicitly via their type or 
            effective date, or explicitly by setting the system set.) This class
            serves as a set of health record items that have effective dates 
            falling within the specified range. Other types of authorization 
            sets include:
            <see cref="T:Microsoft.Health.TypeIdSetDefinition"/>.
            <see cref="T:Microsoft.Health.DateRangeSetDefinition"/>.
            </remarks>
            
            <seealso cref="T:Microsoft.Health.AuthorizationSetDefinition"/>
            <seealso cref="T:Microsoft.Health.TypeIdSetDefinition"/>
            <seealso cref="T:Microsoft.Health.DateRangeSetDefinition"/>
            
        </member>
        <member name="M:Microsoft.Health.UserTagSetDefinition.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.UserTagSetDefinition"/> 
            class with the specified user tags.
            </summary>
            
            <param name="userTags">
            A string with comma-separated user tags.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="userTags"/> parameter is <b>null</b> or does 
            not contain at least one valid user tag.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.UserTagSetDefinition.MakeUserTagList(System.String)">
            <summary>
            Creates a name value collection of user tags from an input string.
            </summary>
            
            <param name="allUserTags"></param>
            
            <returns>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> whose keys and values 
            are both the unique user tags in the string. If the string is <b>null</b> 
            or empty or if there are no user tags, then <b>null</b> is returned.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.UserTagSetDefinition.GetXml">
            <summary>
            Gets the XML representation of the set.
            </summary>
            
            <returns>
            The XML representation of the set as a string.
            </returns>
            
            <remarks>
            The XML representation adheres to the schema required by the
            HealthVault methods.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            If no user tags are specified in the <see cref="P:Microsoft.Health.UserTagSetDefinition.UserTags"/> property.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.UserTagSetDefinition.UserTags">
            <summary>
            Gets the user tags of the health record items in this set.
            </summary>
            
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of user tags.
            </value>
            
            <remarks>
            The keys and values in the collection are identical.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.Vocabulary">
            <summary>
            Vocabulary list
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.Vocabulary.Culture">
            <summary>
            Gets culture information containing the language in which the
            vocabulary items are represented.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.Vocabulary.Name">
            <summary>
            Gets the name of the <see cref="T:Microsoft.Health.Vocabulary"/>.
            </summary>
            
            <value>
            A string representing the <see cref="T:Microsoft.Health.Vocabulary"/> name.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.Vocabulary.Family">
            <summary>
            Gets the family of the vocabulary.
            </summary>
            
            <value>
            A string representing the <see cref="T:Microsoft.Health.Vocabulary"/> family.
            </value>
            
            <remarks>
            The family indicates the source of the 
            information in the vocabulary, including 
            external standards such as ISO or 
            internal standards such as HealthVault Vocabulary. 
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.Vocabulary.Version">
            <summary>
            Gets the version of the <see cref="T:Microsoft.Health.Vocabulary"/>.
            </summary>
            
            <value>
            A string representing the <see cref="T:Microsoft.Health.Vocabulary"/> version.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.Vocabulary.IsNotEmpty">
            <summary>
            Gets if the vocabulary contains none empty member.  
            </summary>
        </member>
        <member name="P:Microsoft.Health.Vocabulary.IsTruncted">
            <summary>
            Gets if the set vocabulary items in the <see cref="T:Microsoft.Health.Vocabulary"/> has been truncated i.e. 
            there could be more <see cref="T:Microsoft.Health.VocabularyItem"/>s in the <see cref="T:Microsoft.Health.Vocabulary"/>. 
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.VocabularyItem">
            <summary>
            Represents an item in the HealthVault <see cref="P:Microsoft.Health.VocabularyItem.Vocabulary"/>.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.CodedValue">
            <summary>
            Represents the code description for a <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/>.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.HealthRecordItemData">
            <summary>
            Abstract base class for all types that represent data that can
            be serialized into a health record item.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthRecordItemData.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the information.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthRecordItemData.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the information into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the contact information.
            </param>
            
            <param name="writer">
            The XML writer into which the contact information should be 
            written.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodedValue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CodedValue"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodedValue.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CodedValue"/> class with 
            the specified code value and vocabulary.
            </summary>
            
            <param name="value">
            The identifying value for the code.
            </param>
            
            <param name="vocabularyName">
            The name of the vocabulary the code belongs to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter or <paramref name="vocabularyName"/>
            is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodedValue.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CodedValue"/> class 
            with the specified code value, vocabulary, family, and version.
            </summary>
            
            <param name="value">
            The identifying value for the code.
            </param>
            
            <param name="vocabularyName">
            The name of the vocabulary the code belongs to.
            </param>
            
            <param name="family">
            The family of vocabulary terms that the code belongs to.
            </param>
            
            <param name="version">
            The version of the vocabulary the code belongs to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> or <paramref name="vocabularyName"/> parameter 
            is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodedValue.#ctor(System.String,Microsoft.Health.VocabularyKey)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CodedValue"/> class 
            with the specified code value, vocabulary, family, and version.
            </summary>
            <param name="value">
            The identifying value for the code.
            </param>
            <param name="key">
            key for identifying a Vocabulary in the HealthLexicon.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> or <paramref name="key"/> parameter 
            is <b>null</b> or empty.
            </exception>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodedValue.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the description of the code from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the coded value.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodedValue.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the code description to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the code value.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the code description to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.CodedValue.Value"/> or <see cref="P:Microsoft.Health.ItemTypes.CodedValue.VocabularyName"/> property 
            is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodedValue.ToString">
            <summary>
            Gets a string representation of the vocabulary item reference.
            </summary>
            
            <returns>
            A string representation of the vocabulary item reference.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodedValue.Value">
            <summary>
            Gets or sets the code value.
            </summary>
            
            <value>
            A string representing the code value.
            </value>
            
            <remarks>
            The code value is the identifier for the code in the specified
            vocabulary and family.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only
            whitespace during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodedValue.Family">
            <summary>
            Gets or sets the code family.
            </summary>
            
            <value>
            A string representing the code family.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the property should not be stored.
            <br/><br/>
            The family represents the NCPDP value for a code.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodedValue.VocabularyName">
            <summary>
            Gets or sets the vocabulary name.
            </summary>
            
            <value>
            A string representing the vocabulary name.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="VocabularyName"/> property is <b>null</b>, empty, or contains only
            whitespace during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodedValue.Version">
            <summary>
            Gets or sets the code version.
            </summary>
            
            <value>
            A string representing the code version.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the property should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyItem.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the description of the code from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the coded item.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyItem.ToString">
            <summary>
            Retrieves the code item as a string.
            </summary>
            
            <returns>
            The display text associated with this code item. 
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyItem.DisplayText">
            <summary>
            Gets a localized display text. 
            </summary>
            
            <value>
            A string representing the display text.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyItem.AbbreviationText">
            <summary>
            Gets a localized and abbreviated representation 
            of the display text.
            </summary>
            
            <value>
            A string representing the abbreviation text.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyItem.InfoXml">
            <summary>
            Gets any extra information associated with the code item.
            </summary>
            
            <value>
            An IXPathNavigable object representing the extra information.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyItem.Vocabulary">
            <summary>
            The <see cref="P:Microsoft.Health.VocabularyItem.Vocabulary"/> to which this item belongs.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.VocabularyItemCollection">
            <summary>
            A collection of vocabulary items belonging to a particular vocabulary.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyItemCollection.OrderedValues">
            <summary>
            Retrieves the vocabulary items in the intended order for this instance.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyItemCollection.Item(System.Int32)">
            <summary>
            Retrieves the vocabulary item at the specified index based on the intended order
            for this instance.
            </summary>
            
            <param name="index"></param>
            
            <returns></returns>
            
        </member>
        <member name="T:Microsoft.Health.VocabularyItemDataConverter">
            <summary>
            Represents the converter class that converts values 
            between different vocabulary items.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyItemDataConverter.ConvertToBaseUnits(Microsoft.Health.VocabularyItem,System.Double)">
             <summary>
             Converts a value from the source vocabulary item units to 
             the base units of the vocabulary. 
             </summary>
             
             <remarks>
             This method does not check the sign of the value. The caller
             is responsible for ensuring the input data value make sense for
             the input vocabulary item.
             </remarks>
             
             <param name="vocabularyItem">The vocabulary item of the data 
             value to convert to base units.</param>
             
             <param name="value">The data value to convert to base units.
             </param>
             
             <returns>The converted data value in the base units for the  
             vocabulary.
             </returns>
                   
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="vocabularyItem"/> parameter is <b>null</b>. 
             </exception> 
            
             <exception cref="T:System.NotSupportedException">
             The <paramref name="vocabularyItem"/> parameter does not 
             support conversions to base units.
             </exception>        
            
             <exception cref="T:Microsoft.Health.ConversionFailureException">
             An unknown or unsupported conversion is encountered or
             an error occurs during the conversion to base units. 
             </exception> 
             
        </member>
        <member name="T:Microsoft.Health.VocabularyKey">
            <summary>
            Represents a key for identifying a Vocabulary in the HealthLexicon.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyKey.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.VocabularyKey"/> class 
            consisting only of a vocabulary name.
            </summary>
            
            <remarks>
            Since the family is unspecified, it is assumed to be the
            HealthService family of vocabularies. Since the version is unspecified, 
            the most current version of the vocabulary is referenced for retrieval
            or searching.
            </remarks>
            
            <param name="name">
            The name of the vocabulary.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyKey.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.VocabularyKey"/> class 
            consisting of a vocabulary name and the vocabulary family name. 
            </summary>
            
            <remarks>
            Since the version is unspecified, the most current version of the 
            vocabulary will be returned.
            </remarks>
            
            <param name="name">
            The name of the vocabulary.
            </param>
            <param name="family">
            The name of the family the vocabulary belongs to. 
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.VocabularyKey"/> class 
            consisting of a vocabulary name, vocabulary version, and the 
            vocabulary family name.
            </summary>
            
            <param name="name">
            The name of the vocabulary.
            </param>
            <param name="family">
            The name of the family the vocabulary belongs to.
            </param>
            <param name="version">
            The version of the vocabulary. 
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/>  is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyKey.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.VocabularyKey"/> class 
            consisting of a vocabulary name, vocabulary version, the 
            vocabulary family name and the code value of the vocabulary item which should 
            be the first item in the result set of vocabulary items returned.
            </summary>
            
            <param name="name">
            The name of the vocabulary.
            </param>
            
            <param name="family">
            The name of the family the vocabulary belongs to.
            </param>
            
            <param name="version">
            The version of the vocabulary. 
            </param>
            
            <param name="codeValue">
            The code value representing the vocabulary item which is to be the first item in the 
            result set of vocabulary items returned. 
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyKey.ToString">
            <summary>
            Returns a String that represents the current <see cref="T:Microsoft.Health.Vocabulary"/>.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.VocabularyKey.WriteXml(System.Xml.XmlWriter)">
             <summary>
             Writes the vocabulary key to the specified XmlWriter.
             </summary>
             
             <param name="writer">
             The XmlWriter to write the vocabulary key to.
             </param> 
            
        </member>
        <member name="P:Microsoft.Health.VocabularyKey.Name">
            <summary>
            Gets or sets the name of the Vocabulary.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            If the property value is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyKey.Family">
            <summary>
            Gets or sets the name of the family the <see cref="T:Microsoft.Health.Vocabulary"/> belongs to. 
            </summary>
            
            <value>
            A string representing the <see cref="T:Microsoft.Health.Vocabulary"/> family name.
            </value>
            
            <remarks>
            If the family is unspecified, the system assumes that the requested
            vocabulary belongs to the HealthService family of vocabularies.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyKey.Version">
            <summary>
            Gets or sets the version of the <see cref="T:Microsoft.Health.Vocabulary"/>. 
            </summary>
            
            <value>
            A string representing the <see cref="T:Microsoft.Health.Vocabulary"/> version.
            </value>
            
            <remarks>
            If the version is unspecified, the most current version of the 
            vocabulary is returned.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyKey.CodeValue">
            <summary>
            Gets or sets the code value of the <see cref="T:Microsoft.Health.VocabularyItem"/> that is supposed to 
            be the first result in set of <see cref="T:Microsoft.Health.VocabularyItem"/>s returned as a result. 
            </summary>
            
            <value>
            A string representing the code value of the <see cref="T:Microsoft.Health.VocabularyItem"/>.
            </value>
            
            <remarks>
            If the code value is unspecified, the <see cref="T:Microsoft.Health.VocabularyItem"/>s in the 
            <see cref="T:Microsoft.Health.Vocabulary"/> are returned starting from the first 
            <see cref="T:Microsoft.Health.VocabularyItem"/> in alphabetically sorted order on code values.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.VocabularyKey.Description">
            <summary>
            Gets or sets a text description of the <see cref="T:Microsoft.Health.Vocabulary"/>.
            </summary>
            
            <value>
            A string representing the description.
            </value> 
            
            <remarks>
            The description is not an integral part of the vocabulary itself, 
            but simply provides additional information about the vocabulary as 
            a whole.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.VocabularySearchType">
            <summary>
            Defines the types of search operations that can be performed on
            HealthVault vocabularies.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.VocabularySearchType.Prefix">
            <summary>
            Does a prefix search where matching strings are ones that <b>begin</b>
            with the search string.         
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.VocabularySearchType.Contains">
            <summary>
            Does a contains search where matching strings are ones that <b>contain</b>
            the search string.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.Web.WebApplicationConnection">
            <summary>
            Represents an authenticated interface to HealthVault. 
            </summary>
            
            <remarks>
            Most operations performed against the service require authentication. 
            A connection must be made to HealthVault to access the
            web methods that the service exposes. The class does not maintain
            an open connection to the service. It uses XML over HTTP to 
            make requests and receive responses from the service. The connection
            just maintains the data necessary to make the request.
            <br/><br/>
            An authenticated connection takes the user name and password, and
            authenticates against HealthVault and then stores an 
            authentication token which is then passed to the service on each 
            subsequent request. An authenticated connection is required for 
            accessing a person's health record. 
            <br/><br/>
            For operations that do not require authentication, the 
            <see cref="T:Microsoft.Health.AnonymousConnection"/> or <see cref="T:Microsoft.Health.ApplicationConnection"/>
            class can be used.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.Web.WebApplicationConnection.#ctor(Microsoft.Health.Authentication.Credential)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.WebApplicationConnection"/> class with 
            default values from the application or web configuration file.
            </summary>
            
            <param name="credential">
            The credential of the user to authenticate for access to
            HealthVault.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="credential"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.WebApplicationConnection.#ctor(System.Guid,System.Uri,Microsoft.Health.Authentication.Credential)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.WebApplicationConnection"/> class 
            with the specified app-ID, URL, and credential.
            </summary>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service.
            </param>
            
            <param name="credential">
            The credential of the user to authenticate for access to 
            HealthVault.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter or
            <paramref name="credential"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.WebApplicationConnection.#ctor(System.Guid,System.String,Microsoft.Health.Authentication.Credential)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.Web.WebApplicationConnection"/> class 
            with the specified app-ID, string-formatted URL, and credential.
            </summary>
            
            <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
            
            <param name="healthServiceUrl">
            The URL of the HealthVault service.
            </param>
            
            <param name="credential">
            The credential of the user to authenticate for access to 
            HealthVault.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl"/> parameter or
            <paramref name="credential"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.WebApplicationConnection.SendInsecureMessage(System.Collections.Generic.IList{Microsoft.Health.MailRecipient},System.String,System.String,System.String)">
            <summary>
            Sends an insecure message to the specified message recipients.
            </summary>
            
            <param name="mailRecipient">
            The addresses and display names of the people to send the 
            message to.
            </param>
            
            <param name="subject">
            The subject of the message.
            </param>
            
            <param name="textBody">
            The text body of the message.
            </param>
            
            <param name="htmlBody">
            The HTML body of the message.
            </param>
            
            <remarks>
            If both the <paramref name="textBody"/> and 
            <paramref name="htmlBody"/> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="MailRecipient"/> property is <b>null</b> or empty, 
            or the <paramref name="subject"/> parameter is <b>null</b> or empty, or 
            the <paramref name="textBody"/> and <paramref name="htmlBody"/> 
            parameters are both <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The server returned a failure when making the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.WebApplicationConnection.SendInsecureMessage(System.Collections.Generic.IList{System.Guid},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Sends an insecure message to the specified message recipients.
            </summary>
            
            <param name="personIds">
            The unique identifiers of the people to which the message should be
            sent.
            </param>
            
            <param name="addressMustBeValidated">
            <b>true</b> if HealthVault ensures that the person has validated 
            their message address before sending the mail; <b>false</b> if the 
            message will be sent even if the person's address has not been 
            validated.
            </param>
            
            <param name="subject">
            The subject of the message.
            </param>
            
            <param name="textBody">
            The text body of the message.
            </param>
            
            <param name="htmlBody">
            The HTML body of the message.
            </param>
            
            <remarks>
            If both the <paramref name="textBody"/> and 
            <paramref name="htmlBody"/> of the message is specified then a
            multi-part message will be sent so that the html body will be used
            and fallback to text if not supported by the client.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="personIds"/> or <paramref name="subject"/>, 
            <paramref name="textBody"/>  or <paramref name="htmlBody"/> parameters 
            are <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The server returned a failure when making the request.        
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.Web.WebApplicationConnection.SendInsecureMessageToCustodians(System.Guid,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Sends an insecure message to custodians of the specified health 
            record.
            </summary>
            
            <param name="recordId">
            The unique identifier of the health record for which the 
            custodians should be sent the message.
            </param>
            
            <param name="addressMustBeValidated">
            <b>true</b> if HealthVault ensures that the person has validated 
            their message address before sending the mail; <b>false</b> if the 
            message will be sent even if the person's address has not been 
            validated.
            </param>
            
            <param name="subject">
            The subject of the message.
            </param>
            
            <param name="textBody">
            The text body of the message.
            </param>
            
            <param name="htmlBody">
            The HTML body of the message.
            </param>
            
            <remarks>
            If both the <paramref name="textBody"/> and 
            <paramref name="htmlBody"/> of the message is specified, then a
            multi-part message is sent so that the HTML body will be used
            and falls back to text if not supported by the client.
            </remarks>
            
            <exception cref="T:System.ArgumentException"> 
            The <paramref name="recordId"/> parameter is <see cref="F:System.Guid.Empty"/>
            -or-
            The <paramref name="subject"/> parameter is <b>null</b> or empty,
            -or-
            The <paramref name="textBody"/> and <paramref name="htmlBody"/> parameters 
            are both <b>null</b> or empty.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthServiceException">
            The server returned a failure when making the request.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.XPathHelper.ParseAttributeAsBoolean(System.Xml.XPath.XPathNavigator,System.String,System.Boolean)">
            <summary>
            Parse an attribute on the navigator as boolean.
            </summary>
            <remarks>
            The parsed attributed is returned if present, otherwise the
            <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="navigator">The navigator to use.</param>
            <param name="attributeName">The attribute to get.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Microsoft.Health.XPathHelper.ParseAttributeAsLong(System.Xml.XPath.XPathNavigator,System.String,System.Nullable{System.Int64})">
            <summary>
            Parse an attribute on the navigator as a long integer.
            </summary>
            <remarks>
            The parsed attribute value is returned as a nullable long integer if present, 
            otherwise the <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="navigator">The navigator.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Microsoft.Health.XPathHelper.ParseAttributeAsDateTime(System.Xml.XPath.XPathNavigator,System.String,System.DateTime)">
            <summary>
            Parse an attribute on the navigator as a DateTime.
            </summary>
            <remarks>
            The nullable value argument is returned as a DateTime if present, otherwise the
            <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="navigator">The navigator.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Microsoft.Health.XPathHelper.ParseAttributeAsEnum``1(System.Xml.XPath.XPathNavigator,System.String,``0)">
            <summary>
            Parse an attribute on the navigator as an enum.
            </summary>
            <remarks>
            The attribute is returned as the enum type T if present, otherwise is the 
            <paramref name="defaultValue"/> is returned.
            </remarks>
            <param name="navigator">The navigator.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="defaultValue">The default value</param>
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Address">
            <summary>
            Represents a physical mailing address.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Address.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Address"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Address"/> class with 
            values for the mandatory properties.
            </summary>
            
            <param name="city">
            The name of the city.
            </param>
            
            <param name="country">
            The name of the country.
            </param>
            
            <param name="postalCode">
            The postal code.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="city"/>, <paramref name="country"/> or
            <paramref name="postalCode"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Address.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Address"/> class with 
            values for the mandatory properties.
            </summary>
            
            <param name="street">
            The street address.
            </param>
            
            <param name="city">
            The name of the city.
            </param>
            
            <param name="country">
            The name of the country.
            </param>
            
            <param name="postalCode">
            The postal code.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="street"/>, <paramref name="city"/>, <paramref name="country"/> or
            <paramref name="postalCode"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Address.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the address information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Address.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the address into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the address.
            </param>
            
            <param name="writer">
            The XML writer into which the address should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Address.Street"/> property is empty or <see cref="P:Microsoft.Health.ItemTypes.Address.City"/>, 
            <see cref="P:Microsoft.Health.ItemTypes.Address.Country"/>, or <see cref="P:Microsoft.Health.ItemTypes.Address.PostalCode"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Address.ToString">
            <summary>
            Gets a string representation of the address.
            </summary>
            
            <returns>
            A string representation of the address with commas separating the "lines"
            of the address.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Address.Description">
            <summary>
            Gets or sets the description for the address.
            </summary>
            
            <value>
            A string representing the description.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the description should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Address.IsPrimary">
            <summary>
            Gets or sets a value indicating whether the address is the primary 
            address for the person.
            </summary>
            
            <value>
            <b>true</b> if the address is the primary one; otherwise, <b>false</b>.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if <see cref="P:Microsoft.Health.ItemTypes.Address.IsPrimary"/> should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Address.Street">
            <summary>
            Gets the street number, name, apartment, and so on.
            </summary>
            
            <value>
            A string collection of address information.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Address.City">
            <summary>
            Gets or sets the city.
            </summary>
            
            <value>
            A string representing the city name.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only
            whitespace during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Address.State">
            <summary>
            Gets or sets the state.
            </summary>
            
            <value>
            A string representing the state name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the state should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Address.Country">
            <summary>
            Gets or sets the country.
            </summary>
            
            <value>
            A string representing the country name.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only 
            whitespace during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Address.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            
            <value>
            A string representing the postal code.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only
            whitespace during set.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.AerobicData">
            <summary>
            Represents data about an aerobic session.
            </summary>
            
            <remarks>
            Aerobic data can represent the data for an entire session, the data
            for a single lap, or the desired aerobic session for an aerobic goal.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicData.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AerobicData"/> class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicData.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the length from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the length.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicData.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the aerobic data to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the aerobic data.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the aerobic data to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicData.ToString">
            <summary>
            Gets a summary of the aerobic data.
            </summary>
            
            <returns>
            A string summary of the aerobic data.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.Mode">
            <summary>
            Gets or sets the mode by which the aerobic session occurred.
            </summary>
            
            <remarks>
            The mode of the aerobic session include actions such as bike, run, or
            swim and are defined by the HealthVault dictionary.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.Distance">
            <summary>
            Gets or sets the length traversed by this aerobic session.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.Length"/> value representing the distance.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if there is no distance.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.Duration">
            <summary>
            Gets or sets the duration of the session in minutes.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no duration.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is negative or zero when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.DurationAsTimeSpan">
            <summary>
            Gets the duration of the aerobic session as a 
            <see cref="T:System.TimeSpan"/>.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.Intensity">
            <summary>
            Gets or sets the relative intensity of the session.
            </summary>
            
            <remarks>
            Set the value to <see cref="F:Microsoft.Health.ItemTypes.RelativeRating.None"/> if there is 
            no intensity.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakHeartRate">
            <summary>
            Gets or sets the peak heart rate for the session.
            </summary>
            
            <remarks>
            If there is no heart rate data for the session, the value should
            be set to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AverageHeartRate">
            <summary>
            Gets or sets the average heart rate for the session.
            </summary>
            
            <remarks>
            If there is no heart rate data for the session, the value should
            be set to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinHeartRate">
            <summary>
            Gets or sets the minimum heart rate for the session.
            </summary>
            
            <remarks>
            If there is no heart rate data for the session, the value should
            be set to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to 
            zero when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.Energy">
            <summary>
            Gets or sets the food energy consumed during the session.
            </summary>
            
            <remarks>
            The energy consumed is measured in kilojoules.
            Set the value to <b>null</b> if there is no energy reading.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is negative or zero when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.EnergyFromFat">
            <summary>
            Gets or sets the energy from fat consumed during the session.
            </summary>
            
            <remarks>
            The energy consumed is measured in kilojoules.
            Set the value to <b>null</b> if there is no energy from fat reading.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is negative or zero when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakSpeed">
            <summary>
            Gets or sets the peak speed, in meters per second, during the 
            session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no speed reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AverageSpeed">
            <summary>
            Gets or sets the average speed, in meters per second, during the 
            session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no speed reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinSpeed">
            <summary>
            Gets or sets the minimum speed, in meters per second, during the 
            session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no speed reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakPace">
            <summary>
            Gets or sets the peak pace, in seconds per 100 meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no pace reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AveragePace">
            <summary>
            Gets or sets the average pace, in seconds per 100 meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no pace reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinPace">
            <summary>
            Gets or sets the minimum pace, in seconds per 100 meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no pace reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakPower">
            <summary>
            Gets or sets the peak power, in watts, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no power reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AveragePower">
            <summary>
            Gets or sets the average power, in watts, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no power reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinPower">
            <summary>
            Gets or sets the minimum power, in watts, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no power reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakTorque">
            <summary>
            Gets or sets the peak torque, in newton meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no torque reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AverageTorque">
            <summary>
            Gets or sets the average torque, in newton meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no torque reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinTorque">
            <summary>
            Gets or sets the minimum torque, in newton meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no torque reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.LeftRightBalance">
            <summary>
            Gets or sets the balance between left and right strokes.
            </summary>
            
            <remarks>
            The value is a percentage where the indicated value is the 
            percentage of the left stroke. The remaining percentage is
            the right stroke.
            Set the value to <b>null</b> if there is no balance reading.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is negative or greater than one when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakCadence">
            <summary>
            Gets or sets the peak cadence, in revolutions per minute (rpm), 
            during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no cadence reading.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is negative or zero when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AverageCadence">
            <summary>
            Gets or sets the average cadence, in revolutions per minute (rpm), 
            during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no cadence reading.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is negative or zero when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinCadence">
            <summary>
            Gets or sets the minimum cadence, in revolutions per minute (rpm), 
            during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no cadence reading.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is negative or zero when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakTemperature">
            <summary>
            Gets or sets the peak temperature, in degrees Celsius (C), during 
            the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no temperature reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AverageTemperature">
            <summary>
            Gets or sets the average temperature, in degrees Celsius (C), 
            during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no temperature reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinTemperature">
            <summary>
            Gets or sets the minimum temperature, in degrees Celsius (C), 
            during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no temperature reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.PeakAltitude">
            <summary>
            Gets or sets the peak altitude, in meters above sea level, during 
            the session.
            </summary>
            
            <remarks>
            Negative values indicate the meters below sea level.
            Set the value to <b>null</b> if there is no altitude reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AverageAltitude">
            <summary>
            Gets or sets the average altitude, in meters above sea level, 
            during the session.
            </summary>
            
            <remarks>
            Negative values indicate the meters below sea level.
            Set the value to <b>null</b> if there is no altitude reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.MinAltitude">
            <summary>
            Gets or sets the minimum altitude, in meters above sea level, 
            during the session.
            </summary>
            
            <remarks>
            Negative values indicate the meters below sea level.
            Set the value to <b>null</b> if there is no altitude reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.ElevationGain">
            <summary>
            Gets or sets the elevation gained, in meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no elevation gain reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.ElevationLoss">
            <summary>
            Gets or sets the elevation lossed, in meters, during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no elevation loss reading.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.NumberOfSteps">
            <summary>
            Gets or sets the number of steps taken during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no step readings.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.NumberOfAerobicSteps">
            <summary>
            Gets or sets the number of aerobic steps taken during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there is no aerobic step readings.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicData.AerobicStepMinutes">
            <summary>
            Gets or sets the number of aerobic minutes during the session.
            </summary>
            
            <remarks>
            Set the value to <b>null</b> if there are no readings indicating the number of 
            aerobic minutes.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.AerobicProfile">
            <summary>
            Represents a health record item type that encapsulates a person's 
            aerobic profile at a single point in time.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicProfile.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AerobicProfile"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicProfile.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AerobicProfile"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date/time when the aerobic profile was take.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.AerobicProfile.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicProfile.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.AerobicProfile"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the aerobic profile data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an aerobic-session node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicProfile.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the aerobic profile data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the aerobic profile data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicProfile.ToString">
            <summary>
            Gets a string representation of the aerobic profile item.
            </summary>
            
            <returns>
            A string representation fo the aerobic profile item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicProfile.When">
            <summary>
            Gets or sets the date when the aerobic profile was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicProfile.MaximumHeartRate">
            <summary>
            Gets or sets the person's maximum heart rate.
            </summary>
            
            <value>
            An integer representing the rate.
            </value>
            
            <remarks>
            If the maximum heart rate is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicProfile.RestingHeartRate">
            <summary>
            Gets or sets the person's resting heart rate.
            </summary>
            
            <value>
            An integer representing the rate.
            </value>
            
            <remarks>
            If the resting heart rate is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicProfile.AnaerobicThreshold">
            <summary>
            Gets or sets the person's anaerobic threshold in beats per minute
            (BPM).
            </summary>
            
            <value>
            An integer representing the threshold.
            </value>
            
            <remarks>
            If the anaerobic threshold is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicProfile.RelativeVO2Max">
            <summary>
            Gets or sets the relative VO2 max for the person in mL/kg/min.
            </summary>
            
            <value>
            A number representing the relative VO2 max.
            </value>
            
            <remarks>
            If the relative VO2 max is not known, the value can be set to <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicProfile.AbsoluteVO2Max">
            <summary>
            Gets or sets the absolute V02 max for the person in mL/min.
            </summary>
            
            <value>
            A number representing the absolute VO2 max.
            </value>
            
            <remarks>
            If the absolute V02 max is not known, the value can be set to <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicProfile.TargetHeartRateZoneGroups">
            <summary>
            Gets the target heart rate zone groups.
            </summary>
            
            <value>
            A collection of zone groups.
            </value>
            
            <remarks>
            Target heart rate zones are grouped to allow different sets of
            target zones based on activity, exercise theories, and so on.
            To add a group of heart rate zones, call the Add method on the
            returned collection.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.AerobicWeeklyGoal">
            <summary>
            Represents a health record item type that encapsulates a goal to have 
            a certain number of aerobic sessions per week.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AerobicWeeklyGoal"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.#ctor(Microsoft.Health.ItemTypes.AerobicData,System.Int32)">
             <summary>
             Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AerobicWeeklyGoal"/> class 
             with the specified session data.
             </summary>
             
             <param name="session">
             An aerobic session that defines the goal.
             </param>
             
             <param name="recurrence">
             The number of occurrences of the session required in a week to
             meet the goal.
             </param>
             
             <exception cref="T:System.ArgumentNullException">
             The <paramref name="session"/> parameter is <b>null</b>.
             </exception>
             
             <exception cref="T:System.ArgumentOutOfRangeException">
             The <paramref name="recurrence"/> parameter is negative or zero.
             </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.AerobicWeeklyGoal"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the aerobic goal data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an aerobic-session node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the aerobic weekly goal data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the aerobic weekly goal data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.AerobicSession"/> property is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.ToString">
            <summary>
            Gets a string representation of the aerobic weekly goal item.
            </summary>
            
            <returns>
            A string representation of the aerobic weekly goal item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.AerobicSession">
            <summary>
            Gets or sets the definition of the aerobic session needed to 
            meet the goal.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.AerobicData"/> value representing the session definition.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AerobicWeeklyGoal.Recurrence">
            <summary>
            Gets or sets the number of sessions per week required to meet
            the goal.
            </summary>
            
            <value>
            An integer representing the number of sessions.
            </value>
            
            <remarks>
            This number must be greater than zero. The property defaults
            to three.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Alert">
            <summary>
            Represents a weekly alert schedule.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Alert.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Alert"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Alert.#ctor(System.Collections.Generic.IEnumerable{System.DayOfWeek},System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.ApproximateTime})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Alert"/> class with the 
            specified days and times.
            </summary>
            
            <param name="daysOfWeek">
            The days of the week the alert should be triggered.
            </param>
            
            <param name="times">
            The times in those days that the alert should be triggered.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="daysOfWeek"/>  or <paramref name="times"/> 
            parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Alert.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the address information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Alert.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the alert into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the alert.
            </param>
            
            <param name="writer">
            The XML writer into which the alert should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Alert.DaysOfWeek"/> property has no days set, or the 
            <see cref="P:Microsoft.Health.ItemTypes.Alert.Times"/> property contains no times.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Alert.ToString">
            <summary>
            Gets a string representation of the alert.
            </summary>
            
            <returns>
            A string representation of the alert.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Alert.DaysOfWeek">
            <summary>
            Gets a collection of the days of the week which the alert applies
            to.
            </summary>
            
            <value>
            A collection of days of the week.
            </value>
            
            <remarks>
            To add days to be alerted, add <see cref="T:System.DayOfWeek"/>
            values to the returned collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Alert.Times">
            <summary>
            Gets a collection of the times in each of the specified days to
            be alerted.
            </summary>
            
            <value>
            A collection of times.
            </value>
            
            <remarks>
            To add times to be alerted, add <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> 
            instances to the returned collection.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.AllergicEpisode">
            <summary>
            Represents a health record item type that encapsulates a single 
            allergic episode.
            </summary>
            
            <remarks>
            An allergic episode is an occurrence of an allergy which is defined by 
            the <see cref="T:Microsoft.Health.ItemTypes.Allergy"/> type.
            symptoms. 
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AllergicEpisode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AllergicEpisode"/> class 
            with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AllergicEpisode.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AllergicEpisode"/> class 
            with the specified date and name.
            </summary>
            
            <param name="when">
            The date/time when the allergic episode occurred.
            </param>
            
            <param name="name">
            The name of the allergy.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> or <paramref name="name"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.AllergicEpisode.TypeId">
            <summary>
            The unique identifier for the item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AllergicEpisode.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.AllergicEpisode"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the allergic episode data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an allergic-episode node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AllergicEpisode.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the allergic episode data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the allergic episode data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.AllergicEpisode.Name"/> has an <b>null</b> Text property.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AllergicEpisode.ToString">
            <summary>
            Gets a string representation of the allergic episode item.
            </summary>
            
            <returns>
            A string representation of the allergic episode item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AllergicEpisode.Name">
            <summary>
            Gets or sets the name of the allergy for which this episode is
            occurring.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the name.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AllergicEpisode.When">
            <summary>
            Gets or sets the date/time when the allergic episode occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AllergicEpisode.Reaction">
            <summary>
            Gets or sets the reaction the person has.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the reaction.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AllergicEpisode.Treatment">
            <summary>
            Gets or sets a possible treatment method for this allergy.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the 
            treatment method.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Allergy">
            <summary>
            Represents a health record item type that encapsulates an allergy.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Allergy.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Allergy"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Allergy.#ctor(Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Allergy"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="name">
            The name of the allergy.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Allergy.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Allergy.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Allergy"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the allergy data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an allergy node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Allergy.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the allergy data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the allergy data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.Allergy.Name"/> has an <b>null</b> Text property.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Allergy.ToString">
            <summary>
            Gets a string representation of the allergy item.
            </summary>
            
            <returns>
            A string representation of the allergy item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.Name">
            <summary>
            Gets or sets the name of the allergy.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the name.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.Reaction">
            <summary>
            Gets or sets the reaction the person has.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the reaction.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.FirstObserved">
            <summary>
            Gets or sets the approximate date of the first occurrence of the
            allergy.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> representing the date.
            </value>
            
            <remarks>
            An approximate date must have a year and may also have the month
            and/or day.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.AllergenType">
            <summary>
            Gets or sets the type of allergen that causes an allergic 
            reaction.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing  the allergen category.
            </value>
            
            <remarks>
            Examples include medication such as penicillin and sulfonamides, 
            food such as peanuts, shellfish, and wheat, reactions to animals such 
            as bee stings, dogs, or cats, plants such as ragweed or birch, and 
            environmental things such as smoke, smog, or dust.
            <br/><br/>
            Codes for this value are in the "allergen-type" 
            vocabulary.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.AllergenCode">
            <summary>
            Gets or sets the code for the allergen that causes an allergic 
            reaction.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the allergen category.
            </value>
            
            <remarks>
            Examples include medication such as penicillin and sulfonamides, 
            food such as peanuts, shellfish, and wheat, reactions to animals such 
            as bee stings, dogs, or cats, plants such as ragweed or birch, and 
            environmental things such as smoke, smog, or dust.
            <br/><br/>
            Codes for this value are in the "allergen-type" 
            vocabulary.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.TreatmentProvider">
            <summary>
            Gets or sets information about the treatment provider for this allergy.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the provider.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.Treatment">
            <summary>
            Gets or sets a possible treatment method for this allergy.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the treatment method.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Allergy.IsNegated">
            <summary>
            Gets or sets a value indicating whether the allergic reaction is 
            negated with treatment.
            </summary>
            
            <remarks>
            <b>true</b> if the allergic reation is negated with treatment; 
            otherwise, <b>false</b>.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.AltitudeMeasurement">
            <summary>
            Represents a altitude measurement and display.
            </summary>
            
            <remarks>
            In HealthVault, altitude measurements have values and display values. 
            All values are stored in a base unit of meters. 
            An application can take an altitude value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the altitude value must be 
            converted to meters to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Measurement`1">
            <summary>
            Represents a length value and display. This class is abstract.
            </summary>
            
            <remarks>
            HealthVault measurements are composed of the value and 
            a display value. All values are stored in a base unit for that type
            of measurement. An application can take a
            value using any scale the application chooses and can store the user- 
            entered value as the display value, but the measurement value must be 
            converted to the appropriate base unit to be stored in HealthVault.
            This abstract base class defines an interface from which all measurements 
            derive. The <see cref="P:Microsoft.Health.ItemTypes.Measurement`1.Value"/> property's type varies according 
            to the derived class definition and affects the base unit for that
            type. See the documentation for the derived class for more information
            on the base unit type for that measurement.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.#ctor">
            <summary>
            Creates a new instance of the Measurement class 
            with no value.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.#ctor(`0)">
            <summary>
            Creates a new instance of the Measurement class with 
            the specified value.
            </summary>
            
            <param name="value">
            An instance of MeasurementType representing the value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.#ctor(`0,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the Measurement class with 
            the specified value and optional display value.
            </summary>
            
            <param name="value">
            An instance of MeasurementType representing the value.
            </param>
            
            <param name="displayValue">
            The display value of the measurement. This should contain the
            exact measurement as entered by the user even if it uses a 
            unit of measure other than the base unit of measure for the 
            type. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the measurement from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the measurement.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Parses the measurement specific value from the XML.
            </summary>
            
            <param name="navigator">
            The XML node representing the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the measurement to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the measurement.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the measurement to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the measurement value to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the measurement value to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.AssertMeasurementValue(`0)">
            <summary>
            Verifies the value is in the appropriate base unit of measure and
            is a legal value for the type.
            </summary>
            
            <param name="value">
            The value to be verified.
            </param>
            
            <remarks>
            Derived class must override this method and ensure that value uses
            the correct base unit of measurement and is a legal value for the
            type. If not, an appropriate exception should be thrown.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.ToString">
            <summary>
            Retrieves a string representation of the measurement using the 
            <see cref="P:Microsoft.Health.ItemTypes.Measurement`1.DisplayValue"/> property.
            </summary>
            
            <returns>
            The measurement as a string including units if available.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Measurement`1.GetValueString(`0)">
            <summary>
            Retrieves the string representation of the value.
            </summary>
            
            <param name="value">
            The measurement value to get the string representation of.
            </param>
            
            <returns>
            A string representing the measurement value.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Measurement`1.Value">
            <summary>
            Gets or sets the value of the measurement.
            </summary>
            
            <returns>
            An instance of MeasurementType representing the value.
            </returns>
            
            <remarks>
            The value of the measurement must be within the tolerances for the
            specific type of measurement and must be in the base unit of 
            measure. See the derived classes documentation for the
            <see cref="M:Microsoft.Health.ItemTypes.Measurement`1.AssertMeasurementValue(`0)"/> method to determine which 
            exceptions can be thrown.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Measurement`1.DisplayValue">
            <summary>
            Gets or sets the display value of the HealthVault dictionary item.
            </summary>
            
            <returns>
            An instance of <see cref="P:Microsoft.Health.ItemTypes.Measurement`1.DisplayValue"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AltitudeMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AltitudeMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AltitudeMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AltitudeMeasurement"/> 
            class with the specified value in meters.
            </summary>
            
            <param name="meters">
            The altitude in meters.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AltitudeMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AltitudeMeasurement"/> 
            class with the specified value in meters and optional display value.
            </summary>
            
            <param name="meters">
            The altitude in meters.
            </param>
            
            <param name="displayValue">
            The display value of the altitude. This should contain the
            exact altitude as entered by the user even if it uses some
            other unit of measure besides meters. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AltitudeMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal altitude value.
            </summary>
            
            <param name="value">
            The altitude measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AltitudeMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the altitude from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the altitude.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AltitudeMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the altitude to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the altitude to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AltitudeMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the altitude in the base units.
            </summary>
            
            <returns>
            The altitude as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Annotation">
            <summary>
            Represents a health record item type that encapsulates a medical annotation.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Annotation.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Annotation"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Annotation.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Annotation"/> class with 
            the specified date and time.
            </summary>
            
            <param name="when">
            The date/time when the annotation was taken.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Annotation.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Annotation.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Annotation"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the annotation data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an annotation node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Annotation.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the annotation data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the annotation data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            A mandatory property is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Annotation.ToString">
            <summary>
            Gets a string representation of the annotation item.
            </summary>
            
            <returns>
            A string representation of the annotation item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Annotation.When">
            <summary>
            Gets or sets the date/time when the annotation was created.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/>. The default value is 
            the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Annotation.Content">
            <summary>
            Gets or sets the content for the annotation.
            </summary>
            
            <value>
            A string representing the content.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the content should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Annotation.Author">
            <summary>
            Gets or sets the author contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the author contact information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the author contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Annotation.Classification">
            <summary>
            Gets or sets the classification for the annotation.
            </summary>
            
            <value>
            A string representing the classification.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the classification should not be fstored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Annotation.Index">
            <summary>
            Gets or sets the index for the annotation.
            </summary>
            
            <value>
            A string representing the index.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the index should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Annotation.Version">
            <summary>
            Gets or sets the version for the annotation.
            </summary>
            
            <value>
            A string representing the version.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the version should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.ApplicationSpecific">
            <summary>
            Represents a health record item type that encapsulates application 
            specific data.
            </summary>
            
            <remarks>
            Application specific data can only ever be read or updared by the application
            that created.
            
            This type is not all that interesting by itself but used as a base class
            it helps developers implement their own application specific type class
            to handle instances by registering the class using the
            <see cref="M:Microsoft.Health.ItemTypeManager.RegisterApplicationSpecificHandler(System.Guid,System.String,System.Type)"/>
            method.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApplicationSpecific"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApplicationSpecific"/> class with the 
            specified application ID, subtype tag, and description.
            </summary>
            
            <param name="applicationId">
            The unique application identifier.
            </param>
            
            <param name="subtypeTag">
            A string identifying a unique schema for the application specific
            type. The string format is completely arbitrary and is used by
            the application to identify the health record item application specific
            data as a specific subtype.
            </param>
            
            <param name="description">
            A descriptive display text for this item.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId"/> is <see cref="F:System.Guid.Empty"/>,
            or if <paramref name="subtypeTag"/> or <paramref name="description"/> is
            <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApplicationSpecific"/> class with the 
            specified application ID, subtype tag, and description.
            </summary>
            
            <param name="applicationId">
            The unique application identifier.
            </param>
            
            <param name="subtypeTag">
            A string identifying a unique schema for the application specific
            type. The string format is completely arbitrary and is used by
            the application to identify the health record item application specific
            data as a specific subtype.
            </param>
            
            <param name="description">
            A descriptive display text for this item.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="applicationId"/>, <paramref name="subtypeTag"/>, or 
            <paramref name="description"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.ApplicationSpecific.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.ApplicationSpecific"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the application specific data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an app-specific node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.ParseApplicationSpecificXml(System.Collections.Generic.IList{System.Xml.XPath.IXPathNavigable})">
            <summary>
            Parses the parts of the application specific item type that is specific
            to each application.
            </summary>
            
            <param name="applicationSpecific">
            An <see cref="T:System.Xml.XPath.XPathNavigator"/> focused on the "app-specific" 
            element in the item XML.
            </param>
            
            <remarks>
            The base elements that all application specific items contain are parsed by
            the base class. The derived class overrides this method to parse all 
            application specific portions of the XML. The base class implementation
            places the application specific elements in the <see cref="P:Microsoft.Health.ItemTypes.ApplicationSpecific.ApplicationSpecificXml"/> 
            property and then passes that collection to this method so that derived classes
            can further process those elements.  The base class implementation does nothing
            to process these elements.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the application specific data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the application specific data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.ApplicationSpecific.ApplicationId"/>,
            <see cref="P:Microsoft.Health.ItemTypes.ApplicationSpecific.SubtypeTag"/>, or <see cref="P:Microsoft.Health.ItemTypes.ApplicationSpecific.Description"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.WriteApplicationSpecificXml(System.Xml.XmlWriter)">
            <summary>
            Writes the application specific XML to the specified writer.
            </summary>
            
            <param name="writer">
            The XML writer to write the application specific XML to.
            </param>
            
            <remarks>
            The XML for the base elements that all application specific items contain is written by  
            the base class. The derived class overrides this method to write all 
            application specific portions of the XML. The base class implementation
            writes the XML in the <see cref="P:Microsoft.Health.ItemTypes.ApplicationSpecific.ApplicationSpecificXml"/> property.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApplicationSpecific.ToString">
            <summary>
            Gets a string representation of the application specific item.
            </summary>
            
            <returns>
            A string representation of the application specific item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApplicationSpecific.ApplicationId">
            <summary>
            Gets or sets the unique application identifier for which this application
            specific information pertains.
            </summary>
            
            <value>
            The application identifier should be in the form of a <see cref="T:System.Guid"/>.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApplicationSpecific.SubtypeTag">
            <summary>
            Gets or sets a tag that uniquely identifies the schema for the application specific
            data.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is <b>null</b>, empty, or contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApplicationSpecific.When">
            <summary>
            Gets or sets the date/time when the application specific item was created.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApplicationSpecific.Description">
            <summary>
            Gets or sets the description of the item for display purposes.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is <b>null</b>, empty, or contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApplicationSpecific.ApplicationSpecificXml">
            <summary>
            Gets a collection of the application specific XML.
            </summary>
            
            <remarks>
            To change the application specific XML for the item, add or remove
            items in the collection.
            Derived classes can ignore this member.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Appointment">
            <summary>
            Represents a health record item type that encapsulates a medical appointment.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Appointment.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Appointment"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item isn't added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Appointment.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Appointment"/> class with 
            the specified date and time.
            </summary>
            
            <param name="when">
            The date and time for the appointment.
            </param>
             
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Appointment.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Appointment.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this appointment instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the appointment data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an appointment node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Appointment.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the appointment data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the appointment data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Appointment.ToString">
            <summary>
            Gets a string representation of the appointment item.
            </summary>
            
            <returns>
            A string representation of the appointment item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Appointment.When">
            <summary>
            Gets or sets the date when the appointment occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Appointment.Duration">
            <summary>
            Gets or sets the duration of the appointment.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.DurationValue"/> instance representing  the duration.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the duration should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Appointment.Service">
            <summary>
            Gets or sets the service for the appointment.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the service.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the service should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Appointment.Clinic">
            <summary>
            Gets or sets the clinic information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> instance representing the clinic information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the clinic information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Appointment.Specialty">
            <summary>
            Gets or sets the specialty for the appointment.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the specialty.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the specialty should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Appointment.Status">
            <summary>
            Gets or sets the status for the appointment.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the status.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the status should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Appointment.CareClass">
            <summary>
            Gets or sets the care class for the appointment.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the care class.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the care class should not be 
            stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.ApproximateDate">
            <summary> 
            Represents an approximation of a date.
            </summary>
            
            <remarks>
            An approximation of a date must have a year. The month, day, or both 
            are optional.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> class 
            using default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> class 
            with the specified year.
            </summary>
            
            <param name="year">
            A year between 1000 and 9999.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="year"/> parameter is less than 1000 or greater 
            than 9999.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> class 
            with the specified year and month.
            </summary>
            
            <param name="year">
            A year between 1000 and 9999.
            </param>
            
            <param name="month">
            A month between 1 and 12.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="year"/> parameter is less than 1000 or greater 
            than 9999, or the <paramref name="month"/> parameter is less than 
            1 or greater than 12.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> class 
            with the specified year, month, and day.
            </summary>
            
            <param name="year">
            A year between 1000 and 9999.
            </param>
            
            <param name="month">
            A month between 1 and 12.
            </param>
            
            <param name="day">
            A day between 1 and 31.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="year"/> parameter is less than 1000 or greater than
            9999, or the <paramref name="month"/> parameter is less than 1 or 
            greater than 12, or the <paramref name="day"/> parameter is less 
            than 1 or greater than 31.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the approximate date from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the approximate date.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the approximate date to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the approximate date.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the approximate date to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.CompareTo(System.Object)">
            <summary>
            Compares the specified object to this ApproximateDate object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="obj"/>. If the result is zero, 
            the instance is equal to <paramref name="obj"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="obj"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/>
            or <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.CompareTo(Microsoft.Health.ItemTypes.ApproximateDate)">
            <summary>
            Compares the specified object to this <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero, 
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.CompareTo(System.DateTime)">
            <summary>
            Compares the specified object to this <see cref="T:System.DateTime"/> object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero, 
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to this object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the <paramref name="obj"/> is an 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> object and the year, month, and
            day exactly match the year, month, and day of this object; otherwise,
            <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> or
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.GetHashCode">
            <summary>
            See the base class documentation.
            </summary>
            
            <returns>
            See the base class documentation.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.op_Equality(Microsoft.Health.ItemTypes.ApproximateDate,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to the 
            specified date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/>; otherwise,
            <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> or 
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.op_Inequality(Microsoft.Health.ItemTypes.ApproximateDate,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is not equal to the specified
            date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>false</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>true</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> or
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.op_GreaterThan(Microsoft.Health.ItemTypes.ApproximateDate,System.Object)">
            <summary>
            Gets a value indicating whether the specified date is greater than 
            the specified object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is greater than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> or
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.op_LessThan(Microsoft.Health.ItemTypes.ApproximateDate,System.Object)">
            <summary>
            Gets a value indicating whether the specified date is less than the s
            pecified
            object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is less than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> or 
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDate.ToString">
            <summary>
            Gets a string representation of the approximate date.
            </summary>
            
            <returns>
            A string representation of the approximate date.
            </returns>
            
            <remarks>
            Note, this is not culture sensitive.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateDate.Year">
            <summary>
            Gets or sets the year of the date approximation.
            </summary>
            
            <returns>
            An integer representing the year.
            </returns>
            
            <remarks>
            This value defaults to the current year.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 1000 or greater than 9999.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateDate.Month">
            <summary>
            Gets or sets the month of the date approximation.
            </summary>
            
            <returns>
            An integer representing the month.
            </returns>
            
            <remarks>
            If the month is unknown, it can be set to <b>null</b>. This value 
            defaults to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 1 or greater than 12.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateDate.Day">
            <summary>
            Gets or sets the day of the date approximation.
            </summary>
            
            <returns>
            An integer representing the day.
            </returns>
            
            <remarks>
            If the day is unknown, it can be set to <b>null</b>. This value 
            defaults to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 1 or greater than 31.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.ApproximateDateTime">
            <summary> 
            An approximation of a date and time.
            </summary>
            
            <remarks>
            To use this class, you must specify either an approximate date or a 
            descriptive date such as "as a baby."
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.#ctor(Microsoft.Health.ItemTypes.ApproximateDate)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            class with the specified date.
            </summary>
            
            <param name="approximateDate">
            The approximation of the date.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="approximateDate"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.#ctor(Microsoft.Health.ItemTypes.ApproximateDate,Microsoft.Health.ItemTypes.ApproximateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            class with the specified date and time.
            </summary>
            
            <param name="approximateDate">
            The approximation of the date.
            </param>
            
            <param name="approximateTime">
            The approximation of the time.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="approximateDate"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.#ctor(Microsoft.Health.ItemTypes.ApproximateDate,Microsoft.Health.ItemTypes.ApproximateTime,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            class with the specified date, time, and time zone.
            </summary>
            
            <param name="approximateDate">
            The approximation of the date.
            </param>
            
            <param name="approximateTime">
            The approximation of the time.
            </param>
            
            <param name="timeZone">
            The time zone of the approximate time.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="approximateDate"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            class with the specified description.
            </summary>
            
            <param name="description">
            The description of the approximate date.
            </param>
            
            <remarks>
            The description and approximate date/time are mutually exclusive. A description
            is the approximation of a date without using year, month, day.  For instance,
            "when I was a toddler" can be used as an approximate date.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="description"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.#ctor(System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            class from a DateTime instance.
            </summary>
            
            <param name="dateTime">
            The DateTime instance
            </param>
            
            <remarks>
            The time zone is not set by this constructor.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the approximate date and time from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the approximate date and time.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the approximate date and time to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the approximate date and time.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the approximate date and time to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.ApproximateDateTime.ApproximateDate"/> is <b>null</b> and 
            <see cref="P:Microsoft.Health.ItemTypes.ApproximateDateTime.Description"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.CompareTo(System.Object)">
            <summary>
            Compares the specified object to this <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> 
            object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="obj"/>. If the result is zero, 
            the instance is equal to <paramref name="obj"/>. If the result is
            greater than zero, the instance is greater than <paramref name="obj"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            or <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.CompareTo(Microsoft.Health.ItemTypes.ApproximateDateTime)">
            <summary>
            Compares the specified object to this <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> 
            object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.CompareTo(System.DateTime)">
            <summary>
            Compares the specified object to this <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> 
            object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero,
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to this object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the <paramref name="obj"/> is an 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> object and the year, month, and
            day exactly match the year, month, and day of this object; otherwise, 
            <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/>
            or <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.GetHashCode">
            <summary>
            See the base class documentation.
            </summary>
            
            <returns>
            See the base class documentation.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.op_Equality(Microsoft.Health.ItemTypes.ApproximateDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to 
            the specified date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/>
            is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> or
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.op_Inequality(Microsoft.Health.ItemTypes.ApproximateDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is not equal 
            to the specified
            date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>false</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>true</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter 
            is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> or
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.op_GreaterThan(Microsoft.Health.ItemTypes.ApproximateDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified date is greater than 
            the specified object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is greater than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter
            is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> or
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.op_LessThan(Microsoft.Health.ItemTypes.ApproximateDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified date is less than the specified
            object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is less than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter 
            is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> or
            <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateDateTime.ToString">
            <summary>
            Gets a string representation of the approximate date/time.
            </summary>
            
            <returns>
            A string representation of the approximate date/time.
            </returns>
            
            <remarks>
            This method is not culture aware.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateDateTime.ApproximateDate">
            <summary>
            Gets or sets the approximate date.
            </summary>
            
            <remarks>
            The <paramref name="value"/> parameter is <b>null</b> when set, and 
            <see cref="P:Microsoft.Health.ItemTypes.ApproximateDateTime.Description"/> must be set to a non-<b>null</b> value before
            calling <see cref="M:Microsoft.Health.ItemTypes.ApproximateDateTime.WriteXml(System.String,System.Xml.XmlWriter)"/>.
            <br/><br/>
            The property value defaults to the current year.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateDateTime.ApproximateTime">
            <summary>
            Gets or sets the approximate time.
            </summary>
            
            <remarks>
            This value is only used if <see cref="P:Microsoft.Health.ItemTypes.ApproximateDateTime.ApproximateDate"/> is set
            to a non-<b>null</b> value.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateDateTime.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            
            <remarks>
            This value is only used if <see cref="P:Microsoft.Health.ItemTypes.ApproximateDateTime.ApproximateDate"/> is set
            to a non-<b>null</b> value.
            HealthVault does not interpret this value or adjust dates accordingly.
            It is up to the application to decide how this value is used.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateDateTime.Description">
            <summary>
            Gets or sets the descriptive form of the approximate date.
            </summary>
            
            <remarks>
            The descriptive form of the approximate date is a value such as 
            "As a baby...".
            <br/><br/>
            If <paramref name="value"/> is <b>null</b> when set, 
            <see cref="P:Microsoft.Health.ItemTypes.ApproximateDateTime.ApproximateDate"/> must be set to a non-<b>null</b> value 
            before calling <see cref="M:Microsoft.Health.ItemTypes.ApproximateDateTime.WriteXml(System.String,System.Xml.XmlWriter)"/>.
            If <paramref name="value"/> is not <b>null</b> when set, 
            <see cref="P:Microsoft.Health.ItemTypes.ApproximateDateTime.ApproximateDate"/> is set to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.ApproximateTime">
            <summary> 
            An approximation of a time.
            </summary>
            
            <remarks>
            An approximation of a time must have an hour and minute and can 
            also optionally have seconds specified.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> class 
            with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> class 
            with the specified hour and minute.
            </summary>
            
            <param name="hour">
            The hour between 0 and 23.
            </param>
            
            <param name="minute">
            The minute between 0 and 59.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="hour"/> parameter is less than 0 or greater
            than 23, or the <paramref name="minute"/> parameter is less than 0 or
            greater than 59.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> class 
            with the specified hour, minute, and second.
            </summary>
            
            <param name="hour">
            The hour between 0 and 23.
            </param>
            
            <param name="minute">
            The minute between 0 and 59.
            </param>
            
            <param name="second">
            The second between 0 and 59.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="hour"/> parameter is less than 0 or greater
            than 23, or the <paramref name="minute"/> or <paramref name="second"/> 
            parameter is less than 0 or
            greater than 59.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> class 
             with the specified hour, minute, second, and millisecond.
             </summary>
             
             <param name="hour">
             The hour between 0 and 23.
             </param>
             
             <param name="minute">
             The minute between 0 and 59.
             </param>
             
             <param name="second">
             The second between 0 and 59.
             </param>
            
             <param name="millisecond">
             The millisecond between 0 and 999.
             </param>
             
             <exception cref="T:System.ArgumentOutOfRangeException">
             The <paramref name="hour"/> parameter is less than 0 or greater
             than 23, or the <paramref name="minute"/>, or <paramref name="second"/> 
             parameter is less than 0 or
             greater than 59, or <paramref name="millisecond"/> parameter is less than 0
             or greater than 999.
             </exception>
             
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the approximate time from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the approximate time.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the approximate time to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the approximate time.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the approximate time to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.CompareTo(System.Object)">
            <summary>
            Compares the specified object to this ApproximateTime object.
            </summary>
            
            <returns>
            An integer representing the object order.
            </returns> 
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. 
            </returns>
            
            <remarks>
            If the result is less than zero, the 
            instance is less than <paramref name="obj"/>. If the result is zero
            the instance is equal to <paramref name="obj"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="obj"/>.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/>
            object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.CompareTo(Microsoft.Health.ItemTypes.ApproximateTime)">
            <summary>
            Compares the specified object to this ApproximateDate object.
            </summary>
            
            <param name="other">
            The time to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. 
            </returns>
            
            <remarks>
            If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to this object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the <paramref name="obj"/> is a 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> object and the hour, minute, 
            second, and millisecond exactly match; otherwise, <b>false</b>. 
            </returns>
            
            <remarks>
            If an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> is less specific than the other 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/>, the less specific one is considered less than 
            the more specific one, assuming that the current data is equal.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/>
            object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.GetHashCode">
            <summary>
            See the base class documentation.
            </summary>
            
            <returns>
            See the base class documentation.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.op_Equality(Microsoft.Health.ItemTypes.ApproximateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to 
            the specified time.
            </summary>
            
            <param name="time">
            The time object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if <paramref name="time"/> has the hour, minute, 
            second, and millisecond exactly match; otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.op_Inequality(Microsoft.Health.ItemTypes.ApproximateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is not equal 
            to the specified
            time.
            </summary>
            
            <param name="time">
            The time object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>false</b> if <paramref name="time"/> has the hour, minute, 
            second, and millisecond exactly match.        
            </returns>
            
            <remarks>
            If an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> is less specific than the other 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/>, the less specific one is considered less than 
            the more specific one, assuming that the current data is equal.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.op_GreaterThan(Microsoft.Health.ItemTypes.ApproximateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified time is greater than the specified
            object.
            </summary>
            
            <param name="time">
            The time object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if <paramref name="time"/> has the hour, minute, 
            second, and millisecond greater than that of 
            <paramref name="obj"/>.
            </returns>
            
            <remarks>
            If an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> is less specific than the other 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/>, the less specific one is considered less than 
            the more specific one, assuming that the current data is equal.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.op_LessThan(Microsoft.Health.ItemTypes.ApproximateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified time is less than the specified
            object.
            </summary>
            
            <param name="time">
            The time object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if <paramref name="time"/> has the hour, minute, 
            second, and millisecond less than that of 
            <paramref name="obj"/>.       
            </returns>
            
            <remarks>
            If an <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/> is less specific than the other 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateDate"/>, the less specific one is considered less than 
            the more specific one, assuming that the current data is equal.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not an 
            <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ApproximateTime.ToString">
            <summary>
            Gets a string representation of the time.
            </summary>
            
            <returns>
            A string representation of the time.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateTime.Now">
            <summary>
            Gets the current time including the hour, minute, and second.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateTime.Hour">
            <summary>
            Gets or sets the hour of the time approximation.
            </summary>
            
            <returns>
            An integer representing the hour.
            </returns>
            
            <remarks>
            This value defaults to the current hour.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0 or greater than 23
            when setting.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateTime.Minute">
            <summary>
            Gets or sets the minute of the time approximation.
            </summary>
            
            <returns>
            An integer representing the minute.
            </returns> 
            
            <remarks>
            This value defaults to the current minute.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0 or greater than 59
            when setting.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateTime.Second">
            <summary>
            Gets or sets the seconds of the time approximation.
            </summary>
            
            <returns>
            An integer representing the second.
            </returns> 
            
            <remarks>
            If the number of seconds is unknown, the value can be set to 
            <b>null</b>. This value defaults to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0 or greater than 59
            when setting.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ApproximateTime.Millisecond">
            <summary>
            Gets or sets the milliseconds of the time approximation.
            </summary>
            
            <returns>
            An integer representing the milliseconds.
            </returns>
            
            <remarks>
            If the number of milliseconds is unknown, the value can be set to <b>null</b>. 
            This value defaults to <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0 or greater than 999
            when setting.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.AsthmaInhaler">
            <summary>
            Represents a health record item that encapsulates an asthma inhaler.
            </summary>
            
            <remarks>
            This class can represent any inhaler unit used to treat asthma. The 
            inhaler may or may not have a device component to it. Each new canister 
            should be represented by a new <see cref="T:Microsoft.Health.ItemTypes.AsthmaInhaler"/> instance, even 
            if there is a containing device that is reusable. Changes in regimen 
            (minimum/maximum doses per day) should also cause a new health record 
            item to be created.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhaler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AsthmaInhaler"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhaler.#ctor(Microsoft.Health.ItemTypes.ApproximateDateTime,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AsthmaInhaler"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="startDate">
            The approximate date and time when the inhaler use began.
            </param>
            
            <param name="drug">
            The name of the drug being used in the inhaler.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="startDate"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="drug"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.AsthmaInhaler.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhaler.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.AsthmaInhaler"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the asthma inhaler data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in the <paramref name="typeSpecificXml"/> 
            parameter is not an asthma-inhaler node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhaler.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the asthma inhaler data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the asthma inhaler data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.AsthmaInhaler.StartDate"/> is <b>null</b>, or
            <see cref="P:Microsoft.Health.ItemTypes.AsthmaInhaler.Drug"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhaler.ToString">
            <summary>
            Gets a string representation of the asthma inhaler item.
            </summary>
            
            <returns>
            A string representation of the asthma inhaler item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.StartDate">
            <summary>
            Gets or sets the date and time when the inhaler use began.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the date 
            and time.
            </returns>
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.Drug">
            <summary>
            Gets or sets the drug being used in the inhaler.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the drug.
            </returns> 
            
            <remarks>
            The name of the drug in the canister.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.Strength">
            <summary>
            Gets or sets the textual description of the drug strength
            (e.g., '44 mcg / puff').
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the description.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the strength should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.Purpose">
            <summary>
            Gets or sets the count of doses for each inhaler use.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.InhalerPurpose"/> instance representing the count.
            </returns> 
            
            <remarks>
            Set the value to <see cref="F:Microsoft.Health.ItemTypes.InhalerPurpose.None"/> if the purpose should
            not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.StopDate">
            <summary>
            Gets or sets the date and time when the inhaler was retired.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the date 
            and time.
            </returns> 
            
            <remarks>
            The value defaults to the current year, month, and day.
            <br/><br/>
            Set the value to <b>null</b> if the stop date should not be stored or
            is still in use.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.ExpirationDate">
            <summary>
            Gets or sets the date and time when the canister has clinically
            expired.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the date 
            and time.
            </returns> 
            
            <remarks>
            The value defaults to the current year, month, and day.
            <br/><br/>
            Set the value to <b>null</b> if the expiration date should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.DeviceId">
            <summary>
            Gets or sets the identifier for the device.
            </summary>
            
            <returns>
            A string representing the identifier.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the device identifier should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.InitialDoses">
            <summary>
            Gets or sets the number of doses in the unit at the time of
            item creation.
            </summary>
            
            <returns>
            An integer representing the number of doses.
            </returns> 
            
            <remarks>
            The number of doses in the unit may not correspond to the number
            of doses the canister started with, since the expectation is that
            a change in regimen will cause a new item to be created as well.
            <br/><br/>
            Set the value to <b>null</b> if the initial doses should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.MinimumDailyDoses">
            <summary>
            Gets or sets the minimum number of doses that should be taken
            each day.
            </summary>
            
            <returns>
            An integer representing the minimum number of doses.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the minimum doses should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.MaximumDailyDoses">
            <summary>
            Gets or sets the maximum number of doses that should be taken
            each day.
            </summary>
            
            <returns>
            An integer representing the maximum number of doses.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the maximum doses should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.CanAlert">
            <summary>
            Gets or sets a value indicating whether the inhaler can show alerts.
            </summary>
            
            <returns>
            <b>true</b> if the inhaler can show alerts; otherwise, <b>false</b>. 
            If <b>null</b>, it is unknown whether the inhaler
            can show alerts.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhaler.Alerts">
            <summary>
            Gets a collection of alerts for the inhaler.
            </summary>
            
            <returns>
            A collection of alerts.
            </returns>
            
            <remarks>
            To add an alert, pass the Add method of the returned collection
            an instance of the <see cref="T:Microsoft.Health.ItemTypes.Alert"/> class.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.AsthmaInhalerUse">
            <summary>
            Represents a health record item type that encapsulates a single use of 
            an asthma inhaler.
            </summary>
            
            <remarks>
            A single use can consist of multiple doses if the prescription
            calls for it.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhalerUse.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AsthmaInhalerUse"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhalerUse.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.CodableValue,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.AsthmaInhalerUse"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date/time when the inhaler was used.
            </param>
            
            <param name="drug">
            The name of the drug being used in the inhaler.
            </param>
            
            <param name="doseCount">
            The count of doses for each inhaler use.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="drug"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.AsthmaInhalerUse.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhalerUse.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.AsthmaInhalerUse"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the asthma inhaler use data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an asthma-inhaler-use node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhalerUse.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the asthma inhaler use data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the asthma inhaler use data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.When"/>, <see cref="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.DoseCount"/>, or
            <see cref="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.Drug"/> property is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.AsthmaInhalerUse.ToString">
            <summary>
            Gets a string representation of the asthma inhaler use item.
            </summary>
            
            <returns>
            A string representation of the asthma inhaler use item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.When">
            <summary>
            Gets or sets the date when the inhaler use occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.Drug">
            <summary>
            Gets or sets the drug being used in the inhaler.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the 
            drug.
            </value>
            
            <remarks>
            The name of the drug in the canister.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.Strength">
            <summary>
            Gets or sets the strength of the dosage for each inhaler use.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the 
            dosage strength.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the strength should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.DoseCount">
            <summary>
            Gets or sets the count of doses for each inhaler use.
            </summary>
            
            <value>
            An integer representing the count.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.DeviceId">
            <summary>
            Gets or sets the identifier for the device used.
            </summary>
            
            <value>
            A string representing the device identifier.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the device identifier should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.AsthmaInhalerUse.DosePurpose">
            <summary>
            Gets or sets the target of the inhaler usage.
            </summary>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the 
            dosage purpose. 
            <remarks>
            Examples include relief (the dose purpose is
            intended to relieve immediate asthma symptoms), 
            prevention (the dose purpose is intended to 
            prevent asthma symptoms), control (the dose 
            purpose is intended to control the impact of 
            current asthma symptoms), other (the dose 
            purpose is known, but other than to relieve, 
            prevent or control asthma symptoms), and 
            undefined (there is not enough information 
            about the inhaler usage to discern purpose).
            <br/><br/>
            Codes for this value are in the "dose-purpose" 
            vocabulary.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Basic">
            <summary>
            Represents information about a health record that is not considered personally
            identifiable.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Basic.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Basic"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Basic.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Basic.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Basic"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the basic data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a basic node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Basic.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the basic data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the basic data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Basic.ToString">
            <summary>
            Gets a string representation of the basic item.
            </summary>
            
            <returns>
            A string representation of the basic item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.Gender">
            <summary>
            Gets or sets the gender of the person.
            </summary>
            
            <value>
            The person's gender.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the gender should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.BirthYear">
            <summary>
            Gets or sets the birth year of the person.
            </summary>
            
            <value>
            An integer representing the year.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the birth year should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 1000 or greater than
            3000 when setting the value.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.Country">
            <summary>
            Gets or sets the country of residence.
            </summary>
            
            <value>
            A string representing the two-letter ISO3166-2 code for the 
            country/region.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.PostalCode">
            <summary>
            Gets or sets the postal code of the country of residence.
            </summary>
            
            <value>
            A string representing the postal code.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.City">
            <summary>
            Gets or sets the city of residence.
            </summary>
            
            <value>
            A string representing the city.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.StateOrProvince">
            <summary>
            Gets or sets the state or province of residence.
            </summary>
            
            <value>
            A string representing the state or province.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the state
            should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.FirstDayOfWeek">
            <summary>
            Gets or sets the preferred first day of the week.
            </summary>
            
            <value>
            A <see cref="T:System.DayOfWeek"/> instance representing the day.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the first day of the week 
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Basic.Languages">
            <summary>
            Gets the language(s) the person speaks.
            </summary>
            
            <value>
            A list of the languages.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.BloodGlucose">
            <summary>
            Health record item type that represents a blood glucose measurement.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucose.#ctor">
            <summary>
            Constructs a new BloodGlucose health record item instance with 
            default values.
            </summary>
            
            <remarks>
            The item isn't added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucose.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.BloodGlucoseMeasurement,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Constructs the new blood glucose health record item instance
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date/time when the blood glucose reading was take.
            </param>
            
            <param name="value">
            The blood glucose value of the reading.
            </param>
            
            <param name="glucoseMeasurementType">
            How the glucose was measured; whole blood, plasma, etc. 
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.BloodGlucose.TypeId">
            <summary>
            The unique identifier for the item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucose.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this BloodGlucose instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the blood glucose data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a blood-glucose node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the blood glucose data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the blood glucose data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.BloodGlucose.Value"/> or <see cref="P:Microsoft.Health.ItemTypes.BloodGlucose.GlucoseMeasurementType"/> 
            parameter has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucose.ToString">
            <summary>
            Gets a string representation of the blood glucose item.
            </summary>
            
            <returns>
            A string representation of the blood glucose item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodGlucose.When">
            <summary>
            Gets or sets the date/time when the blood glucose measurement
            was taken.
            </summary>
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodGlucose.Value">
            <summary>
            Gets or set the blood glucose value.
            </summary>
            
            <remarks>
            The blood glucose value is normally measured in mmol/L.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodGlucose.GlucoseMeasurementType">
            <summary>
            Gets or set the glucose measurement type.
            </summary>
            
            <remarks>
            The measurement type is how the reading was taken; whole blood,
            plasma, etc. The common value for the measurement types are defined
            in the glucose-measurement-type vocabulary.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodGlucose.OutsideOperatingTemperature">
            <summary>
            Gets or sets whether the reading was taken outside the operating
            temperature for the device.
            </summary>
            
            <remarks>
            If the device does not support this function, the value is 
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodGlucose.IsControlTest">
            <summary>
            Gets or sets a value indicating whether the reading was taken as a 
            control test.
            </summary>
            
            <value>
            <b>true</b> if the reading was taken as a control test; otherwise, 
            <b>false</b>.
            </value>
            
            <remarks>
            If the device does not support this function, the value is 
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodGlucose.ReadingNormalcy">
            <summary>
            Gets or sets a value indicating whether the reading was within the 
            normal range of values.
            </summary>
            
            <value>
            <b>true</b> if the reading was within normal range; otherwise, 
            <b>false</b>. 
            </value>
            
            <remarks>
            If the device does not support this function, the value is 
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodGlucose.MeasurementContext">
            <summary>
            Gets or sets the contextual information about the reading.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the information.
            </value>
            
            <remarks>
            Common values for the measurement context can be found in the
            "glucose-measurement-context" vocabulary.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement">
            <summary>
            Represents a blood glucose measurement.
            </summary>
            
            <remarks>
            In HealthVault, blood glucose readings have values and display values. 
            All values are stored in a base unit of mmol/L. An application can 
            take a blood glucose value using any scale the application chooses and 
            can store the user-entered value as the display value, but the blood
            glucose value must be converted to mmol/L to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement"/> 
            class with the specified value in millimoles per liter (mmol/L).
            </summary>
            
            <param name="millimolesPerLiter">
            The blood glucose measurement in millimoles per liter.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement"/> 
            class with the specified value in millimoles per liter (mmol/L) 
            and display value.
            </summary>
            
            <param name="millimolesPerLiter">
            The blood glucose measurement in millimoles per liter (mmol/L).
            </param>
            
            <param name="displayValue">
            The display value of the blood glucose measurement. This should 
            contain the exact measurement as entered by the user, even if it 
            uses some other unit of measure besides mmol/L. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies the value is a legal blood glucose measurement in 
            millimoles per liter (mmol/L).
            </summary>
            
            <param name="value">
            The blood glucose measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the blood glucose from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the blood glucose.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the blood glucose to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the blood glucose to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the blood glucose in the base units.
            </summary>
            <returns>
            The blood glucose as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.BloodPressure">
            <summary>
            Represents a health record item type that encapsulates a blood 
            pressure measurement.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodPressure.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.BloodPressure"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodPressure.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.BloodPressure"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date/time when the blood pressure reading was take.
            </param>
            
            <param name="systolic">
            The systolic pressure of the reading.
            </param>
            
            <param name="diastolic">
            The diastolic pressure of the reading.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="systolic"/> or <paramref name="diastolic"/> 
            parameter is negative.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.BloodPressure.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value
            >A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodPressure.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.BloodPressure"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the blood pressure data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a bp node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodPressure.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the blood pressure data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the blood pressure data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.BloodPressure.Systolic"/> or <see cref="P:Microsoft.Health.ItemTypes.BloodPressure.Diastolic"/> property 
            has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.BloodPressure.ToString">
            <summary>
            Gets a string representation of the blood pressure item.
            </summary>
            
            <returns>
            A string representation of the blood pressure item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodPressure.When">
            <summary>
            Gets or sets the date/time when the blood pressure measurement
            was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodPressure.Systolic">
            <summary>
            Gets or sets the systolic pressure of the reading.
            </summary>
            
            <value>
            An integer representing the pressure.
            </value>
            
            <remarks>
            This property must be set before the item is created or updated.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodPressure.Diastolic">
            <summary>
            Gets or sets the diastolic pressure of the reading.
            </summary>
            
            <value>
            An integer representing the pressure.
            </value>
            
            <remarks>
            This property must be set before the item is created or updated.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodPressure.Pulse">
            <summary>
            Gets or sets the pulse during the reading.
            </summary>
            
            <value>
            An integer representing the pulse.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the pulse should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than zero.
            </exception>
                    
        </member>
        <member name="P:Microsoft.Health.ItemTypes.BloodPressure.IrregularHeartbeatDetected">
            <summary>
            Gets or sets a value indicating whether an irregular heartbeat was 
            detected.
            </summary>
            
            <value>
            <b>true</b> if an irregular heartbeat was detected; otherwise, <b>false</b>.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the reading does not support detecting an
            irregular heartbeat.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.CardiacProfile">
            <summary>
            Represents a health record item type that encapsulates a person's 
            cardiac profile at a single point in time.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CardiacProfile.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CardiacProfile"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CardiacProfile.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CardiacProfile"/> class 
            with the specified date and time.
            </summary>
            
            <param name="when">
            The date/time when the cardiac profile was take.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.CardiacProfile.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CardiacProfile.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.CardiacProfile"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the cardiac profile data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a cardiac-profile node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CardiacProfile.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the cardiac profile data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the cardiac profile data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CardiacProfile.ToString">
            <summary>
            Gets a string representation of the cardiac profile item.
            </summary>
            
            <returns>
            A string representation of the cardiac profile item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.When">
            <summary>
            Gets or sets the date/time when the cardiac profile was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.IsOnHypertensionDiet">
            <summary>
            Gets or sets whether the person is on a hypertension specific
            diet.
            </summary>
            
            <value>
            True if the person is on a hypertension diet, false if not, or null
            if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.IsOnHypertensionMedication">
            <summary>
            Gets or sets whether the person is on a hypertension specific
            medication.
            </summary>
            
            <value>
            True if the person is on hypertension medication, false if not, or null
            if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.HasRenalFailureBeenDiagnosed">
            <summary>
            Gets or sets whether renal failure has been diagnosed for the person.
            </summary>
            
            <value>
            True if renal failure has been diagnosed for the person, false if not, 
            or null if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.HasDiabetesBeenDiagnosed">
            <summary>
            Gets or sets whether diabetes has been diagnosed for the person.
            </summary>
            
            <value>
            True if diabetes has been diagnosed for the person, false if not, 
            or null if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.HasFamilyHeartDiseaseHistory">
            <summary>
            Gets or sets whether heart disease has been diagnosed for anyone
            in the person's family.
            </summary>
            
            <value>
            True if heart disease has been diagnosed for anyone in the person's
            family, false if not, or null if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.HasFamilyStrokeHistory">
            <summary>
            Gets or sets whether stroke has been diagnosed for anyone
            in the person's family.
            </summary>
            
            <value>
            True if stroke has been diagnosed for anyone in the person's
            family, false if not, or null if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.HasPersonalHeartDiseaseHistory">
            <summary>
            Gets or sets whether the person has been diagnosed with heart disease.
            </summary>
            
            <value>
            True if the person has been diagnosed with heart disease, 
            false if not, or null if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CardiacProfile.HasPersonalStrokeHistory">
            <summary>
            Gets or sets whether the person has been diagnosed with a stroke.
            </summary>
            
            <value>
            True if the person has been diagnosed with a stroke, false if not, 
            or null if unknown.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.CholesterolProfile">
            <summary>
            Represents a health record item type that encapsulates a person's 
            cholesterol profile (Lipid profile) at a single point in time.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CholesterolProfile.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CholesterolProfile"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CholesterolProfile.#ctor(Microsoft.Health.ItemTypes.HealthServiceDate)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CholesterolProfile"/> class 
            with the specified date.
            </summary>
            
            <param name="when">
            The date when the cholesterol profile was take.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.CholesterolProfile.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CholesterolProfile.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.CholesterolProfile"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the cholesterol profile data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a cholesterol-profile node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CholesterolProfile.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the cholesterol profile data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the cholesterol profile data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CholesterolProfile.ToString">
            <summary>
            Gets a string representation of the cholesterol profile.
            </summary>
            
            <returns>
            A string representing the cholesterol profile.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CholesterolProfile.When">
            <summary>
            Gets or sets the date when the cholesterol profile was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CholesterolProfile.LDL">
            <summary>
            Gets or sets the person's low density lipoprotein in mg/dL.
            </summary>
            
            <value>
            The value of the person's LDL measurement or <b>null</b> if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CholesterolProfile.HDL">
            <summary>
            Gets or sets the person's high density lipoprotein in mg/dL.
            </summary>
            
            <value>
            The value of the person's HDL measurement or <b>null</b> if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CholesterolProfile.TotalCholesterol">
            <summary>
            Gets or sets the person's total cholesterol in mg/dL.
            </summary>
            
            <value>
            The value of the person's total cholesterol measurement or <b>null</b> if unknown.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CholesterolProfile.Triglyceride">
            <summary>
            Gets or sets the person's triglyceride in mg/dL.
            </summary>
            
            <value>
            The value of the person's triglyceride measurement or <b>null</b> if unknown.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Condition">
            <summary>
            Represents a health record item type that encapsulates a single 
            condition, issue, or problem.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Condition.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Condition"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Condition.#ctor(Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Condition"/> class with the 
            specified name.
            </summary>
            
            <param name="name">
            The name of the condition.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Condition.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Condition.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Condition"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the condition data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a condition node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Condition.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the condition data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the condition data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.Condition.Name"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Condition.ToString">
            <summary>
            Gets a string representation of the condition item.
            </summary>
            
            <returns>
            A string representation of the condition item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Condition.Name">
            <summary>
            Gets or sets the name of the condition.
            </summary>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Condition.OnsetDate">
            <summary>
            Gets or sets the approximate date of the first occurrence of the
            condition.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> representing the 
            date of the first occurrence.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the onset date should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Condition.Status">
            <summary>
            Gets or sets the status of the condition.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the status.
            </value>
            
            <remarks>
            Examples of the status include values such as acute or chronic.
            <br/><br/>
            Set the value to <b>null</b> if the status should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Condition.StopDate">
            <summary>
            Gets or sets the approximate date the condition resolved.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> representing the date.
            </value>
            
            <remarks>
            For multiple acute episodes, this is the last date the condition
            resolved.
            <br/><br/>
            Set the value to <b>null</b> if the stop date should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Condition.StopReason">
            <summary>
            Gets or sets how the condition was resolved.
            </summary>
            
            <value>
            A string representing the condition resolution.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the reason should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Contact">
            <summary>
            Represents a health record item type that encapsulates a contact.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Contact.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Contact"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Contact.#ctor(Microsoft.Health.ItemTypes.ContactInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Contact"/> class with the 
            specified contact information.
            </summary>
            
            <param name="contactInfo">
            The information about the contact.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="contactInfo"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Contact.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Contact.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Contact"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the contact data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a contact node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Contact.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the contact data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the contact data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Contact.ContactInformation"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Contact.ToString">
            <summary>
            Gets a string representation of the contact item.
            </summary>
            
            <returns>
            A string representation of the contact item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Contact.ContactInformation">
            <summary>
            Gets or sets the contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.ContactInfo"/> containing the information.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> during set.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.ContactInfo">
            <summary>
            Represents information about a contact person.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ContactInfo.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.ContactInfo"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ContactInfo.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the contact information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ContactInfo.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the contact information into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the contact information.
            </param>
            
            <param name="writer">
            The XML writer into which the contact information should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            A mandatory property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.ContactInfo.ToString">
            <summary>
            Gets a string representation of the contact information.
            </summary>
            
            <returns>
            A string representation of the contact information.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ContactInfo.PrimaryAddress">
            <summary>
            Gets the first address that is marked as IsPrimary".
            </summary>
            
            <value>
            The first <see cref="P:Microsoft.Health.ItemTypes.ContactInfo.Address"/> value that is marked as IsPrimary, 
            or <b>null</b> if no primary addresses were found.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ContactInfo.PrimaryPhone">
            <summary>
            Gets the first telephone number that is marked as IsPrimary.
            </summary>
            
            <value>
            The first value of <see cref="P:Microsoft.Health.ItemTypes.ContactInfo.Phone"/> that is marked as 
            IsPrimary, or <b>null</b> if no primary telephone numbers 
            were found.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ContactInfo.PrimaryEmail">
            <summary>
            Gets the first email that is marked as IsPrimary.
            </summary>
            
            <value>
            The first value of <see cref="P:Microsoft.Health.ItemTypes.ContactInfo.Email"/> that is marked as IsPrimary, 
            or <b>null</b> if no primary email addresses were found.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ContactInfo.Address">
            <summary>
            Gets the addresses for the contact.
            </summary>
            
            <value>
            A collection of addresses.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ContactInfo.Phone">
            <summary>
            Gets the telephone numbers for the contact.
            </summary>
            
            <value>
            A collection of phone numbers.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.ContactInfo.Email">
            <summary>
            Gets the email addresses for the contact.
            </summary>
            
            <value>
            A collection of email addresses.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DailyMedicationUsage">
            <summary>
            Represents a health record item type that encapsulates a person's 
            medication and supplement usage for a day.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DailyMedicationUsage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DailyMedicationUsage"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DailyMedicationUsage.#ctor(Microsoft.Health.ItemTypes.HealthServiceDate,Microsoft.Health.ItemTypes.CodableValue,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DailyMedicationUsage"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date when the medication/supplement was consumed.
            </param>
            
            <param name="drugName">
            The name of the drug.
            </param>
            
            <param name="dosesConsumed">
            The number of doses consumed by the person.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> or <paramref name="drugName"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.DailyMedicationUsage.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DailyMedicationUsage.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.DailyMedicationUsage"/> instance from the 
            data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the medication usage data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a <see cref="T:Microsoft.Health.ItemTypes.DailyMedicationUsage"/> node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DailyMedicationUsage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the daily medication usage data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the daily medication usage data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b> null </b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.DrugName"/> is <b> null </b>.
            </exception> 
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DailyMedicationUsage.ToString">
            <summary>
            Gets a string representation of the daily medication usage.
            </summary>
            
            <returns>
            A string representation of the daily medication usage item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.When">
            <summary>
            Gets or sets the date of the medication usage.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> representing the date.
            </value>
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.DrugName">
            <summary>
            Gets or sets the name of the drug.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the drug name.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.DosesConsumed">
            <summary>
            Gets or sets the number of doses of the drug consumed in the day.
            </summary>
            
            <value>
            An integer representing the number of doses consumed by the person
            in the specified day.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.PurposeOfUse">
            <summary>
            Gets or sets the purpose of the medication or supplement.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the purpose of
            the medication or supplement.
            </value>
                    
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.IntendedDoses">
            <summary>
            Gets or sets the intended number of doses the person should take in a day.
            </summary>
            
            <value>
            An integer representing the intended number of doses the person
            should take in a day. If this value is unknown, it can be set to <b>null</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.UsageSchedule">
            <summary>
            Gets or sets the usage schedule.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the schedule of usage.
            </value>
                    
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.DrugForm">
            <summary>
            Gets or sets the form by which the drug/supplement is taken.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the form by which 
            the drug/supplement is taken.
            </value>
                    
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.PrescriptionType">
            <summary>
            Gets or sets the means by which the drug was determined to be needed.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the means by which
            the drug was determined to be needed.
            </value>
                    
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DailyMedicationUsage.SingleDoseDescription">
            <summary>
            Gets or sets a description of a single dose.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing a description
            of a single dose.
            </value>
                    
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Device">
            <summary>
            Represents a health record item type that encapsulates a medical device.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Device.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Device"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Device.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Device"/> class with the 
            specified date and time.
            </summary>
            
            <param name="when">
            The date and  time relevant for the medical device.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Device.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Device.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this medical device instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the medical device data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a medical device node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Device.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the medical device data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the medical device data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.Device.When"/> has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Device.ToString">
            <summary>
            Gets a string representation of the device item.
            </summary>
            
            <returns>
            A string representation of the device item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Device.When">
            <summary>
            Gets or sets the date/time relevant for the medical device.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Device.DeviceName">
            <summary>
            Gets or sets the device name of the medical device.
            </summary>
            
            <value>
            A string representing the device name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the device name should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Device.Vendor">
            <summary>
            Gets or sets the vendor contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the vendor contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Device.Model">
            <summary>
            Gets or sets the model of the medical device.
            </summary>
            
            <value>
            A string representing the device model.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the model should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Device.SerialNumber">
            <summary>
            Gets or sets the serial number of the medical device.
            </summary>
            
            <value>
            A string representing the device serial number.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the serial number should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Device.AnatomicSite">
             <summary>
             Gets or sets the position on the body from which the device 
             takes readings.
             </summary>
             
            <value>
             A string representing the position.
             </value>
             
             <remarks>
             Set the value to <b>null</b> if the anatomic site should not be 
             stored.
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             If <paramref name="value"/> contains only whitespace.
             </exception>
             
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Device.Description">
            <summary>
            Gets or sets the description of the medical device.
            </summary>
            
            <value>
            A string representing the device description.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the description should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DiabeticProfile">
            <summary>
            Represents a health record item type that encapsulates a person's 
            diabetic profile at a single point in time.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DiabeticProfile.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DiabeticProfile"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DiabeticProfile.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DiabeticProfile"/> class 
            with the specified date and time.
            </summary>
            
            <param name="when">
            The date/time when the diabetic profile was take.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.DiabeticProfile.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DiabeticProfile.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.DiabeticProfile"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the diabetic profile data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a diabetic-profile node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DiabeticProfile.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the diabetic profile data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the diabetic profile data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DiabeticProfile.ToString">
            <summary>
            Gets a string representation of the diabetic profile item.
            </summary>
            
            <returns>
            A string representation of the diabetic profile item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DiabeticProfile.When">
            <summary>
            Gets or sets the date/time when the diabetic profile was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DiabeticProfile.MaximumHbA1C">
            <summary>
            Gets or sets the person's maximum HbA1C.
            </summary>
            
            <value>
            A number representing the maximum HbA1C.
            </value>
            
            <remarks>
            If the maximum HbA1C is unknown, the value can be set to
            <b>null</b>.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0.0 or greater than 1.0.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DiabeticProfile.TargetGlucoseZoneGroups">
            <summary>
            Gets the target glucose zone groups.
            </summary>
            
            <value>
            A collection of zone groups.
            </value>
            
            <remarks>
            Target glucose zones are grouped to allow different sets of
            target zones based on a person's needs.
            To add a group of target glucose zones, call the Add method on the
            returned collection.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DietaryDailyIntake">
            <summary>
            Represents a health record item type that encapsulates a person's 
            dietary intake for a day.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DietaryDailyIntake.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DietaryDailyIntake"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DietaryDailyIntake.#ctor(Microsoft.Health.ItemTypes.HealthServiceDate)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DietaryDailyIntake"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date when the food was consumed.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.DietaryDailyIntake.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DietaryDailyIntake.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.DietaryDailyIntake"/> instance from the 
            data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the dietary intake data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a <see cref="T:Microsoft.Health.ItemTypes.DietaryDailyIntake"/> node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DietaryDailyIntake.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the dietary daily intake data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the dietary daily intake data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DietaryDailyIntake.ToString">
            <summary>
            Gets a string representation of the dietary daily intake item.
            </summary>
            
            <returns>
            A string representation of the dietary daily intake item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.When">
            <summary>
            Gets or sets the date of the dietary intake.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> representing the date.
            </value>
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.Calories">
            <summary>
            Gets or sets the caloric intake for the day.
            </summary>
            
            <value>
            An integer representing the intake.
            </value> 
            
            <remarks>
            If the caloric intake is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.TotalFat">
            <summary>
            Gets or sets the total intake of fat for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the fat intake.
            </value> 
            
            <remarks>
            If the total fat is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.SaturatedFat">
            <summary>
            Gets or sets the intake of saturated fat for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the fat intake.
            </value> 
            
            <remarks>
            If the saturated fat is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.TransFat">
            <summary>
            Gets or sets the intake of trans fat for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the fat intake.
            </value> 
            
            <remarks>
            If the trans fat is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.Protein">
            <summary>
            Gets or sets the intake of protein for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the protein intake.
            </value> 
            
            <remarks>
            If the protein intake is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.TotalCarbohydrates">
            <summary>
            Gets or sets the total intake of carbohydrates for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the 
            carbohydrate intake.
            </value> 
            
            <remarks>
            If the total carbohydrates intake is not known, the value can be 
            set to <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.DietaryFiber">
            <summary>
            Gets or sets the intake of dietary fiber for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the fiber intake.
            </value> 
            
            <remarks>
            If the dietary fiber intake is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.Sugars">
            <summary>
            Gets or sets the intake of sugars for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the sugar intake.
            </value> 
            
            <remarks>
            If the sugar intake is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.Sodium">
            <summary>
            Gets or sets the intake of sodium for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the sodium intake.
            </value> 
            
            <remarks>
            If the sodium intake is not known the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DietaryDailyIntake.Cholesterol">
            <summary>
            Gets or sets the intake of cholesterol for the day.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the cholesterol intake.
            </value> 
            
            <remarks>
            If the cholesterol intake is not known, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Directive">
             <summary>
             Represents a health record item type that encapsulates an advance directive.
             </summary>
            
             <remarks>
             An advance directive is a legal document that provides directions for future
             health care decisions in case the patient becomes incapacitated.
             </remarks>
             
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Directive.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Directive"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Directive.#ctor(Microsoft.Health.ItemTypes.ApproximateDateTime,Microsoft.Health.ItemTypes.ApproximateDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Directive"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="startDate">
            The date the directive takes effect.
            </param>
            
            <param name="stopDate">
            The date the directive stops being effective.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="startDate"/> parameter or <paramref name="stopDate"/>
            is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Directive.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Directive.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Directive"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the directive data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node of the <paramref name="typeSpecificXml"/> 
            parameter is not a directive node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Directive.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the directive data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the directive data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.Directive.StartDate"/> or <see cref="P:Microsoft.Health.ItemTypes.Directive.StopDate"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Directive.ToString">
            <summary>
            Gets a string representation of the directive item.
            </summary>
            
            <returns>
            A string representation of the directive item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.Description">
            <summary>
            Gets or sets the description of the directive.
            </summary>
            
            <returns>
            A string representing the directive description.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only
            whitespace when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.StartDate">
            <summary>
            Gets or sets the approximate date of the directive is effective.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the 
            effective date of the directive.
            </returns> 
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.StopDate">
            <summary>
            Gets or sets the approximate date the directive is no longer to
            be considered.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the 
            stop date of the directive. 
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.FullResuscitation">
            <summary>
            Gets or sets a value indicating the resuscitation status.
            </summary>
            
            <returns>
            <b>true</b> for full resuscitation; otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.ProhibitedInterventions">
            <summary>
            Gets or sets the list of prohibited interventions in this directive.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the list.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.AdditionalInstructions">
            <summary>
            Gets or sets additional directive instructions.
            </summary>
            
            <returns>
            A string representing the instructions.
            </returns>
            
            <remarks>
            Set the value to <b>null</b> if the manufacturer should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.AttendingPhysician">
            <summary>
            Gets or sets the attending physician endorsement details.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.AttendingPhysicianEndorsement">
            <summary>
            Gets or sets the date and time for the attending physician 
            endorsement details.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date and time.
            </returns> 
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.AttendingNurse">
            <summary>
            Gets or sets the attending nurse endorsement details.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> instance representing the nurse 
            endorsement details.
            </returns>   
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.AttendingNurseEndorsement">
            <summary>
            Gets or sets the date and time for the attending nurse endorsement details.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date and time.
            </returns> 
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.ExpirationDate">
            <summary>
            Gets or sets the date and time when the patient expired.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date and time.
            </returns> 
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.DiscontinuationDate">
            <summary>
            Gets or sets the date/time when clinical support was discontinued.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the date and time.
            </returns> 
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.DiscontinuationPhysician">
            <summary>
            Gets or sets the attending physician discontinuation details.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> instance representing the details.
            </returns> 
            
            <remarks>
            This type provides discontinuation details including name, identity, 
            and signature date and time of the attending physician.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.DiscontinuationPhysicianEndorsement">
            <summary>
            Gets or sets the date and time for the attending physician 
            discontinuation endorsement.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the 
            date and time.
            </returns> 
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.DiscontinuationNurse">
            <summary>
            Gets or sets the attending nurse discontinuation details.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> instance representing the details.
            </returns> 
            
            <remarks>
            This type provides discontinuation details including name, identity, 
            and signature date and time of the attending nurse.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Directive.DiscontinuationNurseEndorsement">
            <summary>
            Gets or sets the date and time for the attending nurse 
            discontinuation endorsement.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date and time.
            </returns> 
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DischargeSummary">
            <summary>
            Represents a health record item that encapsulates a discharge summary.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DischargeSummary.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DischargeSummary"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DischargeSummary.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DischargeSummary"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date and time of the discharge summary.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.DischargeSummary.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DischargeSummary.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this discharge summary instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the discharge summary data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node of the <paramref name="typeSpecificXml"/> parameter is not
            a discharge summary node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DischargeSummary.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the discharge summary data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the discharge summary data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DischargeSummary.ToString">
            <summary>
            Gets a string representation of the discharge summary.
            </summary>
            
            <returns>
            A string representation of the discharge summary.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.When">
            <summary>
            Gets or sets the date and time when the discharge summary occurred.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date 
            and time.
            </returns>
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.Type">
            <summary>
            Gets or sets the type for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the type.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the type should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.Category">
            <summary>
            Gets or sets the category for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the category.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the category should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.Setting">
            <summary>
            Gets or sets the setting for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the setting.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the setting should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.Specialty">
            <summary>
            Gets or sets the medical specialty for the discharge summary.
            </summary>
            
            <returns>
            A string representing the specialty.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the medical specialty should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.Text">
            <summary>
            Gets or sets the textual content for the discharge summary.
            </summary>
            
            <returns>
            A string representing the text content.
            </returns>
            
            <remarks>
            Set the value to <b>null</b> if the medical specialty should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.PrimaryProvider">
            <summary>
            Gets or sets the primary provider contact information.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> instance representing the primary provider.
            </returns>
            
            <remarks>
            Set the value to <b>null</b> if the primary provider contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.PrimaryProviderEndorsement">
            <summary>
            Gets or sets the date and time for the primary provider endorsement details.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date and time.
            </returns>
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.SecondaryProvider">
            <summary>
            Gets or sets the secondary provider contact information.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> instance representing the secondary provider.
            </returns>
            
            <remarks>
            Set the value to <b>null</b> if the secondary provider contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.SecondaryProviderEndorsement">
            <summary>
            Gets or sets the date and time for the secondary provider endorsement details.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date and time.
            </returns>
            
            <remarks>
            The value defaults to the current year, month, and day.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.DischargeDateTime">
            <summary>
            Gets or sets the approximate date and time discharged.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the date and time.
            </returns> 
            
            <remarks>
            An approximate date must have a year and may also have the month, 
            day, or both.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.AdmittingDiagnosis">
            <summary>
            Gets or sets the admitting diagnosis for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the diagnosis.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the admitting diagnosis should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.PrincipalDiagnosis">
            <summary>
            Gets or sets the principal diagnosis for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the principal diagnosis.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the principal diagnosis should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.AdditionalDiagnosis">
            <summary>
            Gets or sets the additional diagnosis for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the additional diagnosis.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the additional diagnosis should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.PrincipalProcedurePhysician">
            <summary>
            Gets or sets the principal procedure physician contact information.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> instance representing the contact information.
            </returns>
            
            <remarks>
            Set the value to <b>null</b> if the principal procedure physician contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.PrincipalProcedure">
            <summary>
            Gets or sets the principal procedure for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the principal procedure.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the principal procedure should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DischargeSummary.AdditionalProcedure">
            <summary>
            Gets or sets the additional procedure for the discharge summary.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the additional 
            procedure.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the additional procedure should not be 
            stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DisplayValue">
            <summary>
            Represents the display value for a length, weight, or other type
            of measurement.
            </summary>
            
            <remarks>
            A display value differs from a value in that it is the value as entered
            by the user rather than the value converted to a base unit. The unit
            used can also reference the unit through the HealthVault dictionary code.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DisplayValue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DisplayValue"/> class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DisplayValue.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DisplayValue"/> class 
            with the specified value.
            </summary>
            
            <param name="value">
            The value as it was entered.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DisplayValue.#ctor(System.Double,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DisplayValue"/> class 
            with the specified value and units.
            </summary>
            
            <param name="value">
            The value as it was entered.
            </param>
            
            <param name="units">
            The units of the <paramref name="value"/> as it was
            entered.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="units"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DisplayValue.#ctor(System.Double,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DisplayValue"/> class with 
            the specified value, units, and units code.
            </summary>
            
            <param name="value">
            The value as it was entered.
            </param>
            
            <param name="units">
            The units of the <paramref name="value"/> as it was
            entered.
            </param>
            
            <param name="unitsCode">
            The Health Lexicon vocabulary code for the unit of measure.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="units"/> is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DisplayValue.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the display value from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the display value.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DisplayValue.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the display value to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the display value.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the display value to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DisplayValue.ToString">
            <summary>
            Retrieves a string representation of the display value.
            </summary>
            
            <returns>
            The value with the optional units.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode">
            <summary>
            Gets or sets the code used in the HealthVault Dictionary to represent
            the units.
            </summary>
            
            <value>
            A string representing the code.
            </value>
            
            <remarks>
            The code is used to abstract the units from the application so
            that the application can retrieve the appropriate value for the
            culture desired.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DisplayValue.Units">
            <summary>
            Gets or sets the units of measure as defined by the user.
            </summary>
            
            <value>
            A string representing the units.
            </value>
            
            <remarks>
            When the units are different from the base units for the particular
            type of measurement, the units should be set and if possible the
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> should also be set.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="Units"/> property is <b>null</b>, empty.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DisplayValue.Value">
            <summary>
            Gets or sets the display value.
            </summary>
            
            <value>
            A number representing the display value.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DoseValue">
            <summary>
            Represents a medicinal dose value.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoseValue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DoseValue"/> class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoseValue.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DoseValue"/> class with 
            the specified exact dosage.
            </summary>
            
            <param name="exactDosage">
            The exact dosage.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="exactDosage"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoseValue.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the dose value from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the dose value.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is null.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoseValue.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the dose to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the dose.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the dose to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is null or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is null.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoseValue.ToString">
            <summary>
            Gets a string representation of the dose value.
            </summary>
            
            <returns>
            A string representing the dose value.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DoseValue.Description">
            <summary>
            Gets or sets a description of the dosage.
            </summary>
            
            <remarks>
            If there is no description then the value may be set to null.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DoseValue.ExactDose">
            <summary>
            Gets or sets an exact value for the dosage.
            </summary>
            
            <value>
            A number representing the exact dosage value.
            </value>
            
            <remarks>
            If there is no exact value, then the value can be set to null.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DoseValue.MinDose">
            <summary>
            Gets or sets a minimum value for the dosage.
            </summary>
            
            <value>
            A number representing the minimum dosage value.
            </value>
            
            <remarks>
            If there is no minimum value, then the value can be set to null.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DoseValue.MaxDose">
            <summary>
            Gets or sets a maximum value for the dosage.
            </summary>
            
            <value>
            A number representing the maximum dosage value.
            </value>
            
            <remarks>
            If there is no maximum value, then the value can be set to null.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DoubleMeasurement">
            <summary>
            Represents a measurement of type double and display.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DoubleMeasurement"/> class using 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DoubleMeasurement"/> class 
            with the specified value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DoubleMeasurement"/> class 
            with the specified value and optional display value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
            <param name="displayValue">
            The display value of the measurement. This should contain the
            exact measurement as entered by the user even if it uses some
            other unit of measure. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the measurement from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the measurement to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the measurement to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleMeasurement.GetValueString(System.Double)">
            <summary>
            Retrieves a string representation of the measurement in the base units.
            </summary>
            
            <returns>
            The measurement as a string in the base units.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DoubleMeasurement.ValueElementName">
            <summary>
            Gets or sets the name of the element that defines the value for 
            the measurement.
            </summary>
            
            <returns>
            A string representing the element name.
            </returns>
            
            <remarks>
            The default value for the element name is "value" but should be
            overridden in derived classes to provide a specific element name
            where appropriate.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DoubleRange">
            <summary>
            Represents a data range based on the <see cref="T:System.Double"/> type.
            </summary>
            
            <remarks>
            A range consists of a minimum range value and a maximum range value of type
            <see cref="T:System.Double"/>
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Range`1">
            <summary>
            Represents a data range based on a generic type.
            </summary>
            
            <remarks>
            A range consists of a minimum range value and a maximum range value of the specific
            generic type.
            </remarks>
            
            <typeparam name="RangeType">
            The type of the minimum and maximum values for the range.
            </typeparam>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Range`1.#ctor">
            <summary>
            Creates a new instance of the Range class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Range`1.#ctor(`0,`0)">
            <summary>
            Constructs a new instance of the Range class with the 
            specified min and max range values.
            </summary>
            
            <param name="minRange">
            The minimum value for the range.
            </param>
            
            <param name="maxRange">
            The maximum value for the range.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="minRange"/> or <paramref name="maxRange"/> would cause the value to
            be "unset".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Range`1.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the range from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the range.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Range`1.ReadRangeValue(System.Xml.XPath.XPathNavigator)">
            <summary>
            Reads the value from the specified <see cref="T:System.Xml.XPath.XPathNavigator"/> as a 
            <typeparamref name="RangeType"/>.
            </summary>
            
            <param name="nav">
            The <see cref="T:System.Xml.XPath.XPathNavigator"/> to read the value from.
            </param>
            
            <returns>
            The value as a <typeparamref name="RangeType"/>.
            </returns>
            
            <remarks>
            Derived classes must override and read the value from the XML and convert it to the
            type for the range.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Range`1.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the range data to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the range data.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the range data to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Range`1.WriteRangeValue(System.String,`0,System.Xml.XmlWriter)">
            <summary>
            Writes the specified range value to the specified writer with the specified node name.
            </summary>
            
            <param name="nodeName">
            The name of the node to use when writing the value.
            </param>
            
            <param name="value">
            The value to be written.
            </param>
            
            <param name="writer">
            The writer to write the value element to.
            </param>
            
            <remarks>
            Derived classes must override to provide the implementation of writing the value to
            the XML.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Range`1.VerifyRangeValue(`0)">
            <summary>
            Verifies that the specified range value is an appropriate value for the range.
            </summary>
            
            <param name="value">
            The value to verify.
            </param>
            
            <remarks>
            Since both the maximum and minimum values for the range must be set, this method is used
            to verify that the value is not "unset". For example, the value is not <b>null</b> for
            a reference type. Derived classes should override and throw an 
            <see cref="T:System.ArgumentException"/> or appropriate derived exception if the 
            <paramref name="value"/> would cause the range value to be "unset".
            The default implementation does nothing.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> would cause the value to be "unset".
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Range`1.DefaultMinValue">
            <summary>
            Initializes the minimum range value to its default value.
            </summary>
            
            <returns>
            The default value for the minimum range value.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Range`1.DefaultMaxValue">
            <summary>
            Gets the maximum range value to its default value.
            </summary>
            
            <returns>
            The default value for the maximum range value.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Range`1.MinRange">
            <summary>
            Gets or sets the minimum value of the range.
            </summary>
            
            <value>
            A value of <typeparamref name="RangeType"/> that represents the minimum value of the range.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> would cause the value to be "unset".
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Range`1.MaxRange">
            <summary>
            Gets or sets the maximum value of the range.
            </summary>
            
            <value>
            A value of <typeparamref name="RangeType"/> that represents the maximum value of the range.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> would cause the value to be "unset".
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleRange.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DoubleRange"/> class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DoubleRange"/> class with the specified
            minimum and maximum range values.
            </summary>
            
            <param name="minRange">
            The minimum value for the range.
            </param>
            
            <param name="maxRange">
            The maximum value for the range.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleRange.ReadRangeValue(System.Xml.XPath.XPathNavigator)">
            <summary>
            Reads the value from the specified <see cref="T:System.Xml.XPath.XPathNavigator"/> as a 
            <typeparamref name="RangeType"/>.
            </summary>
            
            <param name="nav">
            The <see cref="T:System.Xml.XPath.XPathNavigator"/> to read the value from.
            </param>
            
            <returns>
            The value as a <typeparamref name="RangeType"/>.
            </returns>
            
            <remarks>
            Derived classes must override and read the value from the XML and convert it to the
            type for the range.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleRange.WriteRangeValue(System.String,System.Double,System.Xml.XmlWriter)">
            <summary>
            Writes the specified range value to the specified writer with the specified node name.
            </summary>
            
            <param name="nodeName">
            The name of the node to use when writing the value.
            </param>
            
            <param name="value">
            The value to be written.
            </param>
            
            <param name="writer">
            The writer to write the value element to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DoubleRange.ToString">
            <summary>
            Returns the range as a string.
            </summary>
            
            <returns>
            A string representation of the range.
            </returns>
            
            <remarks>
            This method is not locale aware.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DoubleRange.DefaultMinValue">
            <summary>
            Initializes the minimum range value to its default value.
            </summary>
            
            <returns>
            <see cref="F:System.Double.MinValue"/>
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DoubleRange.DefaultMaxValue">
            <summary>
            Gets the maximum range value to it's default value.
            </summary>
            
            <returns>
            <see cref="F:System.Double.MaxValue"/>
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.DurationValue">
            <summary>
            Represents a health record item type that encapsulates a duration of 
            time with a starting and optional ending date.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DurationValue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DurationValue"/> class with default 
            values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DurationValue.#ctor(Microsoft.Health.ItemTypes.ApproximateDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DurationValue"/> class with 
            the specified starting date.
            </summary>
            
            <param name="startDate">
            The starting date/time of the duration value.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="StartDate"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DurationValue.#ctor(Microsoft.Health.ItemTypes.ApproximateDateTime,Microsoft.Health.ItemTypes.ApproximateDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.DurationValue"/> class with 
            the specified starting and ending date.
            </summary>
            
            <param name="startDate">
            The start date/time of the duration value.
            </param>
            
            <param name="endDate">
            The end date/time of the duration value.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="StartDate"/> or <paramref name="EndDate"/> 
            parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DurationValue.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates this Person instance from the data in the XML.
            </summary>
            
            <param name="navigator">
            The XML containing the duration information.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a person node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DurationValue.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the duration value to the specified XmlWriter.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the duration value.
            </param>
            
            <param name="writer">
            The XmlWriter to write the duration value to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.DurationValue.StartDate"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.DurationValue.ToString">
            <summary>
            Gets a string representation of the duration value.
            </summary>
            
            <returns>
            A string representation of the duration value.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DurationValue.StartDate">
            <summary>
            Gets or sets the approximate date of the start of the duration.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> representing the start of the duration.
            </value>
            
            <remarks>
            An approximate date must have a year and can also have the month, 
            day, or both.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.DurationValue.EndDate">
            <summary>
            Gets or sets the approximate date of the end of the duration.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> representing the end of the duration.
            </value>
            
            <remarks>
            An approximate date must have a year and can also have the month, 
            day, or both.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Email">
            <summary>
            Represents an email address.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Email.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Email"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Email.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Email"/> class with the 
            specified email address.
            </summary>
            
            <param name="address">
            The email address.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="address"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Email.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Email"/> class with the 
            specified email address, description, and primary designation.
            </summary>
            
            <param name="address">
            The email address.
            </param>
            
            <param name="description">
            The description for the email address, such as personal or work.
            </param>
            
            <param name="isPrimary">
            <b>true</b> if this email address is the primary email address at which 
            to contact the person; otherwise, <b>false</b>.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="address"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Email.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the email information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Email.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the email address into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the email address.
            </param>
            
            <param name="writer">
            The XML writer into which the email address should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Email.Address"/> property has not been set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Email.Description">
            <summary>
            Gets or sets the description for the email address.
            </summary>
            
            <value>
            A string representing the description.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the description should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Email.IsPrimary">
            <summary>
            Gets or sets a value indicating whether the email address is the 
            primary address for the person.
            </summary>
            
            <value>
            <b>true</b> if this email address is primary; otherwise, <b>false</b>.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if this property should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Email.Address">
            <summary>
            Gets or sets the email address.
            </summary>
            
            <value>
            A string representing the email address.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only 
            whitespace during set.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Emotion">
            <summary>
            Represents a health record item type that encapsulates an emotion.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Emotion.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Emotion"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Emotion.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Emotion"/> class with the 
            specified date/time.
            </summary>
            
            <param name="when">
            The date/time when the emotion occurred.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Emotion.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Emotion.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Emotion"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the emotion data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a emotion node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Emotion.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the emotion data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the emotion data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Emotion.ToString">
            <summary>
            Gets a string representation of the emotion item.
            </summary>
            
            <returns>
            A string representation of the emotion item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Emotion.When">
            <summary>
            Gets or sets the date/time when the emotion occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Emotion.Mood">
            <summary>
            Gets or sets the mood of the person.
            </summary>
            
            <value>
            A value representing the mood.
            </value>
            
            <remarks>
            Set the value to <see cref="F:Microsoft.Health.ItemTypes.Mood.None"/> if 
            the mood should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Emotion.Stress">
            <summary>
            Gets or sets the stress level of the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.RelativeRating"/> value representing the stress level.
            </value>
            
            <remarks>
            Set the value to <see cref="F:Microsoft.Health.ItemTypes.RelativeRating.None"/> if the stress 
            level should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Emotion.Wellbeing">
            <summary>
            Gets or sets the wellbeing of the person.
            </summary>
            
            <value>
            A <see cref="P:Microsoft.Health.ItemTypes.Emotion.Wellbeing"/> value.
            </value>
            
            <remarks>
            Set the value to <see cref="F:Microsoft.Health.ItemTypes.Wellbeing.None"/> 
            if the wellbeing should not be stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.File">
            <summary>
            Represents information about a file.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.File.CreateFromFilePath(System.String,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a <see cref="T:Microsoft.Health.ItemTypes.File"/> item instance using the specified file path and content
            type.
            </summary>
            
            <param name="path">
            The path of the file to associate with this <see cref="T:Microsoft.Health.ItemTypes.File"/> instance.
            </param>
            
            <param name="contentType">
            The content type of the file. This is usually something like "image/jpg", "application/csv",
            or other mime type.
            </param>
            
            <returns>
            A new instance of the <see cref="T:Microsoft.Health.ItemTypes.File"/> health record item with data populated from the
            specified file path.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="path"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="contentType"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters. 
            </exception>
            
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive). 
            </exception>
            
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file. 
            </exception>
            
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specified a file that is read-only.
            -or- 
            This operation is not supported on the current platform.
            -or- 
            path specified a directory.
            -or- 
            The caller does not have the required permission. 
            </exception>
            
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="path"/> was not found. 
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> is in an invalid format. 
            </exception>
            
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.File.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.File"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.File.#ctor(System.String,System.Int64)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.File"/> class with the 
            specified name and size.
            </summary>
            
            <param name="name">
            The name of the file.
            </param>
            
            <param name="size">
            The file size in bytes.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="name"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="size"/> parameter is negative or zero.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.File.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.File.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.File"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the file data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a file node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.File.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the file data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the file data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.File.ToString">
            <summary>
            Gets a string representation of the file item.
            </summary>
            
            <returns>
            A string representation of the file item.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.File.SetContent(System.String,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Sets the content of the file instance using the specified file.
            </summary>
            
            <param name="path">
            The path of the file to associate with this <see cref="T:Microsoft.Health.ItemTypes.File"/> instance.
            </param>
            
            <param name="contentType">
            The content type of the file.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="path"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="contentType"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters. 
            </exception>
            
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive). 
            </exception>
            
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file. 
            </exception>
            
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specified a file that is read-only.
            -or- 
            This operation is not supported on the current platform.
            -or- 
            path specified a directory.
            -or- 
            The caller does not have the required permission. 
            </exception>
            
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="path"/> was not found. 
            </exception>
            
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> is in an invalid format. 
            </exception>
            
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.File.Name">
            <summary>
            Gets or sets the name of the file including the extension if
            available.
            </summary>
            
            <value>
            A string representing the file name.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b> or empty on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.File.Size">
            <summary>
            Gets or sets the file size.
            </summary>
            
            <value>
            An integer representing the file size.
            </value>
            
            <remarks>
            This property must be set before the item is created or updated.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.File.ContentType">
            <summary>
            Gets or sets the type of content contained in the file.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the file content type.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the content type should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.File.Content">
            <summary>
            Gets the content of the file item.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.File.ContentStream">
            <summary>
            Gets a stream to read the file contents.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.FlowMeasurement">
            <summary>
            Represents a flow of gas, liquid, etc. over time and a display value
            associated with the measurement.
            </summary>
            
            <remarks>
            In HealthVault, flow measurements have values and display values. 
            All values are stored in a base unit of liters per second (L/s). 
            An application can take a flow value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the flow value must be 
            converted to L/s to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.FlowMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.FlowMeasurement"/> class 
            with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.FlowMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.FlowMeasurement"/> class 
            with the specified value in liters per second.
            </summary>
            
            <param name="litersPerSecond">
            The flow in liters per second.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.FlowMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.FlowMeasurement"/> class with 
            the specified value in liters per second and optional display value.
            </summary>
            
            <param name="litersPerSecond">
            The flow in liters per second.
            </param>
            
            <param name="displayValue">
            The display value of the flow. This should contain the
            exact flow as entered by the user even if it uses some
            other unit of measure besides liters per second. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.FlowMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies the value is a legal flow value in liters/sec.
            </summary>
            
            <param name="value">
            The flow measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.FlowMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the flow from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the flow.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.FlowMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the flow to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the flow to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.FlowMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the flow in the base units.
            </summary>
            
            <returns>
            The flow as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Gender">
            <summary>
            Provides values representing a person's gender.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Gender.Unknown">
            <summary>
            The gender is unknown or has a value that is not understood by
            this client.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Gender.Male">
            <summary>
            The person is male.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Gender.Female">
            <summary>
            The person is female.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Goal">
            <summary>
            Represents a goal.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Goal.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Goal"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Goal.#ctor(Microsoft.Health.ItemTypes.ApproximateDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Goal"/> class with the specified 
            target date.
            </summary>
            
            <param name="targetDate">
            The approximate date which is the target completion date
            for the goal.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Goal.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the goal information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Goal.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the goal into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the goal.
            </param>
            
            <param name="writer">
            The XML writer into which the goal should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Goal.TargetDate">
            <summary>
            Gets or sets the date for achieving the goal.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> representing the date.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if this property should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Goal.CompletionDate">
            <summary>
            Gets or sets the date the goal was achieved.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> representing the date.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if this property should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Goal.Status">
            <summary>
            Gets or sets the status of the goal.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.GoalStatus"/> value.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if this property should not be stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.GoalStatus">
            <summary>
            Provides values representing the status of a goal.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.GoalStatus.Unknown">
            <summary>
            The goal status is unknown or cannot be understood by this client.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.GoalStatus.Active">
            <summary>
            The goal is being actively pursued.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.GoalStatus.Achieved">
            <summary>
            The goal has been achieved.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.GoalStatus.Abandoned">
            <summary>
            The goal has been abandoned and is no longer being pursued.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.HbA1C">
            <summary>
            Represents a health record item type that encapsulates a test that 
            measures the amount of glycosylated hemoglobin in the blood.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HbA1C.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HbA1C"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HbA1C.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HbA1C"/> class with the 
            specified date and amount.
            </summary>
            
            <param name="when">
            The date/time when the HbA1C was taken.
            </param>
            
            <param name="value">
            The amount of glycosylated hemoglobin in the blood as a percentage.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than zero or greater than one.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.HbA1C.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HbA1C.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this HbA1C instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the HbA1C data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an HbA1C node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HbA1C.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the HbA1C data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the HbA1C data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HbA1C.ToString">
            <summary>
            Gets a string representation of the HbA1C value.
            </summary>
            
            <returns>
            A string representing the HbA1C value.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HbA1C.When">
            <summary>
            Gets or sets the date/time when the aerobic profile was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The value defaults to the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HbA1C.Value">
            <summary>
            Gets or sets the amount of glycosylated hemoglobin in the blood.
            </summary>
            
            <value>
            A number representing the amount.
            </value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0.0 or greater than 1.0.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HbA1C.AssayMethod">
            <summary>
            Gets or sets the assay method.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the method.
            </value>
            
            <remarks>
            The preferred vocabulary for this value is "HbA1C-assay-method".
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HbA1C.DeviceId">
            <summary>
            Gets or sets the ID of the device that took the reading.
            </summary>
            
            <value>
            A string representing the ID.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.HealthcareProxy">
            <summary>
            Represents a health record item type that encapsulates a healthcare proxy.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthcareProxy.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthcareProxy"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item isn't added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthcareProxy.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthcareProxy"/> class 
            with the specified date and time.
            </summary>
            
            <param name="when">
            The date/time for the healthcare proxy.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.HealthcareProxy.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthcareProxy.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this healthcare proxy instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the healthcare proxy data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a healthcare proxy node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthcareProxy.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the healthcare proxy data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the healthcare proxy data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.HealthcareProxy.When"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthcareProxy.ToString">
            <summary>
            Gets a string representation of the healthcare proxy item.
            </summary>
            
            <returns>
            A string representation of the healthcare proxy item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthcareProxy.When">
            <summary>
            Gets or sets the date/time for the medical equipment.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthcareProxy.Proxy">
            <summary>
            Gets or sets the proxy contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the proxy contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthcareProxy.Alternate">
            <summary>
            Gets or sets the alternate contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the alternate contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthcareProxy.PrimaryWitness">
            <summary>
            Gets or sets the primary witness contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the primary witness contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthcareProxy.SecondaryWitness">
            <summary>
            Gets or sets the secondary witness contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the secondary witness contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthcareProxy.Content">
            <summary>
            Gets or sets the content of what is being proxied.
            </summary>
            
            <value>
            A string representing the content.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the content should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.HeartRateZone">
            <summary>
            Represents a target heart rate zone.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZone.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HeartRateZone"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZone.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HeartRateZone"/> class with 
            the specified zone name and absolute heart rate boundaries.
            </summary>
            
            <param name="name">
            The name of the zone.
            </param>
            
            <param name="lowerBoundaryHeartRate">
            The heart rate in Beats Per Minute (BPM) for the lower boundary
            of the zone.
            </param>
            
            <param name="upperBoundaryHeartRate">
            The heart rate in Beats Per Minute (BPM) for the upper boundary
            of the zone.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZone.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HeartRateZone"/> class with 
            the specified relative heart rate boundaries.
            </summary>
            
            <param name="name">
            The name of the zone.
            </param>
            
            <param name="lowerBoundaryPercentage">
            The heart rate as a percentage of max heart rate for the lower 
            boundary of the zone.
            </param>
            
            <param name="upperBoundaryPercentage">
            The heart rate as a percentage of max heart rate for the upper 
            boundary of the zone.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZone.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the heart rate zone information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZone.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the heart rate zone into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the heart rate zone.
            </param>
            
            <param name="writer">
            The XML writer into which the heart rate zone should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="nodeName"/> is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If the <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeLowerBoundary"/>,  
            <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteLowerBoundary"/>, 
            or <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeUpperBoundary"/>, or
            <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteUpperBoundary"/> property is not set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HeartRateZone.Name">
            <summary>
            Gets or sets the name for the heart rate zone.
            </summary>
            
            <value>
            A string representing the name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the name should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeLowerBoundary">
            <summary>
            Gets or sets the lower boundary of the heart rate zone as a
            percentage of the person's maximum heart rate.
            </summary>
            
            <value>
            A number representing the boundary.
            </value>
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeLowerBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteLowerBoundary"/> can be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteLowerBoundary"/> is stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteLowerBoundary">
            <summary>
            Gets or sets the lower boundary of the heart rate zone as a
            specific heart rate.
            </summary>
            
            <value>
            An integer representing the boundary.
            </value>
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeLowerBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteLowerBoundary"/> can be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteLowerBoundary"/> is stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeUpperBoundary">
            <summary>
            Gets or sets the upper boundary of the heart rate zone as a
            percentage of the person's maximum heart rate.
            </summary>
            
            <value>
            A number representing the boundary.
            </value>
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeUpperBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteUpperBoundary"/> can be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteUpperBoundary"/> is stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteUpperBoundary">
            <summary>
            Gets or sets the upper boundary of the heart rate zone as a
            specific heart rate.
            </summary>
            
            <value>
            An integer representing the boundary.
            </value>
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.RelativeUpperBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteUpperBoundary"/> can be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.HeartRateZone.AbsoluteUpperBoundary"/> is stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.HeartRateZoneGroup">
            <summary>
            Represents a grouping of heart rate zones by name.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZoneGroup.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HeartRateZoneGroup"/> class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZoneGroup.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HeartRateZoneGroup"/> class 
            with the specified name.
            </summary>
            
            <param name="name">
            The name of the heart rate zone grouping.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZoneGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.HeartRateZone})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HeartRateZoneGroup"/> class 
            with the specified name and target zones.
            </summary>
            
            <param name="name">
            The name of the heart rate zone grouping.
            </param>
            
            <param name="targetZones">
            The target heart rate zones for the grouping.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZoneGroup.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the heart rate zone group information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HeartRateZoneGroup.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the heart rate zone group into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the heart rate zone group.
            </param>
            
            <param name="writer">
            The XML writer into which the heart rate zone group should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.HeartRateZoneGroup.TargetZones"/> property contains no zones.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HeartRateZoneGroup.Name">
            <summary>
            Gets or sets the name for the heart rate zone group.
            </summary>
            
            <value>
            A string representing the name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the name should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HeartRateZoneGroup.TargetZones">
            <summary>
            Gets the target heart rate zones for the zone group.
            </summary>
            
            <value>
            A collection of zones.
            </value>
            
            <remarks>
            To add a zone to the group, call Add on the returned collection.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Height">
            <summary>
            Represents a health record item type that encapsulates a person's height.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Height.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Height"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Height.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Height"/> class with the
            specified height in meters.
            </summary>
            
            <param name="meters">
            The height in meters.
            </param>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Height.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.Length)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Height"/> class with the
            specified date and time of measurement and the height in meters.
            </summary>
            
            <param name="when">
            The date/time when the height measurement occurred.
            </param>
            
            <param name="height">
            The person's height.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> or <paramref name="height"/> parameter is 
            <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Height.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Height"/> class with the
            specified height in meters and display value.
            </summary>
            
            <param name="meters">
            The height in meters.
            </param>
            
            <param name="displayValue">
            The height value as entered by the user. Typically, the display value is 
            used when the user-entered height units are not in meters.
            </param>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Height.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Height.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Height"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the height data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a height node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Height.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the height data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the height data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.Height.Value"/> has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Height.ToString">
            <summary>
            Gets a string representation of the height item.
            </summary>
            
            <returns>
            A string representation of the height item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Height.When">
            <summary>
            Gets or sets the date/time when the height measurement
            was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Height.Value">
            <summary>
            Gets or sets the person's height.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.Length"/> value representing the person's height.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> during set.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.InhalerPurpose">
            <summary>
            Provides values representing the intended purpose for the inhaler.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.InhalerPurpose.None">
            <summary>
            Purpose is not known.
            </summary>
            
            <remarks>
            This value causes an exception to be thrown.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.InhalerPurpose.Control">
            <summary>
            The intended purpose is to control the condition.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.InhalerPurpose.Rescue">
            <summary>
            The intended purpose is to meet an emergency condition.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.InhalerPurpose.Combination">
            <summary>
            The intended purpose combines both control and rescue.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.InsulinInjection">
            <summary>
            Represents a health record item type that encapsulates an insulin injection.
            </summary>
            
            <remarks>
            This class represents any injection unit used to dispense insulin. 
            The injector might or might not have a device component.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.InsulinInjection"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjection.#ctor(Microsoft.Health.ItemTypes.CodableValue,Microsoft.Health.ItemTypes.InsulinInjectionMeasurement)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.InsulinInjection"/> class 
            with the specified insulin type and amount.
            </summary>
            
            <param name="insulinType">
            The type of insulin being used.
            </param>
            
            <param name="amount">
            The amount of insulin.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="amount"/> or <paramref name="insulinType"/> parameter 
            is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.InsulinInjection.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjection.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.InsulinInjection"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the insulin injection data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an insulin-injection node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the insulin injection data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the insulin injection data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.InsulinInjection.InsulinType"/> property is <b>null</b>, or the 
            <see cref="P:Microsoft.Health.ItemTypes.InsulinInjection.Amount"/> property is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjection.ToString">
            <summary>
            Gets a string representation of the insulin injection item.
            </summary>
            
            <returns>
            A string representation of the insulin injection item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.InsulinInjection.InsulinType">
            <summary>
            Gets or sets the type of insulin being used in the injector.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the type.
            </value>
            
            <remarks>
            The preferred vocabulary is "insulin-types".
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.InsulinInjection.Amount">
            <summary>
            Gets or sets the amount of insulin.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement"/> representing 
            the amount.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The value is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.InsulinInjection.DeviceId">
            <summary>
            Gets or sets the identifier for the device.
            </summary>
            
            <value>
            A string representing the identifier.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the device identifier should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement">
            <summary>
            Represents an insulin injection measurement.
            </summary>
            
            <remarks>
            In HealthVault, insulin injection readings have values and display values. 
            All values are stored in a base unit of IE. An application can 
            take an insulin injection value using any scale the application chooses and 
            can store the user-entered value as the display value, but the insulin
            injection value must be converted to IE to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement"/> 
            class with the specified value in IE (1/100mL).
            </summary>
            
            <param name="iE">
            The insulin injection measurement in 1/100mL.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement"/> 
            class with the specified value in IE (1/100mL) and display value.
            </summary>
            
            <param name="iE">
            The insulin injection measurement in IE (1/100mL).
            </param>
            
            <param name="displayValue">
            The display value of the insulin injection measurement. This should 
            contain the exact measurement as entered by the user even if it 
            uses some other unit of measure besides IE. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal insulin injection measurement in 
            IE (1/100mL).
            </summary>
            
            <param name="value">
            The insulin injection measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the insulin injection from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the insulin injection.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the insulin injection to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the insulin injection to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the insulin injection in the base 
            units.
            </summary>
            
            <returns>
            The insulin injection as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.InsulinInjectionUse">
            <summary>
            Represents a health record item type that encapsulates an insulin 
            injection use.
            </summary>
            
            <remarks>
            The use of an insulin injection unit might require more than one dose
            based on the prescription.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionUse.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionUse"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionUse.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.CodableValue,Microsoft.Health.ItemTypes.InsulinInjectionMeasurement)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionUse"/> class 
            with the specified date/time, insulin type, and amount.
            </summary>
            
            <param name="when">
            The date/time when the injection was administrated.
            </param>
            
            <param name="insulinType">
            The type of insulin being used.
            </param>
            
            <param name="amount">
            The amount of insulin.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/>,
            <paramref name="amount"/>, or <paramref name="insulinType"/> parameter 
            is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.InsulinInjectionUse.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionUse.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionUse"/> instance from the 
            data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the insulin injection use data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            an insulin-injection-use node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionUse.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the insulin injection use data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the insulin injection use data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.InsulinInjectionUse.InsulinType"/> or <see cref="P:Microsoft.Health.ItemTypes.InsulinInjectionUse.When"/> property is <b>null</b>, or
            the <see cref="P:Microsoft.Health.ItemTypes.InsulinInjectionUse.Amount"/> property is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.InsulinInjectionUse.ToString">
            <summary>
            Gets a string representation of the insulin injection use item.
            </summary>
            
            <returns>
            A string representation of the insulin injection use item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.InsulinInjectionUse.When">
            <summary>
            Gets or sets the date/time when the insulin injection use occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.InsulinInjectionUse.InsulinType">
            <summary>
            Gets or sets the type of insulin being used in the injector.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the type.
            </value>
            
            <remarks>
            The preferred vocabulary is "insulin-types".
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.InsulinInjectionUse.Amount">
            <summary>
            Gets or sets the amount of insulin.
            </summary>
            
            <value>
            A value of <see cref="T:Microsoft.Health.ItemTypes.InsulinInjectionMeasurement"/>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.InsulinInjectionUse.DeviceId">
            <summary>
            Gets or sets the identifier for the device.
            </summary>
            
            <value>
            A string representing the device identifier.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the device identifier should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Int32Measurement">
            <summary>
            Represents a measurement of type int and display.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Int32Measurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Int32Measurement"/> class 
            with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Int32Measurement.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Int32Measurement"/> class 
            with the specified value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Int32Measurement.#ctor(System.Int32,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Int32Measurement"/> class 
            with the specified value and optional display value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
            <param name="displayValue">
            The display value of the measurement. This should contain the
            exact measurement as entered by the user even if it uses some
            other unit of measure. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Int32Measurement.AssertMeasurementValue(System.Int32)">
            <summary>
            Verifies that the value is a legal value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Int32Measurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the measurement from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Int32Measurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the measurement to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the measurement to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Int32Measurement.GetValueString(System.Int32)">
            <summary>
            Retrieves a string representation of the measurement in the base units.
            </summary>
            
            <returns>
            The measurement as a string in the base units.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Int32Measurement.ValueElementName">
            <summary>
            Gets or sets the name of the element that defines the value for the measurement.
            </summary>
            
            <returns>
            A string representing the element name.
            </returns>
            
            <remarks>
            The default value for the element name is "value" but should be
            overridden in derived classes to provide a specific element name
            where appropriate.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.LabResultType">
            <summary>
            Represents a clinical value within lab result.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabResultType.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.Health.ItemTypes.LabResultType"/> class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabResultType.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the lab result type from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the lab result type.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabResultType.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the lab result type data to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the lab result type.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the lab result type to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabResultType.ToString">
            <summary>
            Gets a string representation of the lab result type.
            </summary>
            
            <returns>
            A string representing the lab result type.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabResultType.Value">
            <summary>
            Gets or sets the value for the lab result.
            </summary>
            
            <value>
            A <see cref="T:System.Double"/> representing the value of the lab result, or <b>null</b> if
            no lab result is available.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabResultType.Unit">
            <summary>
            Gets or sets the unit of measure for the <see cref="P:Microsoft.Health.ItemTypes.LabResultType.Value"/>.
            </summary>
            
            <remarks>
            The unit of measure may defined by the HealthVault dictionary or the 
            <see cref="P:Microsoft.Health.ItemTypes.CodableValue.Text"/> property may be set to any unit of measure.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabResultType.ReferenceRange">
            <summary>
            Gets or sets the reference range for the lab result type.
            </summary>
            
            <value>
            The "normal" range of values for this lab result type or <b>null</b> if the reference
            range is not available.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabResultType.ToxicRange">
            <summary>
            Gets or sets the toxic range for the lab result type.
            </summary>
            
            <value>
            The toxic range of values for this lab result type or <b>null</b> if the toxic
            range is not available.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabResultType.TextValue">
            <summary>
            Gets or set the text representation of the value.
            </summary>
            
            <value>
            A string representation of the <see cref="P:Microsoft.Health.ItemTypes.LabResultType.Value"/> or <b>null</b> if the text value is
            not available.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabResultType.Flags">
            <summary>
            Gets a collection of the flags associated with the lab result type.
            </summary>
            
            <value>
            The flags for the lab result type are generally values like "normal", "critical", "high",
            "low", etc. which are defined by the "lab-result-flag" HealthVault vocabulary.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.LabTestType">
            <summary>
            Represents a lab test component, including the lab result value.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabTestType.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.Health.ItemTypes.LabTestType"/> class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabTestType.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.Health.ItemTypes.LabTestType"/> with the specified test
            date.
            </summary>
            
            <param name="when">
            The date and time when the laboratory test was performed.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabTestType.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the lab test type from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the lab test type.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabTestType.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the lab test type data to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the lab test type.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the lab test type to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LabTestType.ToString">
            <summary>
            Gets a string representation of the lab test type.
            </summary>
            
            <returns>
            A string representing the lab test type.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.When">
            <summary>
            Gets or sets the date when the lab test was conducted.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date and time. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.Name">
            <summary>
            Gets or sets the name of the test.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.Substance">
            <summary>
            Gets or sets the substance that was tested.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.CollectionMethod">
            <summary>
            Gets or sets the method used to collect the substance.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.TestAbbreviation">
            <summary>
            Gets or sets the abbreviation for the test.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.Description">
            <summary>
            Gets or sets the description for the test.
            </summary>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.Code">
            <summary>
            Gets a collection of the clinical code(s) used for the test.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.Result">
            <summary>
            Gets or sets the result of the lab test.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LabTestType.Status">
            <summary>
            Gets or sets the status of the lab results.
            </summary>
            
            <value>
            A CodableValue representing the status of the lab results. For example, "completed" or
            "pending". These values can be found in the "lab-results-status" HealthVault vocabulary.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Language">
            <summary>
            Represents the language that a person speaks.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Language.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Language"/> class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Language.#ctor(Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Language"/> class with 
            the specified spoken language.
            </summary>
            
            <param name="spokenLanguage">
            The spoken language.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Language.#ctor(Microsoft.Health.ItemTypes.CodableValue,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Language"/> class with 
            the specified spoken language and primary designator.
            </summary>
            
            <param name="spokenLanguage">
            The spoken language.
            </param>
            
            <param name="isPrimary">
            <b>true</b> if <paramref name="spokenLanguage"/> is the primary 
            language for the person; otherwise, <b>false</b>.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Language.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the language from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the language.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Language.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the language to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the language.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the language to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Language.SpokenLanguage">
            <summary>
            Gets or sets the spoken language.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the language.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Language.IsPrimary">
            <summary>
            Gets or sets a value indicating whether the language is the 
            person's primary language.
            </summary>
            
            <value>
            <b>true</b> if the language is the person's primary language; 
            otherwise, <b>false</b>. The default is <b>true</b>.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Length">
            <summary>
            Represents a length value and display.
            </summary>
            
            <remarks>
            In HealthVault, lengths have values and display values. All values are
            stored in a base unit of meters. An application can take a length
            value using any scale the application chooses and can store the 
            user-entered value as the display value, but the length value must be 
            converted to meters to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Length.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Length"/> class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Length.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Length"/> class with the 
            specified value in meters.
            </summary>
            
            <param name="meters">
            The length in meters.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Length.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Length"/> class with the 
            specified value in meters and optional display value.
            </summary>
            
            <param name="meters">
            The length in meters.
            </param>
            
            <param name="displayValue">
            The display value of the length. This should contain the
            exact length as entered by the user even if it uses some
            other unit of measure besides meters. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Length.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal length value in meters.
            </summary>
            
            <param name="value">
            The length measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Length.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the length from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the length.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Length.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the length to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the length to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Length.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the length in the base units.
            </summary>
            
            <returns>
            The length as a string in the base units.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Length.Meters">
            <summary>
            Gets or sets the value of the length in meters.
            </summary>
            
            <value>
            A number representing the length.
            </value>
            
            <remarks>
            The value must be in meters. The <see cref="T:Microsoft.Health.ItemTypes.DisplayValue"/> can
            be used to store the user-entered value in a scale other than
            metric.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.LifeGoal">
            <summary>
            Represents a health record item type that encapsulates a life goal.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LifeGoal.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.LifeGoal"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LifeGoal.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.LifeGoal"/> class with the 
            specified description.
            </summary>
            
            <param name="description">
            The description that defines the life goal.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="description"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.LifeGoal.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LifeGoal.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.LifeGoal"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the life goal data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a life-goal node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LifeGoal.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the life goal data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the life goal data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.LifeGoal.Description"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.LifeGoal.ToString">
            <summary>
            Gets a string representation of the life goal.
            </summary>
            
            <returns>
            A string representing the life goal.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LifeGoal.Description">
            <summary>
            Gets or sets the description of the goal.
            </summary>
            
            <value>
            A string representing the goal description.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only 
            whitespace during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.LifeGoal.Goal">
            <summary>
            Gets or sets the goal information.
            </summary>
            
            <value>
            A <see cref="P:Microsoft.Health.ItemTypes.LifeGoal.Goal"/> value containing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the goal information should not be stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Link">
            <summary>
            Represents information about a link to a URL.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Link.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Link"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Link.#ctor(System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Link"/> class with the 
            specified URL.
            </summary>
            
            <param name="url">
            The URL of the link.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="url"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Link.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Link.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Link"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the link data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a link node.
            </exception>
            
            <exception cref="T:System.UriFormatException">
            The url element in the XML is not properly formatted.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Link.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the file data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the link data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Link.Url"/> property is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Link.ToString">
            <summary>
            Gets a string representation of the link.
            </summary>
            
            <returns>
            A string representation of the link.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Link.Url">
            <summary>
            Gets or sets the URL of the link.
            </summary>
            
            <value>
            A <see cref="T:System.Uri"/>.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Link.Title">
            <summary>
            Gets or sets the link title.
            </summary>
            
            <value>
            A string representing the link title.
            </value>
            
            <remarks>
            The link title is a friendly name for the link.<br/>
            <br/>
            This property must be set before the item is created or updated.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Link.DisplayText">
            <summary>
            Gets the display text for the link.
            </summary>
            
            <value>
            A string representing the link display text.
            </value>
            
            <remarks>
            If the <see cref="P:Microsoft.Health.ItemTypes.Link.Title"/> property is set, its value is returned.
            If not, the <see cref="P:Microsoft.Health.ItemTypes.Link.Url"/> value is returned.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.MicrobiologyLabResults">
            <summary>
            Represents a health record item type that encapsulates microbiology laboratory results.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.MicrobiologyLabResults.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.MicrobiologyLabResults"/> class 
            with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.MicrobiologyLabResults.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.MicrobiologyLabResults"/> class 
            with the specified date.
            </summary>
            
            <param name="when">
            The date/time for the microbiology laboratory results.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.MicrobiologyLabResults.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.MicrobiologyLabResults.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this microbiology laboratory results instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the microbiology laboratory results data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a laboratory results node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.MicrobiologyLabResults.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the microbiology laboratory results data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the microbiology laboratory results data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.When"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.MicrobiologyLabResults.ToString">
            <summary>
            Gets a string representation of the microbiology lab results.
            </summary>
            
            <returns>
            A string representing the microbiology lab results.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.When">
            <summary>
            Gets or sets the date/time when the microbiology laboratory results occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.LabTests">
            <summary>
            Gets a collection of laboratory tests.
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.SensitivityAgent">
            <summary>
            Gets or sets the sensitivity agent.
            </summary>
            
            <remarks>
            This property is optional and may be set to <b>null</b> if the sensitivity agent
            is not available.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.SensitivityValue">
            <summary>
            Gets or sets the sensitivity value.
            </summary>
            
            <remarks>
            This property is optional and may be set to <b>null</b> if the sensitivity value
            is not available.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.SensitivityInterpretation">
            <summary>
            Gets or sets the sensitivity interpretation.
            </summary>
            
            <remarks>
            This property is optional and may be set to <b>null</b> if the sensitivity 
            interpretation is not available.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.SpecimenType">
            <summary>
            Gets or sets the specimen type.
            </summary>
            
            <remarks>
            This property is optional and may be set to <b>null</b> if the specimen type
            is not available.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.OrganismName">
            <summary>
            Gets or sets the organism name.
            </summary>
            
            <remarks>
            This property is optional and may be set to <b>null</b> if the organism name
            is not available.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.MicrobiologyLabResults.OrganismComment">
            <summary>
            Gets or sets the organism comment.
            </summary>
            
            <remarks>
            This property is optional and may be set to <b>null</b> if the organism comment
            is not available.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Mood">
            <summary>
            Provides values describing the mood component of an emotional state.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Mood.None">
            <summary>
            The person's mood is unknown.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Mood.Depressed">
            <summary>
            The person is depressed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Mood.Sad">
            <summary>
            The person is sad.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Mood.Neutral">
            <summary>
            The person's mood is neutral.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Mood.Happy">
            <summary>
            The person is happy.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Mood.Elated">
            <summary>
            The person is elated.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Name">
            <summary>
            Represents a person's name.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Name.#ctor">
            <summary>
            Creates a new instance of the  <see cref="T:Microsoft.Health.ItemTypes.Name"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Name.#ctor(System.String)">
            <summary>
            Creates a new instance of the  <see cref="T:Microsoft.Health.ItemTypes.Name"/> class with the specified full name.
            </summary>
            
            <param name="fullName">
            The full name.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="fullName"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Name.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the  <see cref="T:Microsoft.Health.ItemTypes.Name"/> class with the 
            specified first, middle, and last name.
            </summary>
            
            <param name="fullName">
            The full name.
            </param>
            
            <param name="first">
            The first name (given name).
            </param>
            
            <param name="middle">
            The middle name.
            </param>
            
            <param name="last">
            The last name (surname).
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="fullName"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Name.#ctor(System.String,System.String,System.String,System.String,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the  <see cref="T:Microsoft.Health.ItemTypes.Name"/> class with the 
            specified first, middle, and last name and suffix.
            </summary>
            
            <param name="fullName">
            The full name.
            </param>
            
            <param name="first">
            The first name (given name).
            </param>
            
            <param name="middle">
            The middle name.
            </param>
            
            <param name="last">
            The last name (surname).
            </param>
            
            <param name="suffix">
            The name suffix.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="fullName"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Name.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the name information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Name.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the name into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the name.
            </param>
            
            <param name="writer">
            The XML writer into which the name should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Name.Full"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Name.ToString">
            <summary>
            Gets a string representation of the name.
            </summary>
            
            <returns>
            A string representation of the name.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Name.Full">
            <summary>
            Gets or sets the full name.
            </summary>
            
            <value>
            A string representing the name.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b> or empty when setting.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Name.Title">
            <summary>
            Gets or sets the person's title.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the title.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the title should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Name.First">
            <summary>
            Gets or sets the person's first name.
            </summary>
            
            <value>
            A string representing the first name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the first name should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Name.Middle">
            <summary>
            Gets or sets the person's middle name.
            </summary>
            
            <value>
            A string representing the middle name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the middle name should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Name.Last">
            <summary>
            Gets or sets the person's last name.
            </summary>
            
            <value>
            A string representing the last name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the last name should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Name.Suffix">
            <summary>
            Gets or sets the person's suffix.
            </summary>
            
            <value>
            A string representing the suffix.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the suffix should not be stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Normalcy">
            <summary>
            Indicates how a value compares to normal values of the same type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Normalcy.Unknown">
            <summary>
            The server returned a value that is unknown to this client.
            </summary>
            
            <remarks>
            This value can occur when an update to the server has been made
            to add a new value but the client has not been updated. All data
            will persist correctly but may not be programmatically accessible.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Normalcy.WellBelowNormal">
            <summary>
            The value is well below the norm when compared to values of 
            the same type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Normalcy.BelowNormal">
            <summary>
            The value is below the norm when compared to values of 
            the same type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Normalcy.Normal">
            <summary>
            The value is normal when compared to values of 
            the same type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Normalcy.AboveNormal">
            <summary>
            The value is above the norm when compared to values of 
            the same type.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Normalcy.WellAboveNormal">
            <summary>
            The value is well above the norm when compared to values of 
            the same type.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Occurrence">
            <summary>
            Represents an occurrence of an event, such as an activity,
            period of awakening during sleep, and so on.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Occurrence.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Occurrence"/> class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Occurrence.#ctor(Microsoft.Health.ItemTypes.ApproximateTime,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Occurrence"/> class with 
            the specified approximate time and duration.
            </summary>
            
            <param name="when">
            The approximate time for the occurrence.
            </param>
            
            <param name="minutes">
            The duration of the occurrence in minutes.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="minutes"/> parameter is negative.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Occurrence.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the occurrence information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Occurrence.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the occurrence into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the occurrence.
            </param>
            
            <param name="writer">
            The XML writer into which the occurrence should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Occurrence.When"/> property is <b>null</b>, or the <see cref="P:Microsoft.Health.ItemTypes.Occurrence.Minutes"/> 
            property is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Occurrence.When">
            <summary>
            Gets or sets the time of the occurrence.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> value representing the 
            time of the occurrence.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Occurrence.Minutes">
            <summary>
            Gets or sets the duration of the occurrence in minutes.
            </summary>
            
            <value>
            An integer representing the duration.
            </value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.PaceMeasurement">
            <summary>
            Represents a pace measurement and display.
            </summary>
            
            <remarks>
            In HealthVault, pace measurements have values and display values. 
            All values are stored in a base unit of seconds per 100 meters. 
            An application can take a pace value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the pace value must be converted to seconds per 100 meters to be 
            stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PaceMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PaceMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PaceMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PaceMeasurement"/> 
            class with the specified value in seconds per 100 meters.
            </summary>
            
            <param name="secondsPerHundredMeters">
            The pace in seconds per 100 meters.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PaceMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PaceMeasurement"/> 
            class with the specified value in seconds per 100 meters and 
            optional display value.
            </summary>
            
            <param name="secondsPerHundredMeters">
            The pace in seconds per 100 meters.
            </param>
            
            <param name="displayValue">
            The display value of the pace. This should contain the
            exact pace as entered by the user even if it uses some
            other unit of measure besides seconds per 100 meters. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PaceMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal pace value.
            </summary>
            
            <param name="value">
            The pace measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PaceMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the pace from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the pace.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PaceMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the pace to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the pace to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PaceMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the pace in the base units.
            </summary>
            
            <returns>
            The pace as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.PasswordProtectedPackage">
            <summary>
            Provides metadata about the encryption algorithm and parameters used to 
            protect some data with a password.
            </summary>
            
            <remarks>
            The <see cref="T:Microsoft.Health.ItemTypes.PasswordProtectedPackage"/> item type defines the metadata for the
            encryption algorithm used to protect data with a password. The 
            application should generate a password (or take it from the user) and
            encrypt the desired data. This data should be set in a <see cref="T:Microsoft.Health.Blob"/> created off the
            <see cref="T:Microsoft.Health.BlobStore"/> retrieved from the 
            <see cref="M:Microsoft.Health.HealthRecordItem.GetBlobStore(Microsoft.Health.HealthRecordAccessor)"/>.
            The properties of the Blob should be set with the parameters required 
            to decrypt the data. These parameters are application dependant but 
            should adhere to standard practices in dealing with PKCS5v2 data.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PasswordProtectedPackage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PasswordProtectedPackage"/> class 
            with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PasswordProtectedPackage.#ctor(Microsoft.Health.ItemTypes.PasswordProtectAlgorithm,System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PasswordProtectedPackage"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="algorithm">
            The name of the algorithm used to protect the data.
            </param>
            
            <param name="salt">
            A string representing the encoding of the bytes that were used as
            the salt when protecting the data.
            </param>
            
            <param name="keyLength">
            The number of bits used by the algorithm.
            </param>
            
            <remarks>
            In general, the salt is a series of bytes encoded in an 
            application-dependent way. The length of the salt must match the 
            algorithm. It is recommended that the salt encoding be base64.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The <paramref name="salt"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="keyLength"/> parameter is negative or zero.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.PasswordProtectedPackage.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PasswordProtectedPackage.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this PasswordProtectedPackage instance from the data 
            in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the file data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in the <paramref name="typeSpecificXml"/> 
            parameter is not a file node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PasswordProtectedPackage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the file data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the password protected package to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PasswordProtectedPackage.ToString">
            <summary>
            Gets a string representation of the password protected package definition.
            </summary>
            
            <returns>
            A string representation of the password protected package.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PasswordProtectedPackage.PasswordProtectAlgorithm">
            <summary>
            Gets or sets the algorithm used to encrypt the package.
            </summary>
            
            <value>
            An instance of <see cref="P:Microsoft.Health.ItemTypes.PasswordProtectedPackage.PasswordProtectAlgorithm"/> 
            representing the algorithm.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PasswordProtectedPackage.Salt">
            <summary>
            Gets or sets the salt used when encrypting the package.
            </summary>
            
            <value>
            A string representing the salt.
            </value>
            
            <remarks>
            In general, the salt is a series of bytes encoded in an 
            application-dependent way. The length of the salt must match the 
            algorithm. It is recommended that the salt encoding be base64.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only
            whitespace on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PasswordProtectedPackage.HashIterations">
            <summary>
            Gets or sets the number of hash iterations taken when protecting
            the package.
            </summary>
            
            <value>
            An integer representing the number of iterations. The default value 
            is 20000 iterations.
            </value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PasswordProtectedPackage.KeyLength">
            <summary>
            Gets or sets the key length in bits.
            </summary>
            
            <value>
            An integer representing the key length.
            </value>
            
            <remarks>
            The value should match that of the algorithm, for example, 168 bits
            for 3DES and 256 bits for AES256.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than one.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.PasswordProtectAlgorithm">
            <summary>
            Represents the algorithm used to protect a package of data with a password.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.PasswordProtectAlgorithm.Unknown">
            <summary>
            The algorithm name returned from the server was not understood
            by this client.
            </summary>
            
            <remarks>
            This can happen if new algorithms are supported by the server but
            the client has not been updated.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.PasswordProtectAlgorithm.None">
            <summary>
            No encryption was used to protect the package.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.PasswordProtectAlgorithm.HmacSha13Des">
            <summary>
            The package is encrypted using the HMAC-SHA1 pseudo-random and 
            3DES encryption functions.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.PasswordProtectAlgorithm.HmacSha256Aes256">
            <summary>
            The package is encrypted using the HMAC-SHA256 and AES256 
            encryption functions.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Payer">
            <summary>
            Represents a health record item type that encapsulates information for 
            one who pays for health and/or medical expenses.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Payer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Payer"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Payer.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Payer"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="planName">
            The name of the plan that pays for health and/or medical expenses.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="planName"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Payer.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Payer.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Payer"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the payer data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> parameter is not
            a payer node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Payer.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the payer data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the payer data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Payer.PlanName"/> parameter has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Payer.ToString">
            <summary>
            Gets a string representation of the payer item.
            </summary>
            
            <returns>
            A string representing the payer item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.PlanName">
            <summary>
            Gets or sets the plan name.
            </summary>
            
            <returns>
            A string representing the name.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only
            whitespace when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.CoverageType">
            <summary>
            Gets or sets the coverage type, such as medical, dental, and so on.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the type.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the coverage type should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.CarrierId">
            <summary>
            Gets or sets the carrier identifier.
            </summary>
            <returns>
            A string representing the identifier.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the carrier identifier should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.GroupNumber">
            <summary>
            Gets or sets the group number.
            </summary>
            
            <returns>
            A string representing the group number.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the group number should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.PlanCode">
            <summary>
            Gets or sets the plan code.
            </summary>
            
            <returns>
            A string representing the plan code.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the plan code should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.SubscriberId">
            <summary>
            Gets or sets the subscriber identifier.
            </summary>
            
            <returns>
            A string representing the identifier.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the subscriber identifier should 
            not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.PersonCode">
            <summary>
            Gets or sets the person code.
            </summary>
            
            <returns>
            A string representing the code.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the person code should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.SubscriberName">
            <summary>
            Gets or sets the subscriber name.
            </summary>
            
            <returns>
            A string representing the name.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the subscriber name should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.SubscriberDateOfBirth">
            <summary>
            Gets or sets the subscriber's date of birth.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the subscriber's date of birth should not 
            be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this is the primary coverage for the
            person.
            </summary>
            
            <returns>
            <b>true</b> if this is primary coverage; otherwise, <b>false</b>.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the is primary should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.ExpirationDate">
            <summary>
            Gets or sets the date the coverage expires.
            </summary>
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date.
            </returns> 
            
            <remarks>
            Set the value to <b>null</b> if the expiration date should not 
            be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Payer.Contact">
            <summary>
            Gets or sets the payer contact information.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.ContactInfo"/> instance representing the information.
            </returns>
            
            <remarks>
            Set the value to <b>null</b> if the payer contact information
            should not be stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Person">
            <summary>
            Represents a health record item type that encapsulates non-identifying 
            information about a person.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Person.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Person"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Person.#ctor(Microsoft.Health.ItemTypes.Name)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Person"/> class with the 
            specified name.
            </summary>
            
            <param name="name">
            The name of the person.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or <paramref name="personType"/> parameter 
            is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Person.#ctor(Microsoft.Health.ItemTypes.Name,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Person"/> class with the 
            specified name and type.
            </summary>
            
            <param name="name">
            The name of the person.
            </param>
            
            <param name="personType">
            The type of the person, such as emergency contact, provider, and 
            so on.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> or <paramref name="personType"/> 
            parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Person.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Person.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Person"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the person data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a person node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Person.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the person data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the person data to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Person.ToString">
            <summary>
            Gets a string representation of the person item.
            </summary>
            
            <returns>
            A string representation of the person item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Person.Name">
            <summary>
            Gets or sets the person's name.
            </summary>
            
            <value>
            A <see cref="P:Microsoft.Health.ItemTypes.Person.Name"/> value.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Person.Organization">
            <summary>
            Gets or sets the organization the person belongs to.
            </summary>
            
            <value>
            A string representing the organization.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the organization should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Person.ProfessionalTraining">
            <summary>
            Gets or sets the professional training for the provider.
            </summary>
            
            <value>
            A string representing the training.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Person.PersonId">
            <summary>
            Gets or sets the ID number for the person in the organization.
            </summary>
            
            <value>
            A string representing the ID number.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the ID should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Person.ContactInformation">
            <summary>
            Gets or sets the contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.ContactInfo"/> representing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the contact information should not be
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Person.PersonType">
            <summary>
            Gets or sets the type of person, such as provider, emergency contact, 
            and so on.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the person type.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Person.Item">
            <summary>
            Gets or sets the person information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> representing the information.
            </value>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.PersonItem">
            <summary>
            Represents non-identifying information about a person.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonItem.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> class with default 
            values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonItem.#ctor(Microsoft.Health.ItemTypes.Name)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> class 
            with the specified name.
            </summary>
            
            <param name="name">
            The name of the person.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonItem.#ctor(Microsoft.Health.ItemTypes.Name,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PersonItem"/> class 
            with the specified name and type.
            </summary>
            
            <param name="name">
            The name of the person.
            </param>
            
            <param name="personType">
            The type of the person: emergency contact, provider, etc.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> or <paramref name="personType"/>
            is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonItem.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates this Person instance from the data in the XML.
            </summary>
            
            <param name="personNav">
            The XML containing the goal information.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a person node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonItem.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the person data to the specified XmlWriter.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the person data.
            </param>
            
            <param name="writer">
            The XmlWriter to write the person data to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.PersonItem.Name"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonItem.ToString">
            <summary>
            Gets a string representation of the person item.
            </summary>
            
            <returns>
            A string representation of the person item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PersonItem.Name">
            <summary>
            Gets or sets the person's name.
            </summary>
            
            <value>
            A <see cref="P:Microsoft.Health.ItemTypes.PersonItem.Name"/> instance.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PersonItem.Organization">
            <summary>
            Gets or sets the organization the person belongs to.
            </summary>
            
            <value>
            A string representing the organization.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the organization should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PersonItem.ProfessionalTraining">
            <summary>
            Gets or sets the professional training for the provider.
            </summary>
            
            <value>
            A string representing the training.
            </value>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PersonItem.PersonId">
            <summary>
            Gets or sets the ID number for the person in the organization.
            </summary>
            
            <value>
            A string representing the ID.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the ID should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PersonItem.ContactInformation">
            <summary>
            Gets or sets the contact information.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.ContactInfo"/> representing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the contact information should not be
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.PersonItem.PersonType">
            <summary>
            Gets or sets the type of person, such as provider, emergency 
            contact, and so on.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> representing the type.
            </value> 
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Personal">
            <summary>
            Represents health record item type that encapsulates identifying 
            information about a person.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Personal.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Personal"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Personal.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Personal.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Personal"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the personal data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a personal node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Personal.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the personal data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the personal data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Personal.ToString">
            <summary>
            Gets a string representation of the personal item.
            </summary>
            
            <returns>
            A string representation of the personal item.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.Name">
            <summary>
            Gets or sets the name of the person.
            </summary>
            
            <value>
            The name of the person.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the name should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.BirthDate">
            <summary>
            Gets or sets the birth date.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the date.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the birth date should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.BloodType">
            <summary>
            Gets or sets the ABO and Rhesus +/- blood type for the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the blood type.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the blood type should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.Ethnicity">
            <summary>
            Gets or sets the ethnicity of the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the ethnicity.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the ethnicity should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.SocialSecurityNumber">
            <summary>
            Gets or sets the US social security number of the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the social 
            security number.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the social security number should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.MaritalStatus">
            <summary>
            Gets or sets the marital status of the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the marital status.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the marital status should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.EmploymentStatus">
            <summary>
            Gets or sets the employment status of the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the employment 
            status.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the employment status should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.IsDeceased">
            <summary>
            Gets or sets a value indicating whether the person is deceased.
            </summary>
            
            <value>
            <b>true</b> if the person is deceased; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.DateOfDeath">
            <summary>
            Gets or sets the date of death for the person.
            </summary>
            
            <value>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateDateTime"/> instance representing the date.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.Religion">
            <summary>
            Gets or sets the religion of the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the religion. 
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the religion should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.IsVeteran">
            <summary>
            Gets or sets a value indicating whether the person is a veteran.
            </summary>
            
            <value>
            <b>true</b> if the person is a veteran; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.HighestEducationLevel">
            <summary>
            Gets or sets the highest education level of the person.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the education level. 
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the level should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the person has a disability.
            </summary>
            
            <value>
            <b>true</b> if the person has a disability; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Personal.OrganDonor">
            <summary>
            Gets or sets the organ donor status of the person.
            </summary>
            
            <value>
            A string representing the status.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the status should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.PersonalImage">
            <summary>
            Represents a personal image associated with the health record.
            </summary>
            
            <remarks>
            There can be only one personal image for each health record.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonalImage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PersonalImage"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.PersonalImage.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonalImage.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.PersonalImage"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the personal image data from.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonalImage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the file data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the file data to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonalImage.WriteImage(System.IO.Stream,System.String)">
            <summary>
            Writes the image from the byte stream into the BlobStore  
            of the item.
            </summary>
            
            <param name="imageStream">
            The stream from which to retrieve the image bytes.
            </param>
            
            <param name="mimeType">
            The mime type for the image.
            </param>
            
            <remarks>
            The image is streamed in using the <see cref="T:Microsoft.Health.BlobStore"/> for this item.
            <br/>
            This method does not close the stream.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="imageStream"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="imageStream"/> parameter length is greater than
            <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PersonalImage.ReadImage">
            <summary>
            Reads the image from the <see cref="T:Microsoft.Health.Blob"/> 
            as a stream.
            </summary>
            
            <returns>
            A Stream containing the image bytes. It is the caller's 
            responsibility to close this stream.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Phone">
            <summary>
            Represents a telephone number.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Phone.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Phone"/> class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Phone.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Phone"/> class with the 
            specified phone number.
            </summary>
            
            <param name="number">
            The phone number.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="number"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Phone.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Phone"/> class with the 
            specified phone number, description, primary designation.
            </summary>
            
            <param name="number">
            The phone number.
            </param>
            
            <param name="description">
            The description of the phone number.
            </param>
            
            <param name="isPrimary">
            <b>true</b> if the phone number is the primary phone number for the
            person; otherwise, <b>false</b>.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="number"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Phone.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the phone information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Phone.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the telephone number into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the phone.
            </param>
            
            <param name="writer">
            The XML writer into which the telephone number should be 
            written.
            </param>
                    
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Phone.Number"/> property has not been set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Phone.Description">
            <summary>
            Gets or sets the description for the telephone number.
            </summary>
            
            <value>
            A string representing the description.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the description should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Phone.IsPrimary">
            <summary>
            Gets or sets a value indicating whether the telephone number is the 
            primary number for the person.
            </summary>
            
            <value>
            <b>true</b> if the this number is the primary phone 
            number for the person; otherwise, <b>false</b>.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if this property should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Phone.Number">
            <summary>
            Gets or sets the telephone number.
            </summary>
            
            <value>
            A string representing the phone number.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only 
            whitespace during set.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.PowerMeasurement">
            <summary>
            Represents a power measurement and display.
            </summary>
            
            <remarks>
            In HealthVault, power measurements have values and display values. 
            All values are stored in a base unit of watts. 
            An application can take a pace value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the power value must be 
            converted to watts to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PowerMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PowerMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PowerMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PowerMeasurement"/> 
            class with the specified value in watts.
            </summary>
            
            <param name="watts">
            The power in watts.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PowerMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.PowerMeasurement"/> 
            class with the specified value in watts and optional display value.
            </summary>
            
            <param name="watts">
            The power in watts.
            </param>
            
            <param name="displayValue">
            The display value of the power. This should contain the
            exact power as entered by the user even if it uses some
            other unit of measure besides watts. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PowerMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal power value.
            </summary>
            
            <param name="value">
            The power measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PowerMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the power from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the power.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PowerMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the power to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the power to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.PowerMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the power in the base units.
            </summary>
            
            <returns>
            The power as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Problem">
            <summary>
            Information related to a medical problem (please see remarks).
            </summary>
            <remarks>
            We are in the process of merging the problem and condition types, and
            recommend that applications use the condition type instead of the problem type. 
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Problem.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Problem"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Problem.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Problem"/> class with the 
            specified date and time.
            </summary>
            
            <param name="when">
            The date/time for the health problem.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Problem.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Problem.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this health problem instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the health problem data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a health problem node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Problem.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the health problem data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the health problem data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Problem.When"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Problem.ToString">
            <summary>
            Gets a string representation of the problem.
            </summary>
            
            <returns>
            A string representation of the problem.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Problem.When">
            <summary>
            Gets or sets the date/time when the health problem occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing 
            the date and time. The default value is the current year, month, 
            and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Problem.Diagnosis">
            <summary>
            Gets a collection of diagnoses for the health problem.
            </summary>
            
            <value>
            A collection of type <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> containing 
            the diagnoses.
            </value>
            
            <remarks>
            To add or remove a diagnosis, call Add or Remove on the returned
            collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Problem.Duration">
            <summary>
            Gets a collection of duration information for the health problem.
            </summary>
            
            <value>
            A collection of type <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> containing 
            the duration information.
            </value> 
            
            <remarks>
            To add or remove a duration, call Add or Remove on the returned
            collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Problem.Importance">
            <summary>
            Gets or sets the importance of the health problem.
            </summary>
            
            <value>
            An integer representing the importance value.
            </value>
            
            <remarks>
            If the importance of the problem is unknown, the value can be set to
            <b>null</b>.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.RadiologyLabResults">
            <summary>
            Represents a health record item type that encapsulates radiology 
            laboratory results.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RadiologyLabResults.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.RadiologyLabResults"/> class 
            with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RadiologyLabResults.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.RadiologyLabResults"/> class 
            with the specified date.
            </summary>
            
            <param name="when">
            The date/time for the radiology laboratory results.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RadiologyLabResults.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RadiologyLabResults.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this radiology laboratory results instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the radiology laboratory results data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a radiology laboratory results node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RadiologyLabResults.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the radiology laboratory results data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the radiology laboratory results data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.RadiologyLabResults.When"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RadiologyLabResults.ToString">
            <summary>
            Gets a string representation of the radiology lab results.
            </summary>
            
            <returns>
            A string representing the radiology lab results.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RadiologyLabResults.When">
            <summary>
            Gets or sets the date/time when the radiology laboratory results occurred.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RadiologyLabResults.Title">
            <summary>
            Gets or sets the title for the radiology laboratory results.
            </summary>
            
            <value>
            A string representing the title.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the title should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RadiologyLabResults.AnatomicSite">
            <summary>
            Gets or sets the anatomic site for the radiology laboratory results.
            </summary>
            
            <value>
            A string representing the site.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the site should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RadiologyLabResults.ResultText">
            <summary>
            Gets or sets the result text for the radiology laboratory results.
            </summary>
            
            <value>
            A string representing the text.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the result text should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.RelativeRating">
            <summary>
            Represents a relative rating for attributes such as emotion or activity.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RelativeRating.None">
            <summary>
            The relative rating is not known.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RelativeRating.VeryLow">
            <summary>
            The rating is very low.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RelativeRating.Low">
            <summary>
            The rating is low.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RelativeRating.Moderate">
            <summary>
            The rating is moderate.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RelativeRating.High">
            <summary>
            The rating is high.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RelativeRating.VeryHigh">
            <summary>
            The rating is very high.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.RespiratoryProfile">
            <summary>
            Represents a health record item type that encapsulates a person's 
            respiratory profile at a single point in time.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RespiratoryProfile.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.RespiratoryProfile"/> class with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> 
            method is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RespiratoryProfile.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.RespiratoryProfile"/> class 
            with the specified date and time.
            </summary>
            
            <param name="when">
            The date/time when the respiratory profile was take.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.RespiratoryProfile.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RespiratoryProfile.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.RespiratoryProfile"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the respiratory profile data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a respiratory-profile node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RespiratoryProfile.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the respiratory profile data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the respiratory profile data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.RespiratoryProfile.ToString">
            <summary>
            Gets a string representation of the respiratory profile.
            </summary>
            
            <returns>
            A string representing the respiratory profile.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RespiratoryProfile.When">
            <summary>
            Gets or sets the date/time when the respiratory profile was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the date. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RespiratoryProfile.ExpiratoryFlowRedZoneUpperBoundary">
            <summary>
            Gets or sets the upper boundary of the expiratory flow red zone.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.FlowMeasurement"/> representing the upper boundary
            of the expiratory flow in L/s.
            </value>
            
            <remarks>
            The red zone covers flow measurements from 0 to the red zone upper
            boundary. Values are measured in liters per second (L/s).
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RespiratoryProfile.ExpiratoryFlowOrangeZoneUpperBoundary">
            <summary>
            Gets or sets the upper boundary of the expiratory flow orange zone.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.FlowMeasurement"/> representing the upper boundary
            of the expiratory flow in L/s.
            </value>
            
            <remarks>
            The orange zone covers flow measurements from the red zone upper boundary
            to the orange zone upper boundary. 
            Values are measured in liters per second (L/s).
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.RespiratoryProfile.ExpiratoryFlowYellowZoneUpperBoundary">
            <summary>
            Gets or sets the upper boundary of the expiratory flow yellow zone.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.FlowMeasurement"/> representing the upper boundary
            of the expiratory flow in L/s.
            </value>
            
            <remarks>
            The yellow zone covers flow measurements from the orange zone upper boundary
            to the yellow zone upper boundary. 
            Values are measured in liters per second (L/s).
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Sleepiness">
            <summary>
            Provides values representing how awake a person felt during the day.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Sleepiness.Unknown">
            <summary>
            The sleepiness state is unknown.
            </summary>
            
            <remarks>
            This is not a valid state and will cause an exception if used.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Sleepiness.VerySleepy">
            <summary>
            The person was very sleepy throughout the day.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Sleepiness.Tired">
            <summary>
            The person was somewhat tired throughout the day.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Sleepiness.Alert">
            <summary>
            The person was fairly alert throughout the day.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Sleepiness.WideAwake">
            <summary>
            The person was wide awake throughout the day.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.SleepJournalAM">
            <summary>
            Represents a health record item type that encapsulates a sleep journal 
            morning entry.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalAM.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.SleepJournalAM"/> class with 
            default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalAM.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.ApproximateTime,Microsoft.Health.ItemTypes.ApproximateTime,System.Int32,System.Int32,Microsoft.Health.ItemTypes.WakeState)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.SleepJournalAM"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date and time when the AM sleep journal entry was taken.
            </param>
            
            <param name="bedtime">
            The approximate time the person went to bed.
            </param>
            
            <param name="wakeTime">
            The approximate time the person woke up.
            </param>
            
            <param name="sleepMinutes">
            The number of minutes the person slept.
            </param>
            
            <param name="settlingMinutes">
            The number of minutes it took the person to fall asleep after
            going to bed.
            </param>
            
            <param name="wakeState">
            The state of the person when they awoke.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="sleepMinutes"/> parameter or 
            <paramref name="settlingMinutes"/> parameter is negative.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.SleepJournalAM.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalAM.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this SleepJournalAM instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the morning sleep journal data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in the <paramref name="typeSpecificXml"/> parameter 
            is not a sleep-am node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalAM.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the morning sleep journal data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the morning sleep journal data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.SleepJournalAM.When"/>, <see cref="P:Microsoft.Health.ItemTypes.SleepJournalAM.Bedtime"/>, 
            <see cref="P:Microsoft.Health.ItemTypes.SleepJournalAM.WakeTime"/>, <see cref="P:Microsoft.Health.ItemTypes.SleepJournalAM.SleepMinutes"/>,
            <see cref="P:Microsoft.Health.ItemTypes.SleepJournalAM.SettlingMinutes"/>, or <see cref="P:Microsoft.Health.ItemTypes.SleepJournalAM.WakeState"/> parameter 
            has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalAM.ToString">
            <summary>
            Gets a string representation of the sleep journal entry.
            </summary>
            
            <returns>
            A string representing the sleep journal entry.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.When">
            <summary>
            Gets or sets the when the journal entry is made.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance representing the 
            date and time.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.Bedtime">
            <summary>
            Gets or sets the when the person went to bed.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> instance representing the time.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.WakeTime">
            <summary>
            Gets or sets the when the person woke up.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> instance representing the time.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> when set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.SleepMinutes">
            <summary>
            Gets or sets the number of minutes slept.
            </summary>
            
            <returns>
            An integer representing the number of minutes.
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.SettlingMinutes">
            <summary>
            Gets or sets the number of minutes spent settling into sleep.
            </summary>
            
            <returns>
            An integer representing the number of minutes.
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.Awakenings">
            <summary>
            Gets the occurrences of awakenings that occurred during
            sleeping period.
            </summary>
            
            <returns>
            A collection representing the number of awakenings.
            </returns> 
            
            <remarks>
            To add awakenings, add new <see cref="T:Microsoft.Health.ItemTypes.Occurrence"/> instances to the returned
            collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.Medications">
            <summary>
            Gets or sets a description of the medications taken before bed.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the description.
            </returns>
            
            <remarks>
            Set the value to <b>null</b> if the medications should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalAM.WakeState">
            <summary>
            Gets or sets the state of the person when they awoke.
            </summary>
            
            <returns>
            A <see cref="P:Microsoft.Health.ItemTypes.SleepJournalAM.WakeState"/> value representing the state.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.SleepJournalPM">
            <summary>
            Represents a health record item type that encapsulates a sleep journal 
            evening entry.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalPM.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.SleepJournalPM"/> class 
            with default values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalPM.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.Sleepiness)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.SleepJournalPM"/> class 
            specifying the mandatory values.
            </summary>
            
            <param name="when">
            The date/time when the PM sleep journal entry was taken.
            </param>
            
            <param name="sleepiness">
            The state of sleepiness the person was in throughout the day.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="sleepiness"/> parameter is 
            <see cref="F:Microsoft.Health.ItemTypes.Sleepiness.Unknown"/>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.SleepJournalPM.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalPM.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.SleepJournalPM"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the evening sleep journal data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a sleep-pm node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalPM.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the evening sleep journal data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the evening sleep journal data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.SleepJournalPM.When"/> or <see cref="P:Microsoft.Health.ItemTypes.SleepJournalPM.Sleepiness"/> properties 
            have not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SleepJournalPM.ToString">
            <summary>
            Gets the string representation of the sleep journal entry.
            </summary>
            
            <returns>
            A string representing the sleep journal entry.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalPM.When">
            <summary>
            Gets or sets the date and time when the journal entry is made.
            </summary>
            
            <value>
            An instance of <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing 
            the date and time.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> during set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalPM.Caffeine">
            <summary>
            Gets the time(s) in which caffeine was consumed
            during the day.
            </summary>
            
            <value>
            A collection of times.
            </value>
            
            <remarks>
            To add occurrences of caffeine intake, add new <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> 
            instances to the returned collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalPM.Alcohol">
            <summary>
            Gets or sets the time(s) in which alcohol was consumed
            during the day.
            </summary>
            
            <value>
            A collection of times.
            </value> 
            
            <remarks>
            To add occurrences of alcohol intake, add new <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> 
            instances to the returned collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalPM.Naps">
            <summary>
            Gets the occurrences of any naps during the day.
            </summary>
            
            <value>
            A collection of occurrences.
            </value>
            
            <remarks>
            To add an occurrence of a nap, add new <see cref="T:Microsoft.Health.ItemTypes.Occurrence"/> instances 
            to the returned collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalPM.Exercise">
            <summary>
            Gets the occurrences of any exercise that occurred 
            during the day.
            </summary>
            
            <value>
            A collection of occurrences.
            </value> 
            
            <remarks>
            To add an occurrence of an exercise, add new <see cref="T:Microsoft.Health.ItemTypes.Occurrence"/> instances 
            to the returned collection.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.SleepJournalPM.Sleepiness">
            <summary>
            Gets or sets the state of sleepiness the person was in throughout
            the day.
            </summary>
            
            <value>
            An instance of <see cref="P:Microsoft.Health.ItemTypes.SleepJournalPM.Sleepiness"/> representing the state.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is 
            <see cref="F:Microsoft.Health.ItemTypes.Sleepiness.Unknown"/>.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.SpeedMeasurement">
            <summary>
            Represents a speed measurement and display.
            </summary>
            
            <remarks>
            In HealthVault, speed measurements have values and display values. 
            All values are stored in a base unit of meters per second (m/s). 
            An application can take a speed value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the speed value must be 
            converted to m/s to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SpeedMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.SpeedMeasurement"/> class 
            with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SpeedMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.SpeedMeasurement"/> class 
            with the specified value in meters per second.
            </summary>
            
            <param name="metersPerSecond">
            The speed in meters per second.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SpeedMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.SpeedMeasurement"/> class with 
            the specified value in meters per second and optional display value.
            </summary>
            
            <param name="metersPerSecond">
            The speed in meters per second.
            </param>
            
            <param name="displayValue">
            The display value of the speed. This should contain the
            exact speed as entered by the user even if it uses some
            other unit of measure besides meters per second. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SpeedMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies the value is a legal speed value in meters.
            </summary>
            
            <param name="value">
            The speed measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SpeedMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the speed from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the speed.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SpeedMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the speed to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the speed to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.SpeedMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the speed in the base units.
            </summary>
            
            <returns>
            The speed as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.StringMeasurement">
            <summary>
            Represents a measurement of type string and display.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.StringMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.StringMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.StringMeasurement.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.StringMeasurement"/> 
            class with the specified value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.StringMeasurement.#ctor(System.String,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.StringMeasurement"/> 
            class with the specified value and optional display value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
            <param name="displayValue">
            The display value of the measurement. This should contain the
            exact measurement as entered by the user even if it uses some
            other unit of measure. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.StringMeasurement.AssertMeasurementValue(System.String)">
            <summary>
            Verifies that the value is a legal value.
            </summary>
            
            <param name="value">
            The value of the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.StringMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the measurement from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the measurement.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.StringMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the measurement to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the measurement to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.StringMeasurement.GetValueString(System.String)">
            <summary>
            Retrieves a string representation of the measurement in the base units.
            </summary>
            
            <returns>
            The measurement as a string in the base units.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.StringMeasurement.ValueElementName">
            <summary>
            Gets or sets the name of the element that defines the value for the measurement.
            </summary>
            
            <returns>
            A string representing the element name.
            </returns>
            
            <remarks>
            The default value for the element name is "value" but should be
            overridden in derived classes to provide a specific element name
            where appropriate.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.TargetGlucoseZone">
            <summary>
            Represents a target glucose zone.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZone.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TargetGlucoseZone"/> class with default 
            values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZone.#ctor(System.String,Microsoft.Health.ItemTypes.BloodGlucoseMeasurement,Microsoft.Health.ItemTypes.BloodGlucoseMeasurement)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TargetGlucoseZone"/> class 
            with the specified absolute glucose value boundaries and name.
            </summary>
            
            <param name="name">
            The name of the zone.
            </param>
            
            <param name="lowerBoundaryAbsoluteGlucose">
            The glucose value in millimoles per liter (mmol/L) for the lower 
            boundary of the zone.
            </param>
            
            <param name="upperBoundaryAbsoluteGlucose">
            The glucose value in millimoles per liter (mmol/L) for the upper 
            boundary of the zone.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZone.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TargetGlucoseZone"/> class 
            with the specified relative glucose value boundaries and name.
            </summary>
            
            <param name="name">
            The name of the zone.
            </param>
            
            <param name="lowerBoundaryRelativeGlucose">
            The lower glucose boundary as a percentage of the person's 
            maximum blood glucose level.
            </param>
            
            <param name="upperBoundaryRelativeGlucose">
            The upper glucose boundary as a percentage of the person's 
            maximum blood glucose level.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="lowerBoundaryRelativeGlucose"/> or 
            <paramref name="upperBoundaryRelativeGlucose"/> parameter 
            is less than 0.0 or greater than 1.0.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZone.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the glucose zone information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is null.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZone.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the glucose zone into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the heart rate zone.
            </param>
            
            <param name="writer">
            The XML writer into which the glucose zone should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is null or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is null.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeLowerBoundary"/>, <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteLowerBoundary"/>, 
            <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeUpperBoundary"/>, or <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteUpperBoundary"/> 
            parameter is not set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.Name">
            <summary>
            Gets or sets the name for the blood glucose zone.
            </summary>
            
            <value>
            A string representing the name.
            </value>
            
            <remarks>
            Set the value to null if the name should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeLowerBoundary">
            <summary>
            Gets or sets the lower boundary of the blood glucose zone as a
            percentage of the person's maximum blood glucose level.
            </summary>
            
            <value>
            A number representing the boundary.
            </value> 
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeLowerBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteLowerBoundary"/> can be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteLowerBoundary"/> is stored.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0.0 or greater than 1.0.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteLowerBoundary">
            <summary>
            Gets or sets the lower boundary of the blood glucose zone as a
            specific blood glucose level.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.BloodGlucoseMeasurement"/> instance representing the 
            boundary.
            </value>
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeLowerBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteLowerBoundary"/> can be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteLowerBoundary"/> is stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeUpperBoundary">
            <summary>
            Gets or sets the upper boundary of the blood glucose zone as a
            percentage of the person's maximum blood glucose level.
            </summary>
            
            <value>
            A number representing the boundary.
            </value>
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeUpperBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteUpperBoundary"/> may be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteUpperBoundary"/> will be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 0.0 or greater than 1.0.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteUpperBoundary">
            <summary>
            Gets or sets the upper boundary of the blood glucose zone as a
            specific blood glucose level.
            </summary>
            
            <remarks>
            Only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.RelativeUpperBoundary"/> or 
            <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteUpperBoundary"/> can be stored. If both are
            set, only <see cref="P:Microsoft.Health.ItemTypes.TargetGlucoseZone.AbsoluteUpperBoundary"/> is stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup">
            <summary>
            Represents a grouping of target glucose zones by name.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup"/> 
            class with default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup"/> 
            class with the specified name.
            </summary>
            
            <param name="name">
            The name of the target glucose zone grouping.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Health.ItemTypes.TargetGlucoseZone})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup"/> 
            class with the specified name and target zones.
            </summary>
            
            <param name="name">
            The name of the target glucose zone grouping.
            </param>
            
            <param name="targetZones">
            The target glucose zones for the grouping.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the target glucose zone group information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the target glucose zone group into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the target glucose zone group.
            </param>
            
            <param name="writer">
            The XML writer into which the target glucose zone group should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup.Name">
            <summary>
            Gets or sets the name for the target glucose zone group.
            </summary>
            
            <value>
            A string representing the name.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the name should not be stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.TargetGlucoseZoneGroup.TargetZones">
            <summary>
            Gets the target glucose zones for the zone group.
            </summary>
            
            <value>
            A collection of zones.
            </value>
            
            <remarks>
            To add a zone to the group, call Add on the returned collection.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.TemperatureMeasurement">
            <summary>
            Represents a temperature measurement and display.
            </summary>
            
            <remarks>
            In HealthVault, temperature measurements have values and display values. 
            All values are stored in a base unit of degrees Celsius (C). 
            An application can take a pace value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the temperature value must be converted to degrees Celsius to be stored in 
            HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TemperatureMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TemperatureMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TemperatureMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TemperatureMeasurement"/> 
            class with the specified value in degrees Celsius.
            </summary>
            
            <param name="celsius">
            The temperature in degrees Celsius.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TemperatureMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TemperatureMeasurement"/> 
            class with the specified value in degrees Celsius and optional display value.
            </summary>
            
            <param name="celsius">
            The temperature in degrees Celsius.
            </param>
            
            <param name="displayValue">
            The display value of the temperature. This should contain the
            exact temperature as entered by the user even if it uses some
            other unit of measure besides degrees Celsius. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TemperatureMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal temperature value.
            </summary>
            
            <param name="value">
            The temperature measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TemperatureMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the temperature from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the temperature.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TemperatureMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the temperature to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the temperature to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TemperatureMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the temperature in the base units.
            </summary>
            
            <returns>
            The temperature as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.TorqueMeasurement">
            <summary>
            Represents a torque measurement and display.
            </summary>
            
            <remarks>
            In HealthVault, torque measurements have values and display values. 
            All values are stored in a base unit of newton meters. 
            An application can take a torque value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the torque value must be 
            converted to newton meters to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TorqueMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TorqueMeasurement"/> 
            class with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TorqueMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TorqueMeasurement"/> 
            class with the specified value in newton meters.
            </summary>
            
            <param name="newtonMeters">
            The torque in newton meters.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TorqueMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.TorqueMeasurement"/> 
            class with the specified value in newton meters and optional display value.
            </summary>
            
            <param name="newtonMeters">
            The torque in newton meters.
            </param>
            
            <param name="displayValue">
            The display value of the torque. This should contain the
            exact torque as entered by the user even if it uses some
            other unit of measure besides newton meters. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TorqueMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies that the value is a legal torque value.
            </summary>
            
            <param name="value">
            The torque measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TorqueMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the torque from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the torque.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TorqueMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the torque to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the torque to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.TorqueMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the torque in the base units.
            </summary>
            
            <returns>
            The torque as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.CodableValue">
            <summary>
            Represents the value and code of an entry in the HealthVault vocabulary
            store.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.#ctor">
            <summary>
            Constructs a CodableValue with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String)">
            <summary>
            Constructs a CodableValue with an initial value for the Text.
            </summary>
            
            <param name="text">
            The text value of the codable value.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="text"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,Microsoft.Health.ItemTypes.CodedValue)">
            <summary>
            Constructs a CodableValue with an initial value for the Text
            and the specified code.
            </summary>
            
            <param name="text">
            The text value of the codable value.
            </param>
            
            <param name="code">
            The code representation of the text value.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="text"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> class 
            with the specified text, code value, vocabulary name, family, and version.
            </summary>
            
            <param name="text">
            The text value of the codable value.
            </param>
            
            <param name="code">
            The code representation of the text value.
            </param>
            
            <param name="vocabularyName">
            The name of the vocabulary the code belongs to.
            </param>
            
            <param name="family">
            The family of vocabulary terms that the code belongs to.
            </param>
            
            <param name="version">
            The version of the vocabulary the code belongs to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="text"/> or <paramref name="code"/> or 
            <paramref name="vocabularyName"/> parameter is <b>null</b> or empty.
            </exception>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.#ctor(System.String,System.String,Microsoft.Health.VocabularyKey)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> class 
            with the specified text, code value, and vocabulary key.
            </summary>
            
            <param name="text">
            The text value of the codable value.
            </param>
            
            <param name="code">
            The code representation of the text value.
            </param>
            
            <param name="key">
            key for identifying a Vocabulary in the HealthLexicon.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="text"/> or <paramref name="code"/> or <paramref name="key"/>
            parameter is <b>null</b>.
            </exception>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.IndexOf(Microsoft.Health.ItemTypes.CodedValue)">
            <summary>
            Determines the index of a specific item
            </summary>
            
            <param name="item">
            The <see cref="T:Microsoft.Health.ItemTypes.CodedValue"/> to find the index of.
            </param>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.Insert(System.Int32,Microsoft.Health.ItemTypes.CodedValue)">
            <summary>
            Inserts an code item at the specified index.
            </summary>
            
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            
            <param name="item">
            The object to insert.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> parameter is out of range.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.RemoveAt(System.Int32)">
            <summary>
            Removes a code item at the specified index.
            </summary>
            
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> parameter is out of range.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.Add(Microsoft.Health.ItemTypes.CodedValue)">
            <summary>
            Adds an item to the code list. 
            </summary>
            
            <param name="item">
            The code item to add.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.Clear">
            <summary>
            Removes all items from the code item list
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.Contains(Microsoft.Health.ItemTypes.CodedValue)">
            <summary>
            Gets a value indicating whether the code item list contains a 
            specific code.
            </summary>
            
            <param name="item">
            The code item to search for in the list.
            </param>
            
            <returns>
            <b>true</b> if the item is in the collection; otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.CopyTo(Microsoft.Health.ItemTypes.CodedValue[],System.Int32)">
            <summary>
            Copies the elements of the code item list to an array, starting at 
            a particular array index.
            </summary>
            
            <param name="array">
            The array to copy the elements to.
            </param>
            
            <param name="arrayIndex">
            The array location at which to begin copying.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="arrayIndex"/> parameter is less than 0.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="array"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="array"/> parameter is multidimensional, 
            or the <paramref name="arrayIndex"/> value is equal to or greater 
            than the length of the array, or the number of elements in the 
            source collection is greater than the available space from <paramref name="arrayIndex"/> 
            to the end of the destination array, or a type cannot be cast 
            automatically to the type of the destination array.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.Remove(Microsoft.Health.ItemTypes.CodedValue)">
            <summary>
            Removes the first occurrence of this code item from the code item
            list.
            </summary>
            
            <param name="item">
            The <see cref="T:Microsoft.Health.ItemTypes.CodedValue"/> object to remove.
            </param>
            
            <returns>
            <b>true</b> if removal succeeded; otherwise, <b>false</b>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the code list.
            </summary>
            
            <returns>
            An enumerator.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            An enumerator.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the vocabulary entry from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the vocabulary entry.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the vocabulary entry to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the vocabulary entry.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the vocabulary entry to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.CodableValue.Text"/>, <see cref="P:Microsoft.Health.ItemTypes.CodedValue.Value"/>, or
            <see cref="P:Microsoft.Health.ItemTypes.CodedValue.Family"/> parameter is <b>null</b> or empty.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.CodableValue.ToString">
            <summary>
            Gets the string representation of a codable value.
            </summary>
            
            <returns>
            A string representing the value.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodableValue.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <param name="index">
            The zero-based index of the element to get or set
            </param>
            
            <returns>
            The code item at the specified index.
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> parameter is out of range.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodableValue.Count">
            <summary>
            Gets the number of code items
            </summary>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodableValue.IsReadOnly">
            <summary>
            Gets a value indicating whether the code item list is read-only.
            </summary>
            
            <value>
            <b>true</b> if the list is read-only; otherwise, <b>false</b>.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodableValue.Text">
            <summary>
            Gets or sets the value of the codable value.
            </summary>
            
            <value>
            A string representing the value.
            </value>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="value"/> parameter is <b>null</b>, empty, or contains only
            whitespace when setting.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.CodableValue.Codes">
            <summary>
            Gets coded versions of the value found in the HealthVault 
            Vocabulary store.
            </summary>
            
            <value>
            An IList instance representing the value versions.
            </value>
            
            <remarks>
            To have a coded representation of the <see cref="P:Microsoft.Health.ItemTypes.CodableValue.Text"/> property,
            add <see cref="T:Microsoft.Health.ItemTypes.CodedValue"/> instances to the returned collection.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.VitalSigns">
            <summary>
            Represents a health record item type that encapsulates vital signs.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSigns.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.VitalSigns"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSigns.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.VitalSigns"/> class with 
            the specified date.
            </summary>
            
            <param name="when">
            The date/time when the vital signs were taken.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="when"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.VitalSigns.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSigns.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this vital signs instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the vital signs data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a vital signs node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSigns.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the vital signs data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the vital signs data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.VitalSigns.When"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSigns.ToString">
            <summary>
            Gets a string representation of the vital signs results.
            </summary>
            
            <returns>
            A string representing the vital signs results.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSigns.When">
            <summary>
            Gets or sets the date/time when the vital signs were taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> representing the 
            date. The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSigns.VitalSignsResults">
            <summary>
            Gets or sets the vital sign results.
            </summary>
            
            <value>
            A collection of vital sign results.
            </value>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSigns.Site">
            <summary>
            Gets or sets the site for the vital signs.
            </summary>
            
            <value>
            A string representing the site.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the site should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSigns.Position">
            <summary>
            Gets or sets the position for the vital signs.
            </summary>
            
            <value>
            A string representing the position.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the position should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.VitalSignsResultType">
            <summary>
            Represents a vital sign result type.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSignsResultType.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.VitalSignsResultType"/> class with 
            default values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSignsResultType.#ctor(Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.VitalSignsResultType"/> class
            with the specified name.
            </summary>
            
            <param name="title">
            The name of the vital sign result.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="title"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSignsResultType.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Populates the data from the specified XML.
            </summary>
            
            <param name="navigator">
            The XML containing the vital sign result information.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSignsResultType.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the vital sign result into
            the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer node for the vital sign result.
            </param>
            
            <param name="writer">
            The XML writer into which the vital sign result should be 
            written.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            If <see cref="P:Microsoft.Health.ItemTypes.VitalSignsResultType.Title"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VitalSignsResultType.ToString">
            <summary>
            Gets a string representation of the vital signs result type.
            </summary>
            
            <returns>
            A string representing the vital signs result type.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSignsResultType.Title">
            <summary>
            Gets or sets the title for the vital signs.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing 
            the title.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the title should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSignsResultType.Value">
            <summary>
            Gets or sets the vital sign value.
            </summary>
            
            <value>
            A number representing the vital sign value.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the value should not
            be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSignsResultType.Unit">
            <summary>
            Gets or sets the unit for the vital signs.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing 
            the unit.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the unit should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSignsResultType.ReferenceMinimum">
            <summary>
            Gets or sets the reference minimum for the vital signs.
            </summary>
            
            <value>
            A number representing the reference minimum.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the reference minimum should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSignsResultType.ReferenceMaximum">
            <summary>
            Gets or sets the reference maximum for the vital signs.
            </summary>
            
            <value>
            A number representing the reference maximum.
            </value> 
            
            <remarks>
            Set the value to <b>null</b> if the reference maximum should not be 
            stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSignsResultType.TextValue">
            <summary>
            Gets or sets the text value for the vital signs.
            </summary>
            
            <value>
            A string representing the text value.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the text value should not be 
            stored.
            </remarks>
            
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> contains only whitespace.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.VitalSignsResultType.Flag">
            <summary>
            Gets or sets the flag for the vital signs.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing 
            the flag.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the flag should not be 
            stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.VolumeMeasurement">
            <summary>
            Represents the volume of a gas, liquid, etc. and a display value
            associated with the measurement.
            </summary>
            
            <remarks>
            In HealthVault, volume measurements have values and display values. 
            All values are stored in a base unit of liters (L). 
            An application can take a volume value using any scale the application 
            chooses and can store the user-entered value as the display value, 
            but the volumn value must be converted to liters to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VolumeMeasurement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.VolumeMeasurement"/> class 
            with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VolumeMeasurement.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.VolumeMeasurement"/> class 
            with the specified value in liters.
            </summary>
            
            <param name="liters">
            The volume in liters.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="liters"/> is less than zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VolumeMeasurement.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.VolumeMeasurement"/> class with 
            the specified value in liters and optional display value.
            </summary>
            
            <param name="liters">
            The volume in liters.
            </param>
            
            <param name="displayValue">
            The display value of the volume. This should contain the
            exact volume as entered by the user even if it uses some
            other unit of measure besides liters. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="liters"/> is less than zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VolumeMeasurement.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies the value is a legal volume value in liters.
            </summary>
            
            <param name="value">
            The volume measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VolumeMeasurement.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the volume from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the volume.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VolumeMeasurement.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the volume to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the volume to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.VolumeMeasurement.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the volume in the base units.
            </summary>
            
            <returns>
            The volume as a string in the base units.
            </returns>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.WakeState">
            <summary>
            Provides values describing how awake a person feels when they awake 
            from sleep.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.WakeState.Unknown">
            <summary>
            The waking state is unknown.
            </summary>
            
            <remarks>
            This is not a valid state and will cause an exception if used.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.WakeState.WideAwake">
            <summary>
            The person awoke feeling refreshed.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.WakeState.Tired">
            <summary>
            The person awoke but was still somewhat tired.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.WakeState.Sleepy">
            <summary>
            The person awoke but was still very sleepy.
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Weight">
            <summary>
            Represents a health record item type that encapsulates a person's weight.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Weight.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Weight"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Weight.#ctor(Microsoft.Health.ItemTypes.HealthServiceDateTime,Microsoft.Health.ItemTypes.WeightValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.Weight"/> class with the 
            specified date/time and weight.
            </summary>
            
            <param name="when">
            The date/time when the weight measurement occurred.
            </param>
            
            <param name="weight">
            The person's weight.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="when"/> or <paramref name="weight"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Weight.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Weight.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.Weight"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the weight data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a weight node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Weight.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the weight data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the weight data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
            <exception cref="T:Microsoft.Health.HealthRecordItemSerializationException">
            The <see cref="P:Microsoft.Health.ItemTypes.Weight.Value"/> property has not been set.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.Weight.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
            
            <returns>
            <see cref="P:Microsoft.Health.ItemTypes.Weight.Value"/> if set; otherwise, or String.Empty.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Weight.When">
            <summary>
            Gets or sets the date/time when the weight measurement
            was taken.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> for the weight measurement. 
            The default value is the current year, month, and day.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.Weight.Value">
            <summary>
            Gets or sets the person's weight.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/>.
            </value>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> during set.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.WeightGoal">
            <summary>
            Represents a health record item type that encapsulates a weight goal.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightGoal.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.WeightGoal"/> class with default 
            values.
            </summary>
            
            <remarks>
            The item is not added to the health record until the
            <see cref="M:Microsoft.Health.HealthRecordAccessor.NewItem(Microsoft.Health.HealthRecordItem)"/> method 
            is called.
            </remarks>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.WeightGoal.TypeId">
            <summary>
            Retrieves the unique identifier for the item type.
            </summary>
            
            <value>
            A GUID.
            </value>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightGoal.ParseXml(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Populates this <see cref="T:Microsoft.Health.ItemTypes.WeightGoal"/> instance from the data in the XML.
            </summary>
            
            <param name="typeSpecificXml">
            The XML to get the weight goal data from.
            </param>
            
            <exception cref="T:System.InvalidOperationException">
            The first node in <paramref name="typeSpecificXml"/> is not
            a weight-goal node.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightGoal.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the weight goal data to the specified XmlWriter.
            </summary>
            
            <param name="writer">
            The XmlWriter to write the weight goal data to.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="writer"/> is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightGoal.ToString">
            <summary>
            Gets a string representation of the weight goal.
            </summary>
            
            <returns>
            A string containing the value of the weight goal.
            </returns>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.WeightGoal.InitialWeight">
            <summary>
            Gets or sets the person's initial weight.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the initial weight.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the initial weight should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.WeightGoal.MinimumWeight">
            <summary>
            Gets or sets the person's minimum weight.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the minimum weight.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the minimum weight should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.WeightGoal.MaximumWeight">
            <summary>
            Gets or sets the person's maximum weight.
            </summary>
            
            <value>
            A <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> representing the maximum weight.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the maximum weight should not be stored.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.WeightGoal.Goal">
            <summary>
            Gets or sets the goal information.
            </summary>
            
            <value>
            A <see cref="P:Microsoft.Health.ItemTypes.WeightGoal.Goal"/> value containing the information.
            </value>
            
            <remarks>
            Set the value to <b>null</b> if the goal information should not be stored.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.WeightValue">
            <summary>
            Represents a weight value and display.
            </summary>
            
            <remarks>
            In HealthVault, weights have values and display values. All values are
            stored in a base unit of kilograms. An application can take a length
            value using any scale the application chooses and can store the user-
            entered value as the display value, but the length value must be 
            converted to kilograms to be stored in HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> class 
            with empty values.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> class with 
            the specified value in kilograms.
            </summary>
            
            <param name="kilograms">
            The weight value in kilograms.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.#ctor(System.Double,Microsoft.Health.ItemTypes.DisplayValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> class with 
            the specified value in kilograms and the specified display value.
            </summary>
            
            <param name="kilograms">
            The weight value in kilograms.
            </param>
            
            <param name="displayValue">
            The display value of the weight. This should contain the
            exact weight as entered by the user, even if it uses some
            other unit of measure besides kilograms. The display value
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.Units"/> and 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/> 
            represents the unit of measure for the user-entered value.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.AssertMeasurementValue(System.Double)">
            <summary>
            Verifies the value is a legal weight value in kilograms (kg).
            </summary>
            
            <param name="value">
            The weight measurement.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than or equal to zero.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.ParseValueXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the weight from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the weight.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.WriteValueXml(System.Xml.XmlWriter)">
            <summary> 
            Writes the weight to the specified XML writer.
            </summary>
            
            <param name="writer"> 
            The XmlWriter to write the weight to.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.GetValueString(System.Double)">
            <summary>
            Gets a string representation of the weight in the base units.
            </summary>
            
            <value>
            A string representing the weight.
            </value>
            
            <returns>
            The weight as a string in the base units.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.WeightValue.op_Subtraction(Microsoft.Health.ItemTypes.WeightValue,Microsoft.Health.ItemTypes.WeightValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> class by subtracting 
            the operand from this weight value.
            </summary>
            
            <param name="value1">
            The weight value from which <paramref name="value2"/> is to 
            be subtracted.
            </param>
            
            <param name="value2">
            The weight value to subtract from <paramref name="value1"/>.
            </param>
            
            <remarks>
            This constructor creates a <see cref="T:Microsoft.Health.ItemTypes.WeightValue"/> that is 
            the difference between this weight value and the operand. The value is
            always subtracted. If both operands have a 
            <see cref="T:Microsoft.Health.ItemTypes.DisplayValue"/> set and they have the same 
            <see cref="P:Microsoft.Health.ItemTypes.DisplayValue.UnitsCode"/>,  
            then the result sets DisplayValue with the same units code and the 
            value is the difference between the operands.
            </remarks>
            
            <exception cref="T:System.InvalidOperationException">
            The <paramref name="value2"/> parameter is larger than the <paramref name="value1"/> parameter.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.WeightValue.Kilograms">
            <summary>
            Gets or sets the value of the weight in kilograms.
            </summary>
            
            <value>
            A number representing the weight.
            </value>
            
            <remarks>
            The value must be in kilograms. The <see cref="T:Microsoft.Health.ItemTypes.DisplayValue"/> can
            be used to store the user-entered value in a scale other than
            metric.
            </remarks>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.Wellbeing">
            <summary>
            Describes the general wellbeing of a person from sick to healthy.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Wellbeing.None">
            <summary>
            The wellbeing of the person is unknown.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Wellbeing.Sick">
            <summary>
            The person is sick.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Wellbeing.Impaired">
            <summary>
            The person is not functioning at a normal level. 
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Wellbeing.Able">
            <summary>
            The person is functioning at a normal level but might still have
            symptoms.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Wellbeing.Healthy">
            <summary>
            The person is functioning at a normal level without any
            symptoms.
            </summary>
            
        </member>
        <member name="F:Microsoft.Health.ItemTypes.Wellbeing.Vigorous">
            <summary>
            The person is functioning beyond their normal level. 
            </summary>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.HealthServiceDate">
            <summary> 
            Represents a HealthVault date.
            </summary>
            
            <remarks>
            A HealthVault date differs from a <see cref="T:System.DateTime"/> in 
            that it pertains to dates only, not times. The year, month, and day
            must be specified.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> class 
            with values defaulting to the current year, month, and day.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> class 
            with the specified year, month, and day.
            </summary>
            
            <param name="year">
            The year between 1000 and 9999.
            </param>
            
            <param name="month">
            The month between 1 and 12.
            </param>
            
            <param name="day">
            The day between 1 and 31.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="year"/> parameter is less than 1000 or greater than 9999, 
            or the <paramref name="month"/> parameter is less than 1 or greater than 12, 
            or the <paramref name="day"/> parameter is less than 1 or greater than 31.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the date from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the date.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="navigator"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the date to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the date.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the date to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.CompareTo(System.Object)">
            <summary>
            Compares the specified object to this HealthServiceDate object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="obj"/>. If the result is zero
            the instance is equal to <paramref name="obj"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="obj"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/>
            or <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.CompareTo(Microsoft.Health.ItemTypes.HealthServiceDate)">
            <summary>
            Compares the specified object to this HealthServiceDate object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.CompareTo(System.DateTime)">
            <summary>
            Compares the specified object to this HealthServiceDate object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.Equals(System.Object)">
            <summary>
            Retrieves a value indicating whether the specified object is equal to this object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the <paramref name="obj"/> is a 
            <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> object and the year, month, and
            day exactly match the year, month, and day of this object; otherwise, 
            <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/>
            object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.GetHashCode">
            <summary>
            See the base class documentation.
            </summary>
            
            <returns>
            See the base class documentation.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.op_Equality(Microsoft.Health.ItemTypes.HealthServiceDate,System.Object)">
            <summary>
            Retrieves a value indicating whether the specified object is equal 
            to the specified date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/> ;
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a 
            <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.op_Inequality(Microsoft.Health.ItemTypes.HealthServiceDate,System.Object)">
            <summary>
            Retrieves a value indicating whether the specified object is not 
            equal to the specified date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>false</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/> ; 
            otherwise, <b>true</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.op_GreaterThan(Microsoft.Health.ItemTypes.HealthServiceDate,System.Object)">
            <summary>
            Retrieves a value indicating whether the specified date is greater 
            than the specified object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is greater than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.op_LessThan(Microsoft.Health.ItemTypes.HealthServiceDate,System.Object)">
            <summary>
            Retrieves a value indicating whether the specified date is less than 
            the specified object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is less than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDate"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDate.ToString">
            <summary>
            Gets a string representation of the date.
            </summary>
            
            <returns>
            A string representation of the date.
            </returns>
            
            <remarks>
            This method is not yet culture aware.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthServiceDate.Year">
            <summary>
            Gets or sets the year of the date.
            </summary>
            
            <returns>
            An integer representing the year.
            </returns>
            
            <remarks>
            This value defaults to the current year.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 1000 or greater than 9999.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthServiceDate.Month">
            <summary>
            Gets or sets the month of the date.
            </summary>
            
            <returns>
            An integer representing the month.
            </returns> 
            
            <remarks>
            This value defaults to the current month.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 1 or greater than 12.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthServiceDate.Day">
            <summary>
            Gets or sets the day of the date.
            </summary>
            
            <returns>
            An integer representing the day.
            </returns> 
            
            <remarks>
            This value defaults to the current day.
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value"/> parameter is less than 1 or greater than 31.
            </exception>
            
        </member>
        <member name="T:Microsoft.Health.ItemTypes.HealthServiceDateTime">
            <summary> 
            Represents a date and time.
            </summary>
            
            <remarks>
            A <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> is different from a <see cref="T:System.DateTime"/>
            in that the time is optional and it can be determined if it was 
            specified. Also, the time zone is optional and is not interpreted in
            any way by HealthVault.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> class 
            with the date set to the current date and the time not set.
            </summary>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.#ctor(Microsoft.Health.ItemTypes.HealthServiceDate)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> class 
            with the specified date.
            </summary>
            
            <param name="date">
            The date.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="date"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.#ctor(Microsoft.Health.ItemTypes.HealthServiceDate,Microsoft.Health.ItemTypes.ApproximateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> 
            class with the specified date and time.
            </summary>
            
            <param name="date">
            The date.
            </param>
            
            <param name="time">
            The approximate time.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="date"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.#ctor(Microsoft.Health.ItemTypes.HealthServiceDate,Microsoft.Health.ItemTypes.ApproximateTime,Microsoft.Health.ItemTypes.CodableValue)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> 
            class with the specified date, time, and time zone.
            </summary>
            
            <param name="date">
            The date.
            </param>
            
            <param name="time">
            The approximate time.
            </param>
            
            <param name="timeZone">
            The optional time zone for the <paramref name="time"/>.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="date"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.#ctor(System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> 
            class from the specified DateTime instance.
            </summary>
            
            <param name="dateTime">
            The date and time used to construct the HealthVault date and time.
            </param>
            
            <remarks>
            The time zone is ignored.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.ParseXml(System.Xml.XPath.XPathNavigator)">
            <summary> 
            Populates the data for the date and time from the XML.
            </summary>
            
            <param name="navigator"> 
            The XML node representing the date and time.
            </param>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.WriteXml(System.String,System.Xml.XmlWriter)">
            <summary> 
            Writes the date and time to the specified XML writer.
            </summary>
            
            <param name="nodeName">
            The name of the outer element for the date and time.
            </param>
            
            <param name="writer"> 
            The XmlWriter to write the date and time to.
            </param>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="nodeName"/> parameter is <b>null</b> or empty.
            </exception>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="writer"/> parameter is <b>null</b>.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.op_Explicit(Microsoft.Health.ItemTypes.HealthServiceDateTime)~System.DateTime">
            <summary>
            Casts the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance to a System.DateTime object.
            </summary>
            
            <param name="wcDateTime">
            The <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance to cast.
            </param>
            
            <returns>
            A DateTime instance with the appropriate fields populated by the
            <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> values.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.ToDateTime">
            <summary>
            Converts the <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> instance to a System.DateTime object.
            </summary>
            
            <returns>
            A DateTime instance with the appropriate fields populated by the
            <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> values.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.ToString">
            <summary>
            Gets the date and time as a string.
            </summary>
            
            <returns>
            The date and time represented as a string.
            </returns>
            
            <remarks>
            This method is not yet culture aware.
            </remarks>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.CompareTo(System.Object)">
            <summary>
            Compares the specified object to this <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> 
            object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="obj"/>. If the result is zero
            the instance is equal to <paramref name="obj"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="obj"/>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/>
            or <see cref="T:System.DateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.CompareTo(Microsoft.Health.ItemTypes.HealthServiceDateTime)">
            <summary>
            Compares the specified object to this <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> 
            object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.CompareTo(System.DateTime)">
            <summary>
            Compares the specified object to this HealthServiceDateTime object.
            </summary>
            
            <param name="other">
            The date to be compared.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. If the result is less than zero, the 
            instance is less than <paramref name="other"/>. If the result is zero
            the instance is equal to <paramref name="other"/>. If the result is
            greater than zero, the instance is greater than 
            <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to this object.
            </summary>
            
            <param name="obj">
            The object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the <paramref name="obj"/> is a 
            <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> object and the year, month, and
            day exactly match the year, month, and day of this object; otherwise,
            <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/>
            object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.GetHashCode">
            <summary>
            See the base class documentation.
            </summary>
            
            <returns>
            See the base class documentation.
            </returns>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.op_Equality(Microsoft.Health.ItemTypes.HealthServiceDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to the specified
            date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a 
            <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.op_Inequality(Microsoft.Health.ItemTypes.HealthServiceDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified object is not equal to the specified
            date.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>false</b> if the year, month, and day of the <paramref name="date"/> 
            exactly match the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>true</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a 
            <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.op_GreaterThan(Microsoft.Health.ItemTypes.HealthServiceDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified date is greater than 
            the specified object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is greater than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> object.
            </exception>
            
        </member>
        <member name="M:Microsoft.Health.ItemTypes.HealthServiceDateTime.op_LessThan(Microsoft.Health.ItemTypes.HealthServiceDateTime,System.Object)">
            <summary>
            Gets a value indicating whether the specified date is less than the specified
            object.
            </summary>
            
            <param name="date">
            The date object to be compared.
            </param>
            
            <param name="obj">
            The second object to be compared.
            </param>
            
            <returns>
            <b>true</b> if the year, month, and day of the <paramref name="date"/> 
            is less than the year, month, and day of <paramref name="obj"/>; 
            otherwise, <b>false</b>.
            </returns>
            
            <exception cref="T:System.ArgumentException">
            The <paramref name="obj"/> parameter is not a <see cref="T:Microsoft.Health.ItemTypes.HealthServiceDateTime"/> object.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthServiceDateTime.Date">
            <summary>
            Gets or sets the date.
            </summary>
            
            <remarks>
            Defaults to the current year, month, and day.
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <b>null</b> on set.
            </exception>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthServiceDateTime.Time">
            <summary>
            Gets or sets the time.
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.Health.ItemTypes.ApproximateTime"/> instance representing the time.
            </returns>
            
            <remarks>
            If the time isn't known it can be set to <b>null</b>. This value defaults
            to an absent time. The reference is valid but the time will not be
            stored unless the hour and minute are set.
            </remarks>
            
        </member>
        <member name="P:Microsoft.Health.ItemTypes.HealthServiceDateTime.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            
            <returns>
            A <see cref="T:Microsoft.Health.ItemTypes.CodableValue"/> instance representing the time zone.
            </returns>
            
            <remarks>
            If the time zone is unknown, it can be set to <b>null</b>. This value defaults
            to <b>null</b>.
            </remarks>
            
        </member>
    </members>
</doc>
